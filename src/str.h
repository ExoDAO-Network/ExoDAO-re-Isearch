// Temporary strings are generated by the concatenation operators.
// They are designed to avoid calls to malloc, and as such are not
// meant to be used directly.
class STRING;
 
class TempStr {
public:
    TempStr(fTempStr const &other);
    ~TempStr();
 
    // C++ uses these operators to perform the first concatenation
    friend TempStr operator+(STRING const&, STRING const&);
    friend TempStr operator+(STRING const&, char const*);
    friend TempStr operator+(char const*, STRING const&);
 
    // Susequent concatenations use these operators.  These operators
    // just append the argument data to the temporary, avoiding malloc
    // when possible.
    // XXX these aren't really const, although they are declared as such
    // XXX to avoid warnings. In a land of very advanced compilers, this
    // XXX strategy may backfire.
    friend TempStr& operator+(const TempStr&, STRING const& b);
    friend TempStr& operator+(const TempStr&, char const* b);

    operator char*() const;
    STRINGINDEX GetLength() const;
protected:
    char    indata[100];  // inline data, avoiding malloc
    char*   data;         // points at indata or heap
    u_int   slength;      // same rules as STRING::slength

    friend class STRING;

    TempStr(char const *, u_int, char const *, u_int);
    TempStr& concat(char const* b, u_int bl);
};

inline TempStr::operator char*() const  { return data; }
inline STRINGINDEX TempStr::GetLength() const    { return length_; }


