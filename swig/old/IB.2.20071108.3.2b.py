# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.36
#
# Don't modify this file, modify the SWIG interface instead.

import PyIB
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


GDT_FALSE = PyIB.GDT_FALSE
GDT_TRUE = PyIB.GDT_TRUE
Unsorted = PyIB.Unsorted
ByDate = PyIB.ByDate
ByReverseDate = PyIB.ByReverseDate
ByScore = PyIB.ByScore
ByAdjScore = PyIB.ByAdjScore
ByAuxCount = PyIB.ByAuxCount
ByHits = PyIB.ByHits
ByReverseHits = PyIB.ByReverseHits
ByKey = PyIB.ByKey
ByIndex = PyIB.ByIndex
ByCategory = PyIB.ByCategory
ByNewsrank = PyIB.ByNewsrank
ByFunction = PyIB.ByFunction
ByPrivate = PyIB.ByPrivate
ByPrivateLocal1 = PyIB.ByPrivateLocal1
ByPrivateLocal2 = PyIB.ByPrivateLocal2
ByPrivateLocal3 = PyIB.ByPrivateLocal3
ByExtIndex = PyIB.ByExtIndex
ByExtIndex1 = PyIB.ByExtIndex1
ByExtIndex2 = PyIB.ByExtIndex2
ByExtIndex3 = PyIB.ByExtIndex3
ByExtIndex4 = PyIB.ByExtIndex4
ByExtIndex5 = PyIB.ByExtIndex5
ByExtIndex6 = PyIB.ByExtIndex6
ByExtIndex7 = PyIB.ByExtIndex7
ByExtIndex8 = PyIB.ByExtIndex8
ByExtIndex9 = PyIB.ByExtIndex9
ByExtIndex10 = PyIB.ByExtIndex10
ByExtIndex11 = PyIB.ByExtIndex11
ByExtIndex12 = PyIB.ByExtIndex12
OperatorERR = PyIB.OperatorERR
OperatorNoop = PyIB.OperatorNoop
OperatorNOT = PyIB.OperatorNOT
OperatorWithin = PyIB.OperatorWithin
OperatorXWithin = PyIB.OperatorXWithin
OperatorInside = PyIB.OperatorInside
OperatorNotWithin = PyIB.OperatorNotWithin
OperatorReduce = PyIB.OperatorReduce
OperatorHitCount = PyIB.OperatorHitCount
OperatorTrim = PyIB.OperatorTrim
OperatorWithinFile = PyIB.OperatorWithinFile
OperatorWithinFileExtension = PyIB.OperatorWithinFileExtension
OperatorWithinKey = PyIB.OperatorWithinKey
OperatorWithinDoctype = PyIB.OperatorWithinDoctype
OperatorSortBy = PyIB.OperatorSortBy
OperatorBoostScore = PyIB.OperatorBoostScore
OperatorOr = PyIB.OperatorOr
OperatorAnd = PyIB.OperatorAnd
OperatorAndNot = PyIB.OperatorAndNot
OperatorXor = PyIB.OperatorXor
OperatorXnor = PyIB.OperatorXnor
OperatorNotAnd = PyIB.OperatorNotAnd
OperatorNor = PyIB.OperatorNor
OperatorNand = PyIB.OperatorNand
OperatorLT = PyIB.OperatorLT
OperatorLTE = PyIB.OperatorLTE
OperatorGT = PyIB.OperatorGT
OperatorGTE = PyIB.OperatorGTE
OperatorJoin = PyIB.OperatorJoin
OperatorJoinL = PyIB.OperatorJoinL
OperatorJoinR = PyIB.OperatorJoinR
OperatorProximity = PyIB.OperatorProximity
OperatorBefore = PyIB.OperatorBefore
OperatorAfter = PyIB.OperatorAfter
OperatorAdj = PyIB.OperatorAdj
OperatorFollows = PyIB.OperatorFollows
OperatorPrecedes = PyIB.OperatorPrecedes
OperatorNear = PyIB.OperatorNear
OperatorFar = PyIB.OperatorFar
OperatorNeighbor = PyIB.OperatorNeighbor
OperatorAndWithin = PyIB.OperatorAndWithin
OperatorOrWithin = PyIB.OperatorOrWithin
OperatorBeforeWithin = PyIB.OperatorBeforeWithin
OperatorAfterWithin = PyIB.OperatorAfterWithin
OperatorPeer = PyIB.OperatorPeer
OperatorBeforePeer = PyIB.OperatorBeforePeer
OperatorAfterPeer = PyIB.OperatorAfterPeer
OperatorXPeer = PyIB.OperatorXPeer
Unnormalized = PyIB.Unnormalized
NoNormalization = PyIB.NoNormalization
CosineNormalization = PyIB.CosineNormalization
MaxNormalization = PyIB.MaxNormalization
LogNormalization = PyIB.LogNormalization
BytesNormalization = PyIB.BytesNormalization
preCosineMetricNormalization = PyIB.preCosineMetricNormalization
CosineMetricNormalization = PyIB.CosineMetricNormalization
UndefinedNormalization = PyIB.UndefinedNormalization
ELEMENT_Full = PyIB.ELEMENT_Full
ELEMENT_Brief = PyIB.ELEMENT_Brief
ELEMENT_Short = PyIB.ELEMENT_Short
ELEMENT_G = PyIB.ELEMENT_G
ELEMENT_Raw = PyIB.ELEMENT_Raw
ELEMENT_Location = PyIB.ELEMENT_Location
ELEMENT_Metadata = PyIB.ELEMENT_Metadata
RECORDSYNTAX_Sutrs = PyIB.RECORDSYNTAX_Sutrs
RECORDSYNTAX_Usmarc = PyIB.RECORDSYNTAX_Usmarc
RECORDSYNTAX_Html = PyIB.RECORDSYNTAX_Html
RECORDSYNTAX_Sgml = PyIB.RECORDSYNTAX_Sgml
RECORDSYNTAX_Xml = PyIB.RECORDSYNTAX_Xml
RECORDSYNTAX_Raw = PyIB.RECORDSYNTAX_Raw
RECORDSYNTAX_DVBHtml = PyIB.RECORDSYNTAX_DVBHtml
copyright = PyIB.copyright
version = PyIB.version
class ArraySTRING(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_ArraySTRING(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_ArraySTRING
    __del__ = lambda self : None;
    def Empty(*args): return PyIB.ArraySTRING_Empty(*args)
    def Clear(*args): return PyIB.ArraySTRING_Clear(*args)
    def Count(*args): return PyIB.ArraySTRING_Count(*args)
    def IsEmpty(*args): return PyIB.ArraySTRING_IsEmpty(*args)
    def Item(*args): return PyIB.ArraySTRING_Item(*args)
    def GetEntry(*args): return PyIB.ArraySTRING_GetEntry(*args)
    def __getitem__(*args): return PyIB.ArraySTRING___getitem__(*args)
    def SetEntry(*args): return PyIB.ArraySTRING_SetEntry(*args)
    def Add(*args): return PyIB.ArraySTRING_Add(*args)
    def Insert(*args): return PyIB.ArraySTRING_Insert(*args)
    def Replace(*args): return PyIB.ArraySTRING_Replace(*args)
    def Remove(*args): return PyIB.ArraySTRING_Remove(*args)
    def getself(*args): return PyIB.ArraySTRING_getself(*args)
    def asTuple(*args): return PyIB.ArraySTRING_asTuple(*args)
    def Join(*args): return PyIB.ArraySTRING_Join(*args)
ArraySTRING_swigregister = PyIB.ArraySTRING_swigregister
ArraySTRING_swigregister(ArraySTRING)

class IDB_STATS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_IDB_STATS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_IDB_STATS
    __del__ = lambda self : None;
    def SetHits(*args): return PyIB.IDB_STATS_SetHits(*args)
    def SetTotal(*args): return PyIB.IDB_STATS_SetTotal(*args)
    def GetTotal(*args): return PyIB.IDB_STATS_GetTotal(*args)
    def GetHits(*args): return PyIB.IDB_STATS_GetHits(*args)
    def Clear(*args): return PyIB.IDB_STATS_Clear(*args)
    def SetName(*args): return PyIB.IDB_STATS_SetName(*args)
    def GetName(*args): return PyIB.IDB_STATS_GetName(*args)
IDB_STATS_swigregister = PyIB.IDB_STATS_swigregister
IDB_STATS_swigregister(IDB_STATS)

class VIDB_STATS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_VIDB_STATS(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_VIDB_STATS
    __del__ = lambda self : None;
    def Clear(*args): return PyIB.VIDB_STATS_Clear(*args)
    def SetTotal(*args): return PyIB.VIDB_STATS_SetTotal(*args)
    def SetHits(*args): return PyIB.VIDB_STATS_SetHits(*args)
    def SetName(*args): return PyIB.VIDB_STATS_SetName(*args)
VIDB_STATS_swigregister = PyIB.VIDB_STATS_swigregister
VIDB_STATS_swigregister(VIDB_STATS)

class IDBOBJ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_IDBOBJ(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_IDBOBJ
    __del__ = lambda self : None;
    def getUseRelativePaths(*args): return PyIB.IDBOBJ_getUseRelativePaths(*args)
    def setUseRelativePaths(*args): return PyIB.IDBOBJ_setUseRelativePaths(*args)
    def RelativizePathname(*args): return PyIB.IDBOBJ_RelativizePathname(*args)
    def ResolvePathname(*args): return PyIB.IDBOBJ_ResolvePathname(*args)
IDBOBJ_swigregister = PyIB.IDBOBJ_swigregister
IDBOBJ_swigregister(IDBOBJ)

class INDEX_ID(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_INDEX_ID(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_INDEX_ID
    __del__ = lambda self : None;
    def GetIndex(*args): return PyIB.INDEX_ID_GetIndex(*args)
    def SetIndex(*args): return PyIB.INDEX_ID_SetIndex(*args)
    def SetMdtIndex(*args): return PyIB.INDEX_ID_SetMdtIndex(*args)
    def GetMdtIndex(*args): return PyIB.INDEX_ID_GetMdtIndex(*args)
    def SetVirtualIndex(*args): return PyIB.INDEX_ID_SetVirtualIndex(*args)
    def GetVirtualIndex(*args): return PyIB.INDEX_ID_GetVirtualIndex(*args)
    def Equals(*args): return PyIB.INDEX_ID_Equals(*args)
    def Compare(*args): return PyIB.INDEX_ID_Compare(*args)
INDEX_ID_swigregister = PyIB.INDEX_ID_swigregister
INDEX_ID_swigregister(INDEX_ID)

class DOCTYPE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DOCTYPE(*args)
        try: self.this.append(this)
        except: self.this = this
    def ParseDate(*args): return PyIB.DOCTYPE_ParseDate(*args)
    def ParseDateRange(*args): return PyIB.DOCTYPE_ParseDateRange(*args)
    __swig_destroy__ = PyIB.delete_DOCTYPE
    __del__ = lambda self : None;
DOCTYPE_swigregister = PyIB.DOCTYPE_swigregister
DOCTYPE_swigregister(DOCTYPE)

class DTREG(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DTREG(*args)
        try: self.this.append(this)
        except: self.this = this
    def PluginExists(*args): return PyIB.DTREG_PluginExists(*args)
    def AddPluginPath(*args): return PyIB.DTREG_AddPluginPath(*args)
    def GetDocTypePtr(*args): return PyIB.DTREG_GetDocTypePtr(*args)
    def ValidateDocType(*args): return PyIB.DTREG_ValidateDocType(*args)
    def GetDocTypeList(*args): return PyIB.DTREG_GetDocTypeList(*args)
    def Version(*args): return PyIB.DTREG_Version(*args)
    __swig_destroy__ = PyIB.delete_DTREG
    __del__ = lambda self : None;
DTREG_swigregister = PyIB.DTREG_swigregister
DTREG_swigregister(DTREG)

class MDTREC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_MDTREC(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetCategory(*args): return PyIB.MDTREC_SetCategory(*args)
    def GetCategory(*args): return PyIB.MDTREC_GetCategory(*args)
    def SetPriority(*args): return PyIB.MDTREC_SetPriority(*args)
    def GetPriority(*args): return PyIB.MDTREC_GetPriority(*args)
    def SetKey(*args): return PyIB.MDTREC_SetKey(*args)
    def GetKey(*args): return PyIB.MDTREC_GetKey(*args)
    def SetDocumentType(*args): return PyIB.MDTREC_SetDocumentType(*args)
    def GetDocumentType(*args): return PyIB.MDTREC_GetDocumentType(*args)
    def SetPathName(*args): return PyIB.MDTREC_SetPathName(*args)
    def GetPathName(*args): return PyIB.MDTREC_GetPathName(*args)
    def SetFileName(*args): return PyIB.MDTREC_SetFileName(*args)
    def GetFileName(*args): return PyIB.MDTREC_GetFileName(*args)
    def SetFullFileName(*args): return PyIB.MDTREC_SetFullFileName(*args)
    def GetFullFileName(*args): return PyIB.MDTREC_GetFullFileName(*args)
    def SetGlobalFileStart(*args): return PyIB.MDTREC_SetGlobalFileStart(*args)
    def GetGlobalFileStart(*args): return PyIB.MDTREC_GetGlobalFileStart(*args)
    def SetLocalRecordStart(*args): return PyIB.MDTREC_SetLocalRecordStart(*args)
    def GetLocalRecordStart(*args): return PyIB.MDTREC_GetLocalRecordStart(*args)
    def SetLocalRecordEnd(*args): return PyIB.MDTREC_SetLocalRecordEnd(*args)
    def GetLocalRecordEnd(*args): return PyIB.MDTREC_GetLocalRecordEnd(*args)
    def SetLocale(*args): return PyIB.MDTREC_SetLocale(*args)
    def GetLocale(*args): return PyIB.MDTREC_GetLocale(*args)
    def SetDate(*args): return PyIB.MDTREC_SetDate(*args)
    def GetDate(*args): return PyIB.MDTREC_GetDate(*args)
    def SetDateModified(*args): return PyIB.MDTREC_SetDateModified(*args)
    def GetDateModified(*args): return PyIB.MDTREC_GetDateModified(*args)
    def SetDateCreated(*args): return PyIB.MDTREC_SetDateCreated(*args)
    def GetDateCreated(*args): return PyIB.MDTREC_GetDateCreated(*args)
    def SetDateExpires(*args): return PyIB.MDTREC_SetDateExpires(*args)
    def GetDateExpires(*args): return PyIB.MDTREC_GetDateExpires(*args)
    def TTL(*args): return PyIB.MDTREC_TTL(*args)
    def SetDeleted(*args): return PyIB.MDTREC_SetDeleted(*args)
    def GetDeleted(*args): return PyIB.MDTREC_GetDeleted(*args)
    def FlipBytes(*args): return PyIB.MDTREC_FlipBytes(*args)
    def Dump(*args): return PyIB.MDTREC_Dump(*args)
    __swig_destroy__ = PyIB.delete_MDTREC
    __del__ = lambda self : None;
MDTREC_swigregister = PyIB.MDTREC_swigregister
MDTREC_swigregister(MDTREC)

class MDT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_MDT(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetFileStem(*args): return PyIB.MDT_GetFileStem(*args)
    def SetEntry(*args): return PyIB.MDT_SetEntry(*args)
    def LookupByKey(*args): return PyIB.MDT_LookupByKey(*args)
    def GetEntry(*args): return PyIB.MDT_GetEntry(*args)
    def Delete(*args): return PyIB.MDT_Delete(*args)
    def UnDelete(*args): return PyIB.MDT_UnDelete(*args)
    def IsDeleted(*args): return PyIB.MDT_IsDeleted(*args)
    def GetTotalEntries(*args): return PyIB.MDT_GetTotalEntries(*args)
    def GetTotalDeleted(*args): return PyIB.MDT_GetTotalDeleted(*args)
    def GetChanged(*args): return PyIB.MDT_GetChanged(*args)
    def RemoveDeleted(*args): return PyIB.MDT_RemoveDeleted(*args)
    def Ok(*args): return PyIB.MDT_Ok(*args)
    __swig_destroy__ = PyIB.delete_MDT
    __del__ = lambda self : None;
MDT_swigregister = PyIB.MDT_swigregister
MDT_swigregister(MDT)

class FC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_FC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(*args): return PyIB.FC_Write(*args)
    def Read(*args): return PyIB.FC_Read(*args)
    def SetFieldStart(*args): return PyIB.FC_SetFieldStart(*args)
    def SetFieldEnd(*args): return PyIB.FC_SetFieldEnd(*args)
    def GetFieldStart(*args): return PyIB.FC_GetFieldStart(*args)
    def GetFieldEnd(*args): return PyIB.FC_GetFieldEnd(*args)
    def GetLength(*args): return PyIB.FC_GetLength(*args)
    def Compare(*args): return PyIB.FC_Compare(*args)
    def Contains(*args): return PyIB.FC_Contains(*args)
    def asTuple(*args): return PyIB.FC_asTuple(*args)
    def FlipBytes(*args): return PyIB.FC_FlipBytes(*args)
    __swig_destroy__ = PyIB.delete_FC
    __del__ = lambda self : None;
FC_swigregister = PyIB.FC_swigregister
FC_swigregister(FC)

class TREENODE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_TREENODE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_TREENODE
    __del__ = lambda self : None;
    def Name(*args): return PyIB.TREENODE_Name(*args)
    def Fc(*args): return PyIB.TREENODE_Fc(*args)
TREENODE_swigregister = PyIB.TREENODE_swigregister
TREENODE_swigregister(TREENODE)

class NODETREE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_NODETREE(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddEntry(*args): return PyIB.NODETREE_AddEntry(*args)
    def Clear(*args): return PyIB.NODETREE_Clear(*args)
    def Reverse(*args): return PyIB.NODETREE_Reverse(*args)
    def Sort(*args): return PyIB.NODETREE_Sort(*args)
    def IsSorted(*args): return PyIB.NODETREE_IsSorted(*args)
    def IsEmpty(*args): return PyIB.NODETREE_IsEmpty(*args)
    def GetEntry(*args): return PyIB.NODETREE_GetEntry(*args)
    def XMLNodeTree(*args): return PyIB.NODETREE_XMLNodeTree(*args)
    __swig_destroy__ = PyIB.delete_NODETREE
    __del__ = lambda self : None;
NODETREE_swigregister = PyIB.NODETREE_swigregister
NODETREE_swigregister(NODETREE)

class RESULT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_RESULT(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(*args): return PyIB.RESULT_Write(*args)
    def Read(*args): return PyIB.RESULT_Read(*args)
    def SetIndex(*args): return PyIB.RESULT_SetIndex(*args)
    def GetIndex(*args): return PyIB.RESULT_GetIndex(*args)
    def SetMdtIndex(*args): return PyIB.RESULT_SetMdtIndex(*args)
    def GetMdtIndex(*args): return PyIB.RESULT_GetMdtIndex(*args)
    def SetVirtualIndex(*args): return PyIB.RESULT_SetVirtualIndex(*args)
    def GetVirtualIndex(*args): return PyIB.RESULT_GetVirtualIndex(*args)
    def GetCategory(*args): return PyIB.RESULT_GetCategory(*args)
    def SetCategory(*args): return PyIB.RESULT_SetCategory(*args)
    def SetKey(*args): return PyIB.RESULT_SetKey(*args)
    def GetKey(*args): return PyIB.RESULT_GetKey(*args)
    def GetGlobalKey(*args): return PyIB.RESULT_GetGlobalKey(*args)
    def GetLanguageCode(*args): return PyIB.RESULT_GetLanguageCode(*args)
    def GetCharsetCode(*args): return PyIB.RESULT_GetCharsetCode(*args)
    def GetLanguageName(*args): return PyIB.RESULT_GetLanguageName(*args)
    def GetCharsetName(*args): return PyIB.RESULT_GetCharsetName(*args)
    def GetFullFileName(*args): return PyIB.RESULT_GetFullFileName(*args)
    def GetPathName(*args): return PyIB.RESULT_GetPathName(*args)
    def GetFileName(*args): return PyIB.RESULT_GetFileName(*args)
    def GetDoctype(*args): return PyIB.RESULT_GetDoctype(*args)
    def GetRecordStart(*args): return PyIB.RESULT_GetRecordStart(*args)
    def GetRecordEnd(*args): return PyIB.RESULT_GetRecordEnd(*args)
    def GetLength(*args): return PyIB.RESULT_GetLength(*args)
    def GetRecordSize(*args): return PyIB.RESULT_GetRecordSize(*args)
    def GetScore(*args): return PyIB.RESULT_GetScore(*args)
    def GetAuxCount(*args): return PyIB.RESULT_GetAuxCount(*args)
    def GetHitTotal(*args): return PyIB.RESULT_GetHitTotal(*args)
    def GetDate(*args): return PyIB.RESULT_GetDate(*args)
    def GetDateModified(*args): return PyIB.RESULT_GetDateModified(*args)
    def GetDateCreated(*args): return PyIB.RESULT_GetDateCreated(*args)
    def GetHitTable(*args): return PyIB.RESULT_GetHitTable(*args)
    def GetRefcount_(*args): return PyIB.RESULT_GetRefcount_(*args)
    def XMLHitTable(*args): return PyIB.RESULT_XMLHitTable(*args)
    __swig_destroy__ = PyIB.delete_RESULT
    __del__ = lambda self : None;
RESULT_swigregister = PyIB.RESULT_swigregister
RESULT_swigregister(RESULT)

class IRSET(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_IRSET(*args)
        try: self.this.append(this)
        except: self.this = this
    def getself(*args): return PyIB.IRSET_getself(*args)
    def Write(*args): return PyIB.IRSET_Write(*args)
    def Read(*args): return PyIB.IRSET_Read(*args)
    def LoadTable(*args): return PyIB.IRSET_LoadTable(*args)
    def SaveTable(*args): return PyIB.IRSET_SaveTable(*args)
    def SaveSearch(*args): return PyIB.IRSET_SaveSearch(*args)
    def LoadSearch(*args): return PyIB.IRSET_LoadSearch(*args)
    def GetRset(*args): return PyIB.IRSET_GetRset(*args)
    def Fill(*args): return PyIB.IRSET_Fill(*args)
    def GetTotalEntries(*args): return PyIB.IRSET_GetTotalEntries(*args)
    def GetHitTotal(*args): return PyIB.IRSET_GetHitTotal(*args)
    def Or(*args): return PyIB.IRSET_Or(*args)
    def Nor(*args): return PyIB.IRSET_Nor(*args)
    def And(*args): return PyIB.IRSET_And(*args)
    def Nand(*args): return PyIB.IRSET_Nand(*args)
    def AndNot(*args): return PyIB.IRSET_AndNot(*args)
    def Xor(*args): return PyIB.IRSET_Xor(*args)
    def Near(*args): return PyIB.IRSET_Near(*args)
    def Far(*args): return PyIB.IRSET_Far(*args)
    def After(*args): return PyIB.IRSET_After(*args)
    def Before(*args): return PyIB.IRSET_Before(*args)
    def Adj(*args): return PyIB.IRSET_Adj(*args)
    def Follows(*args): return PyIB.IRSET_Follows(*args)
    def Precedes(*args): return PyIB.IRSET_Precedes(*args)
    def Neighbor(*args): return PyIB.IRSET_Neighbor(*args)
    def Peer(*args): return PyIB.IRSET_Peer(*args)
    def BeforePeer(*args): return PyIB.IRSET_BeforePeer(*args)
    def AfterPeer(*args): return PyIB.IRSET_AfterPeer(*args)
    def XPeer(*args): return PyIB.IRSET_XPeer(*args)
    def Within(*args): return PyIB.IRSET_Within(*args)
    def BeforeWithin(*args): return PyIB.IRSET_BeforeWithin(*args)
    def AfterWithin(*args): return PyIB.IRSET_AfterWithin(*args)
    def XWithin(*args): return PyIB.IRSET_XWithin(*args)
    def Inside(*args): return PyIB.IRSET_Inside(*args)
    def WithinXChars(*args): return PyIB.IRSET_WithinXChars(*args)
    def WithinXChars_Before(*args): return PyIB.IRSET_WithinXChars_Before(*args)
    def WithinXChars_After(*args): return PyIB.IRSET_WithinXChars_After(*args)
    def WithinXPercent(*args): return PyIB.IRSET_WithinXPercent(*args)
    def WithinXPercent_Before(*args): return PyIB.IRSET_WithinXPercent_Before(*args)
    def WithinXPercent_After(*args): return PyIB.IRSET_WithinXPercent_After(*args)
    def Not(*args): return PyIB.IRSET_Not(*args)
    def Reduce(*args): return PyIB.IRSET_Reduce(*args)
    def ComputeScores(*args): return PyIB.IRSET_ComputeScores(*args)
    def SortBy(*args): return PyIB.IRSET_SortBy(*args)
    def GetMaxScore(*args): return PyIB.IRSET_GetMaxScore(*args)
    def GetMinScore(*args): return PyIB.IRSET_GetMinScore(*args)
    __swig_destroy__ = PyIB.delete_IRSET
    __del__ = lambda self : None;
IRSET_swigregister = PyIB.IRSET_swigregister
IRSET_swigregister(IRSET)

class RSET(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_RSET(*args)
        try: self.this.append(this)
        except: self.this = this
    def getself(*args): return PyIB.RSET_getself(*args)
    def Write(*args): return PyIB.RSET_Write(*args)
    def Read(*args): return PyIB.RSET_Read(*args)
    def Cat(*args): return PyIB.RSET_Cat(*args)
    def LoadTable(*args): return PyIB.RSET_LoadTable(*args)
    def SaveTable(*args): return PyIB.RSET_SaveTable(*args)
    def GetMaxScore(*args): return PyIB.RSET_GetMaxScore(*args)
    def GetMinScore(*args): return PyIB.RSET_GetMinScore(*args)
    def FilterDateRange(*args): return PyIB.RSET_FilterDateRange(*args)
    def GetEntry(*args): return PyIB.RSET_GetEntry(*args)
    def GetScaledScore(*args): return PyIB.RSET_GetScaledScore(*args)
    def GetHitTotal(*args): return PyIB.RSET_GetHitTotal(*args)
    def Find(*args): return PyIB.RSET_Find(*args)
    def GetTotalEntries(*args): return PyIB.RSET_GetTotalEntries(*args)
    def SortBy(*args): return PyIB.RSET_SortBy(*args)
    def SortByCategoryMagnetism(*args): return PyIB.RSET_SortByCategoryMagnetism(*args)
    def Reduce(*args): return PyIB.RSET_Reduce(*args)
    def DropByTerms(*args): return PyIB.RSET_DropByTerms(*args)
    def DropByScore(*args): return PyIB.RSET_DropByScore(*args)
    def __getitem__(*args): return PyIB.RSET___getitem__(*args)
    __swig_destroy__ = PyIB.delete_RSET
    __del__ = lambda self : None;
RSET_swigregister = PyIB.RSET_swigregister
RSET_swigregister(RSET)

class INFIX2RPN(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_INFIX2RPN(*args)
        try: self.this.append(this)
        except: self.this = this
    def Parse(*args): return PyIB.INFIX2RPN_Parse(*args)
    def InputParsedOK(*args): return PyIB.INFIX2RPN_InputParsedOK(*args)
    def GetErrorMessage(*args): return PyIB.INFIX2RPN_GetErrorMessage(*args)
    __swig_destroy__ = PyIB.delete_INFIX2RPN
    __del__ = lambda self : None;
INFIX2RPN_swigregister = PyIB.INFIX2RPN_swigregister
INFIX2RPN_swigregister(INFIX2RPN)

class THESAURUS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_THESAURUS(*args)
        try: self.this.append(this)
        except: self.this = this
    def Compile(*args): return PyIB.THESAURUS_Compile(*args)
    def SetFileName(*args): return PyIB.THESAURUS_SetFileName(*args)
    __swig_destroy__ = PyIB.delete_THESAURUS
    __del__ = lambda self : None;
THESAURUS_swigregister = PyIB.THESAURUS_swigregister
THESAURUS_swigregister(THESAURUS)

class OPERATOR(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_OPERATOR(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetOpType(*args): return PyIB.OPERATOR_GetOpType(*args)
    def SetOperatorType(*args): return PyIB.OPERATOR_SetOperatorType(*args)
    def GetOperatorType(*args): return PyIB.OPERATOR_GetOperatorType(*args)
    def SetOperatorMetric(*args): return PyIB.OPERATOR_SetOperatorMetric(*args)
    def GetOperatorMetric(*args): return PyIB.OPERATOR_GetOperatorMetric(*args)
    def SetOperatorString(*args): return PyIB.OPERATOR_SetOperatorString(*args)
    def GetOperatorString(*args): return PyIB.OPERATOR_GetOperatorString(*args)
    __swig_destroy__ = PyIB.delete_OPERATOR
    __del__ = lambda self : None;
OPERATOR_swigregister = PyIB.OPERATOR_swigregister
OPERATOR_swigregister(OPERATOR)

QueryAutodetect = PyIB.QueryAutodetect
QueryRPN = PyIB.QueryRPN
QueryInfix = PyIB.QueryInfix
QueryRelevantId = PyIB.QueryRelevantId
class SQUERY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = PyIB.new_SQUERY(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(*args): return PyIB.SQUERY_Write(*args)
    def Read(*args): return PyIB.SQUERY_Read(*args)
    def __repr__(*args): return PyIB.SQUERY___repr__(*args)
    def GetTotalTerms(*args): return PyIB.SQUERY_GetTotalTerms(*args)
    def SetOperator(*args): return PyIB.SQUERY_SetOperator(*args)
    def SetOperatorAndWithin(*args): return PyIB.SQUERY_SetOperatorAndWithin(*args)
    def SetOperatorNear(*args): return PyIB.SQUERY_SetOperatorNear(*args)
    def SetOperatorPeer(*args): return PyIB.SQUERY_SetOperatorPeer(*args)
    def SetAttributes(*args): return PyIB.SQUERY_SetAttributes(*args)
    def isPlainQuery(*args): return PyIB.SQUERY_isPlainQuery(*args)
    def isOpQuery(*args): return PyIB.SQUERY_isOpQuery(*args)
    def SetRelevantTerm(*args): return PyIB.SQUERY_SetRelevantTerm(*args)
    def SetInfixTerm(*args): return PyIB.SQUERY_SetInfixTerm(*args)
    def SetRpnTerm(*args): return PyIB.SQUERY_SetRpnTerm(*args)
    def SetQueryTerm(*args): return PyIB.SQUERY_SetQueryTerm(*args)
    def SetQueryTermUTF(*args): return PyIB.SQUERY_SetQueryTermUTF(*args)
    def SetWordsAnd(*args): return PyIB.SQUERY_SetWordsAnd(*args)
    def SetWords(*args): return PyIB.SQUERY_SetWords(*args)
    def SetFreeFormWords(*args): return PyIB.SQUERY_SetFreeFormWords(*args)
    def SetFreeFormWordsPhonetic(*args): return PyIB.SQUERY_SetFreeFormWordsPhonetic(*args)
    def LastErrorMessage(*args): return PyIB.SQUERY_LastErrorMessage(*args)
    def GetRpnTerm(*args): return PyIB.SQUERY_GetRpnTerm(*args)
    def Cat(*args): return PyIB.SQUERY_Cat(*args)
    def OpenThesaurus(*args): return PyIB.SQUERY_OpenThesaurus(*args)
    def CloseThesaurus(*args): return PyIB.SQUERY_CloseThesaurus(*args)
    def ExpandQuery(*args): return PyIB.SQUERY_ExpandQuery(*args)
    __swig_destroy__ = PyIB.delete_SQUERY
    __del__ = lambda self : None;
SQUERY_swigregister = PyIB.SQUERY_swigregister
SQUERY_swigregister(SQUERY)

class QUERY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_QUERY(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetSQUERY(*args): return PyIB.QUERY_SetSQUERY(*args)
    def GetSQUERY(*args): return PyIB.QUERY_GetSQUERY(*args)
    def SetNormalizationMethod(*args): return PyIB.QUERY_SetNormalizationMethod(*args)
    def GetNormalizationMethod(*args): return PyIB.QUERY_GetNormalizationMethod(*args)
    def SetSortBy(*args): return PyIB.QUERY_SetSortBy(*args)
    def GetSortBy(*args): return PyIB.QUERY_GetSortBy(*args)
    def GetMaximumResults(*args): return PyIB.QUERY_GetMaximumResults(*args)
    def SetMaximumResults(*args): return PyIB.QUERY_SetMaximumResults(*args)
    def Write(*args): return PyIB.QUERY_Write(*args)
    def Read(*args): return PyIB.QUERY_Read(*args)
    def asTuple(*args): return PyIB.QUERY_asTuple(*args)
    __swig_destroy__ = PyIB.delete_QUERY
    __del__ = lambda self : None;
QUERY_swigregister = PyIB.QUERY_swigregister
QUERY_swigregister(QUERY)

class SRCH_DATE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = PyIB.new_SRCH_DATE(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(*args): return PyIB.SRCH_DATE_Write(*args)
    def Read(*args): return PyIB.SRCH_DATE_Read(*args)
    def __repr__(*args): return PyIB.SRCH_DATE___repr__(*args)
    def Plus(*args): return PyIB.SRCH_DATE_Plus(*args)
    def Minus(*args): return PyIB.SRCH_DATE_Minus(*args)
    def PlusNseconds(*args): return PyIB.SRCH_DATE_PlusNseconds(*args)
    def PlusNminutes(*args): return PyIB.SRCH_DATE_PlusNminutes(*args)
    def PlusNhours(*args): return PyIB.SRCH_DATE_PlusNhours(*args)
    def PlusNdays(*args): return PyIB.SRCH_DATE_PlusNdays(*args)
    def PlusNweeks(*args): return PyIB.SRCH_DATE_PlusNweeks(*args)
    def PlusNmonths(*args): return PyIB.SRCH_DATE_PlusNmonths(*args)
    def PlusNyears(*args): return PyIB.SRCH_DATE_PlusNyears(*args)
    def MinusNseconds(*args): return PyIB.SRCH_DATE_MinusNseconds(*args)
    def MinusNminutes(*args): return PyIB.SRCH_DATE_MinusNminutes(*args)
    def MinusNhours(*args): return PyIB.SRCH_DATE_MinusNhours(*args)
    def MinusNdays(*args): return PyIB.SRCH_DATE_MinusNdays(*args)
    def MinusNweeks(*args): return PyIB.SRCH_DATE_MinusNweeks(*args)
    def MinusNmonths(*args): return PyIB.SRCH_DATE_MinusNmonths(*args)
    def MinusNyears(*args): return PyIB.SRCH_DATE_MinusNyears(*args)
    def Tommorrow(*args): return PyIB.SRCH_DATE_Tommorrow(*args)
    def Yesterday(*args): return PyIB.SRCH_DATE_Yesterday(*args)
    def NextWeek(*args): return PyIB.SRCH_DATE_NextWeek(*args)
    def LastWeek(*args): return PyIB.SRCH_DATE_LastWeek(*args)
    def NextMonth(*args): return PyIB.SRCH_DATE_NextMonth(*args)
    def LastMonth(*args): return PyIB.SRCH_DATE_LastMonth(*args)
    def NextYear(*args): return PyIB.SRCH_DATE_NextYear(*args)
    def LastYear(*args): return PyIB.SRCH_DATE_LastYear(*args)
    def GetValue(*args): return PyIB.SRCH_DATE_GetValue(*args)
    def IsYearDate(*args): return PyIB.SRCH_DATE_IsYearDate(*args)
    def IsMonthDate(*args): return PyIB.SRCH_DATE_IsMonthDate(*args)
    def IsDayDate(*args): return PyIB.SRCH_DATE_IsDayDate(*args)
    def IsBogusDate(*args): return PyIB.SRCH_DATE_IsBogusDate(*args)
    def IsValidDate(*args): return PyIB.SRCH_DATE_IsValidDate(*args)
    def IsLeapYear(*args): return PyIB.SRCH_DATE_IsLeapYear(*args)
    def Ok(*args): return PyIB.SRCH_DATE_Ok(*args)
    def TrimToMonth(*args): return PyIB.SRCH_DATE_TrimToMonth(*args)
    def TrimToYear(*args): return PyIB.SRCH_DATE_TrimToYear(*args)
    def SetToYearStart(*args): return PyIB.SRCH_DATE_SetToYearStart(*args)
    def SetToYearEnd(*args): return PyIB.SRCH_DATE_SetToYearEnd(*args)
    def SetToMonthStart(*args): return PyIB.SRCH_DATE_SetToMonthStart(*args)
    def SetToMonthEnd(*args): return PyIB.SRCH_DATE_SetToMonthEnd(*args)
    def SetToDayStart(*args): return PyIB.SRCH_DATE_SetToDayStart(*args)
    def SetToDayEnd(*args): return PyIB.SRCH_DATE_SetToDayEnd(*args)
    def PromoteToMonthStart(*args): return PyIB.SRCH_DATE_PromoteToMonthStart(*args)
    def PromoteToMonthEnd(*args): return PyIB.SRCH_DATE_PromoteToMonthEnd(*args)
    def PromoteToDayStart(*args): return PyIB.SRCH_DATE_PromoteToDayStart(*args)
    def PromoteToDayEnd(*args): return PyIB.SRCH_DATE_PromoteToDayEnd(*args)
    def GetTodaysDate(*args): return PyIB.SRCH_DATE_GetTodaysDate(*args)
    def SetNow(*args): return PyIB.SRCH_DATE_SetNow(*args)
    def SetYear(*args): return PyIB.SRCH_DATE_SetYear(*args)
    def SetMonth(*args): return PyIB.SRCH_DATE_SetMonth(*args)
    def SetDay(*args): return PyIB.SRCH_DATE_SetDay(*args)
    def Year(*args): return PyIB.SRCH_DATE_Year(*args)
    def Month(*args): return PyIB.SRCH_DATE_Month(*args)
    def Day(*args): return PyIB.SRCH_DATE_Day(*args)
    def DayOfWeek(*args): return PyIB.SRCH_DATE_DayOfWeek(*args)
    def DayOfYear(*args): return PyIB.SRCH_DATE_DayOfYear(*args)
    def GetFirstDayOfMonth(*args): return PyIB.SRCH_DATE_GetFirstDayOfMonth(*args)
    def GetWeekOfMonth(*args): return PyIB.SRCH_DATE_GetWeekOfMonth(*args)
    def WeekOfYear(*args): return PyIB.SRCH_DATE_WeekOfYear(*args)
    def GetDaysInMonth(*args): return PyIB.SRCH_DATE_GetDaysInMonth(*args)
    def GetJulianDate(*args): return PyIB.SRCH_DATE_GetJulianDate(*args)
    def GetTimeSeconds(*args): return PyIB.SRCH_DATE_GetTimeSeconds(*args)
    def SetTimeOfFile(*args): return PyIB.SRCH_DATE_SetTimeOfFile(*args)
    def SetTimeOfFileCreation(*args): return PyIB.SRCH_DATE_SetTimeOfFileCreation(*args)
    def GetTimeOfFile(*args): return PyIB.SRCH_DATE_GetTimeOfFile(*args)
    def GetTimeOfFileCreation(*args): return PyIB.SRCH_DATE_GetTimeOfFileCreation(*args)
    def IsBefore(*args): return PyIB.SRCH_DATE_IsBefore(*args)
    def Equals(*args): return PyIB.SRCH_DATE_Equals(*args)
    def IsDuring(*args): return PyIB.SRCH_DATE_IsDuring(*args)
    def IsAfter(*args): return PyIB.SRCH_DATE_IsAfter(*args)
    def ISOdate(*args): return PyIB.SRCH_DATE_ISOdate(*args)
    def RFCdate(*args): return PyIB.SRCH_DATE_RFCdate(*args)
    def ANSIdate(*args): return PyIB.SRCH_DATE_ANSIdate(*args)
    def LCdate(*args): return PyIB.SRCH_DATE_LCdate(*args)
    def Strftime(*args): return PyIB.SRCH_DATE_Strftime(*args)
    def __cmp__(*args): return PyIB.SRCH_DATE___cmp__(*args)
    __swig_destroy__ = PyIB.delete_SRCH_DATE
    __del__ = lambda self : None;
SRCH_DATE_swigregister = PyIB.SRCH_DATE_swigregister
SRCH_DATE_swigregister(SRCH_DATE)

class DATERANGE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DATERANGE(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetStart(*args): return PyIB.DATERANGE_GetStart(*args)
    def GetEnd(*args): return PyIB.DATERANGE_GetEnd(*args)
    def SetStart(*args): return PyIB.DATERANGE_SetStart(*args)
    def SetEnd(*args): return PyIB.DATERANGE_SetEnd(*args)
    def Ok(*args): return PyIB.DATERANGE_Ok(*args)
    def Defined(*args): return PyIB.DATERANGE_Defined(*args)
    def Contains(*args): return PyIB.DATERANGE_Contains(*args)
    def ISO(*args): return PyIB.DATERANGE_ISO(*args)
    def RFC(*args): return PyIB.DATERANGE_RFC(*args)
    def Strftime(*args): return PyIB.DATERANGE_Strftime(*args)
    def Write(*args): return PyIB.DATERANGE_Write(*args)
    def Read(*args): return PyIB.DATERANGE_Read(*args)
    __swig_destroy__ = PyIB.delete_DATERANGE
    __del__ = lambda self : None;
    def asTuple(*args): return PyIB.DATERANGE_asTuple(*args)
    def Duration(*args): return PyIB.DATERANGE_Duration(*args)
DATERANGE_swigregister = PyIB.DATERANGE_swigregister
DATERANGE_swigregister(DATERANGE)

class SCANOBJ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_SCANOBJ(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frequency(*args): return PyIB.SCANOBJ_Frequency(*args)
    def Term(*args): return PyIB.SCANOBJ_Term(*args)
    __swig_destroy__ = PyIB.delete_SCANOBJ
    __del__ = lambda self : None;
    def asTuple(*args): return PyIB.SCANOBJ_asTuple(*args)
SCANOBJ_swigregister = PyIB.SCANOBJ_swigregister
SCANOBJ_swigregister(SCANOBJ)

class SCANLIST(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_SCANLIST(*args)
        try: self.this.append(this)
        except: self.this = this
    def Reverse(*args): return PyIB.SCANLIST_Reverse(*args)
    def IsEmpty(*args): return PyIB.SCANLIST_IsEmpty(*args)
    def GetTotalEntries(*args): return PyIB.SCANLIST_GetTotalEntries(*args)
    def GetEntry(*args): return PyIB.SCANLIST_GetEntry(*args)
    __swig_destroy__ = PyIB.delete_SCANLIST
    __del__ = lambda self : None;
    def Get(*args): return PyIB.SCANLIST_Get(*args)
    def __getitem__(*args): return PyIB.SCANLIST___getitem__(*args)
SCANLIST_swigregister = PyIB.SCANLIST_swigregister
SCANLIST_swigregister(SCANLIST)

class DOCTYPE_ID(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DOCTYPE_ID(*args)
        try: self.this.append(this)
        except: self.this = this
    def DocumentType(*args): return PyIB.DOCTYPE_ID_DocumentType(*args)
    def Set(*args): return PyIB.DOCTYPE_ID_Set(*args)
    def Get(*args): return PyIB.DOCTYPE_ID_Get(*args)
    def c_str(*args): return PyIB.DOCTYPE_ID_c_str(*args)
    def IsDefined(*args): return PyIB.DOCTYPE_ID_IsDefined(*args)
    def Equals(*args): return PyIB.DOCTYPE_ID_Equals(*args)
    __swig_destroy__ = PyIB.delete_DOCTYPE_ID
    __del__ = lambda self : None;
DOCTYPE_ID_swigregister = PyIB.DOCTYPE_ID_swigregister
DOCTYPE_ID_swigregister(DOCTYPE_ID)

class DOC_ID(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DOC_ID(*args)
        try: self.this.append(this)
        except: self.this = this
    def Equals(*args): return PyIB.DOC_ID_Equals(*args)
    def Compare(*args): return PyIB.DOC_ID_Compare(*args)
    def GlobalKey(*args): return PyIB.DOC_ID_GlobalKey(*args)
    __swig_destroy__ = PyIB.delete_DOC_ID
    __del__ = lambda self : None;
DOC_ID_swigregister = PyIB.DOC_ID_swigregister
DOC_ID_swigregister(DOC_ID)

class RECORD(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_RECORD(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetKey(*args): return PyIB.RECORD_SetKey(*args)
    def GetKey(*args): return PyIB.RECORD_GetKey(*args)
    def SetPathName(*args): return PyIB.RECORD_SetPathName(*args)
    def GetPathName(*args): return PyIB.RECORD_GetPathName(*args)
    def SetFileName(*args): return PyIB.RECORD_SetFileName(*args)
    def GetFileName(*args): return PyIB.RECORD_GetFileName(*args)
    def SetFullFileName(*args): return PyIB.RECORD_SetFullFileName(*args)
    def GetFullFileName(*args): return PyIB.RECORD_GetFullFileName(*args)
    def SetRecordStart(*args): return PyIB.RECORD_SetRecordStart(*args)
    def GetRecordStart(*args): return PyIB.RECORD_GetRecordStart(*args)
    def SetRecordEnd(*args): return PyIB.RECORD_SetRecordEnd(*args)
    def GetRecordEnd(*args): return PyIB.RECORD_GetRecordEnd(*args)
    def SetDocumentType(*args): return PyIB.RECORD_SetDocumentType(*args)
    def GetDocumentType(*args): return PyIB.RECORD_GetDocumentType(*args)
    def GetLocale(*args): return PyIB.RECORD_GetLocale(*args)
    def SetLocale(*args): return PyIB.RECORD_SetLocale(*args)
    def SetLanguage(*args): return PyIB.RECORD_SetLanguage(*args)
    def SetCharset(*args): return PyIB.RECORD_SetCharset(*args)
    def GetDate(*args): return PyIB.RECORD_GetDate(*args)
    def SetDate(*args): return PyIB.RECORD_SetDate(*args)
    def SetDateModified(*args): return PyIB.RECORD_SetDateModified(*args)
    def GetDateModified(*args): return PyIB.RECORD_GetDateModified(*args)
    def SetDateCreated(*args): return PyIB.RECORD_SetDateCreated(*args)
    def GetDateCreated(*args): return PyIB.RECORD_GetDateCreated(*args)
    def GetPriority(*args): return PyIB.RECORD_GetPriority(*args)
    def SetPriority(*args): return PyIB.RECORD_SetPriority(*args)
    def GetCategory(*args): return PyIB.RECORD_GetCategory(*args)
    def SetCategory(*args): return PyIB.RECORD_SetCategory(*args)
    def __len__(*args): return PyIB.RECORD___len__(*args)
    def SetDateExpires(*args): return PyIB.RECORD_SetDateExpires(*args)
    def GetDateExpires(*args): return PyIB.RECORD_GetDateExpires(*args)
    def TTL(*args): return PyIB.RECORD_TTL(*args)
    __swig_destroy__ = PyIB.delete_RECORD
    __del__ = lambda self : None;
RECORD_swigregister = PyIB.RECORD_swigregister
RECORD_swigregister(RECORD)

class FCACHE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_FCACHE(*args)
        try: self.this.append(this)
        except: self.this = this
    def Ok(*args): return PyIB.FCACHE_Ok(*args)
    def ValidateInField(*args): return PyIB.FCACHE_ValidateInField(*args)
    def GetTotal(*args): return PyIB.FCACHE_GetTotal(*args)
    def SetFieldName(*args): return PyIB.FCACHE_SetFieldName(*args)
    def GetFieldName(*args): return PyIB.FCACHE_GetFieldName(*args)
    __swig_destroy__ = PyIB.delete_FCACHE
    __del__ = lambda self : None;
FCACHE_swigregister = PyIB.FCACHE_swigregister
FCACHE_swigregister(FCACHE)

iNothing = PyIB.iNothing
iOptimize = PyIB.iOptimize
iMerge = PyIB.iMerge
iCollapse = PyIB.iCollapse
iIncremental = PyIB.iIncremental
class IDB(IDBOBJ):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_IDB(*args)
        try: self.this.append(this)
        except: self.this = this
    def Open(*args): return PyIB.IDB_Open(*args)
    def Close(*args): return PyIB.IDB_Close(*args)
    def SetDebugMode(*args): return PyIB.IDB_SetDebugMode(*args)
    def FirstKey(*args): return PyIB.IDB_FirstKey(*args)
    def LastKey(*args): return PyIB.IDB_LastKey(*args)
    def NextKey(*args): return PyIB.IDB_NextKey(*args)
    def PrevKey(*args): return PyIB.IDB_PrevKey(*args)
    def SetVolume(*args): return PyIB.IDB_SetVolume(*args)
    def GetVolume(*args): return PyIB.IDB_GetVolume(*args)
    def SetFindConcatWords(*args): return PyIB.IDB_SetFindConcatWords(*args)
    def GetFindConcatWords(*args): return PyIB.IDB_GetFindConcatWords(*args)
    def SetSegment(*args): return PyIB.IDB_SetSegment(*args)
    def GetSegmentName(*args): return PyIB.IDB_GetSegmentName(*args)
    def Segment(*args): return PyIB.IDB_Segment(*args)
    def setUseRelativePaths(*args): return PyIB.IDB_setUseRelativePaths(*args)
    def SetWorkingDirectory(*args): return PyIB.IDB_SetWorkingDirectory(*args)
    def ClearWorkingDirectoryEntry(*args): return PyIB.IDB_ClearWorkingDirectoryEntry(*args)
    def SetErrorCode(*args): return PyIB.IDB_SetErrorCode(*args)
    def GetErrorCode(*args): return PyIB.IDB_GetErrorCode(*args)
    def ErrorMessage(*args): return PyIB.IDB_ErrorMessage(*args)
    def FieldExists(*args): return PyIB.IDB_FieldExists(*args)
    def GetFieldDefinitionList(*args): return PyIB.IDB_GetFieldDefinitionList(*args)
    def GetDocumentInfo(*args): return PyIB.IDB_GetDocumentInfo(*args)
    def GetAllDocTypes(*args): return PyIB.IDB_GetAllDocTypes(*args)
    def GetMainMdt(*args): return PyIB.IDB_GetMainMdt(*args)
    def DateCreated(*args): return PyIB.IDB_DateCreated(*args)
    def DateLastModified(*args): return PyIB.IDB_DateLastModified(*args)
    def SetCommonWordsThreshold(*args): return PyIB.IDB_SetCommonWordsThreshold(*args)
    def CreateCentroid(*args): return PyIB.IDB_CreateCentroid(*args)
    def SetLocale(*args): return PyIB.IDB_SetLocale(*args)
    def IsDbCompatible(*args): return PyIB.IDB_IsDbCompatible(*args)
    def IsEmpty(*args): return PyIB.IDB_IsEmpty(*args)
    def Ok(*args): return PyIB.IDB_Ok(*args)
    def ffGC(*args): return PyIB.IDB_ffGC(*args)
    def SetMergeStatus(*args): return PyIB.IDB_SetMergeStatus(*args)
    def SetDbState(*args): return PyIB.IDB_SetDbState(*args)
    def GetDbState(*args): return PyIB.IDB_GetDbState(*args)
    def SetIndexBoostFactor(*args): return PyIB.IDB_SetIndexBoostFactor(*args)
    def GetIndexBoostFactor(*args): return PyIB.IDB_GetIndexBoostFactor(*args)
    def SetFreshnessBoostFactor(*args): return PyIB.IDB_SetFreshnessBoostFactor(*args)
    def GetFreshnessBoostFactor(*args): return PyIB.IDB_GetFreshnessBoostFactor(*args)
    def SetLongevityBoostFattor(*args): return PyIB.IDB_SetLongevityBoostFattor(*args)
    def GetLongevityBoostFactor(*args): return PyIB.IDB_GetLongevityBoostFactor(*args)
    def SetFreshnessBaseDateLine(*args): return PyIB.IDB_SetFreshnessBaseDateLine(*args)
    def GetFreshnessBaseDateLine(*args): return PyIB.IDB_GetFreshnessBaseDateLine(*args)
    def SetDefaultDbSearchCutoff(*args): return PyIB.IDB_SetDefaultDbSearchCutoff(*args)
    def SetDbSearchCutoff(*args): return PyIB.IDB_SetDbSearchCutoff(*args)
    def GetDbSearchCutoff(*args): return PyIB.IDB_GetDbSearchCutoff(*args)
    def SetDbSearchFuel(*args): return PyIB.IDB_SetDbSearchFuel(*args)
    def SetDbSearchCacheSize(*args): return PyIB.IDB_SetDbSearchCacheSize(*args)
    def SetDefaultPriorityFactor(*args): return PyIB.IDB_SetDefaultPriorityFactor(*args)
    def SetPriorityFactor(*args): return PyIB.IDB_SetPriorityFactor(*args)
    def GetPriorityFactor(*args): return PyIB.IDB_GetPriorityFactor(*args)
    def SetDbSisLimit(*args): return PyIB.IDB_SetDbSisLimit(*args)
    def SetTitle(*args): return PyIB.IDB_SetTitle(*args)
    def GetTitle(*args): return PyIB.IDB_GetTitle(*args)
    def SetComments(*args): return PyIB.IDB_SetComments(*args)
    def GetComments(*args): return PyIB.IDB_GetComments(*args)
    def SetCopyright(*args): return PyIB.IDB_SetCopyright(*args)
    def GetCopyright(*args): return PyIB.IDB_GetCopyright(*args)
    def SetMaintainer(*args): return PyIB.IDB_SetMaintainer(*args)
    def GetMaintainer(*args): return PyIB.IDB_GetMaintainer(*args)
    def SetGlobalDoctype(*args): return PyIB.IDB_SetGlobalDoctype(*args)
    def SetIndexingMemory(*args): return PyIB.IDB_SetIndexingMemory(*args)
    def GetIndexingMemory(*args): return PyIB.IDB_GetIndexingMemory(*args)
    def SetStoplist(*args): return PyIB.IDB_SetStoplist(*args)
    def SetGlobalStoplist(*args): return PyIB.IDB_SetGlobalStoplist(*args)
    def GetGlobalStoplist(*args): return PyIB.IDB_GetGlobalStoplist(*args)
    def GetTotalWords(*args): return PyIB.IDB_GetTotalWords(*args)
    def GetTotalUniqueWords(*args): return PyIB.IDB_GetTotalUniqueWords(*args)
    def GetTotalRecords(*args): return PyIB.IDB_GetTotalRecords(*args)
    def GetTotalDocumentsDeleted(*args): return PyIB.IDB_GetTotalDocumentsDeleted(*args)
    def GetFieldCache(*args): return PyIB.IDB_GetFieldCache(*args)
    def GetPeerFc(*args): return PyIB.IDB_GetPeerFc(*args)
    def GetFieldName(*args): return PyIB.IDB_GetFieldName(*args)
    def GetPeerNode(*args): return PyIB.IDB_GetPeerNode(*args)
    def GetPeerContent(*args): return PyIB.IDB_GetPeerContent(*args)
    def GetPeerContentXMLFragement(*args): return PyIB.IDB_GetPeerContentXMLFragement(*args)
    def GetNodeTree(*args): return PyIB.IDB_GetNodeTree(*args)
    def KillCache(*args): return PyIB.IDB_KillCache(*args)
    def FillHeadlineCache(*args): return PyIB.IDB_FillHeadlineCache(*args)
    def IsSystemFile(*args): return PyIB.IDB_IsSystemFile(*args)
    def SetServerName(*args): return PyIB.IDB_SetServerName(*args)
    def GetServerName(*args): return PyIB.IDB_GetServerName(*args)
    def MergeIndexFiles(*args): return PyIB.IDB_MergeIndexFiles(*args)
    def CollapseIndexFiles(*args): return PyIB.IDB_CollapseIndexFiles(*args)
    def DeleteExpired(*args): return PyIB.IDB_DeleteExpired(*args)
    def KillAll(*args): return PyIB.IDB_KillAll(*args)
    def GetVersionID(*args): return PyIB.IDB_GetVersionID(*args)
    def ParseRecords(*args): return PyIB.IDB_ParseRecords(*args)
    def Index(*args): return PyIB.IDB_Index(*args)
    def Index1(*args): return PyIB.IDB_Index1(*args)
    def Index2(*args): return PyIB.IDB_Index2(*args)
    def AddRecord(*args): return PyIB.IDB_AddRecord(*args)
    def AppendToIndex(*args): return PyIB.IDB_AppendToIndex(*args)
    def AppendFileToIndex(*args): return PyIB.IDB_AppendFileToIndex(*args)
    def IsStopWord(*args): return PyIB.IDB_IsStopWord(*args)
    def MdtLookupKey(*args): return PyIB.IDB_MdtLookupKey(*args)
    def GetDocumentDeleted(*args): return PyIB.IDB_GetDocumentDeleted(*args)
    def DeleteByIndex(*args): return PyIB.IDB_DeleteByIndex(*args)
    def DeleteByKey(*args): return PyIB.IDB_DeleteByKey(*args)
    def UndeleteByIndex(*args): return PyIB.IDB_UndeleteByIndex(*args)
    def UndeleteByKey(*args): return PyIB.IDB_UndeleteByKey(*args)
    def SetOverride(*args): return PyIB.IDB_SetOverride(*args)
    def GetOverride(*args): return PyIB.IDB_GetOverride(*args)
    def CleanupDb(*args): return PyIB.IDB_CleanupDb(*args)
    def GetLocks(*args): return PyIB.IDB_GetLocks(*args)
    def Scan(*args): return PyIB.IDB_Scan(*args)
    def ScanGlob(*args): return PyIB.IDB_ScanGlob(*args)
    def ScanSearch(*args): return PyIB.IDB_ScanSearch(*args)
    def BeginRsetPresent(*args): return PyIB.IDB_BeginRsetPresent(*args)
    def EndRsetPresent(*args): return PyIB.IDB_EndRsetPresent(*args)
    def BeforeSearching(*args): return PyIB.IDB_BeforeSearching(*args)
    def AfterSearching(*args): return PyIB.IDB_AfterSearching(*args)
    def BeforeIndexing(*args): return PyIB.IDB_BeforeIndexing(*args)
    def AfterIndexing(*args): return PyIB.IDB_AfterIndexing(*args)
    def Search(*args): return PyIB.IDB_Search(*args)
    def SearchSmart(*args): return PyIB.IDB_SearchSmart(*args)
    def VSearch(*args): return PyIB.IDB_VSearch(*args)
    def VSearchSmart(*args): return PyIB.IDB_VSearchSmart(*args)
    def Headline(*args): return PyIB.IDB_Headline(*args)
    def Summary(*args): return PyIB.IDB_Summary(*args)
    def Context(*args): return PyIB.IDB_Context(*args)
    def NthContext(*args): return PyIB.IDB_NthContext(*args)
    def URL(*args): return PyIB.IDB_URL(*args)
    def HighlightedRecord(*args): return PyIB.IDB_HighlightedRecord(*args)
    def DocHighlight(*args): return PyIB.IDB_DocHighlight(*args)
    def GetFieldData(*args): return PyIB.IDB_GetFieldData(*args)
    def GetFieldContents(*args): return PyIB.IDB_GetFieldContents(*args)
    def Present(*args): return PyIB.IDB_Present(*args)
    def DocPresent(*args): return PyIB.IDB_DocPresent(*args)
    def GetXMLHighlightRecordFormat(*args): return PyIB.IDB_GetXMLHighlightRecordFormat(*args)
    def GetNodeOffsetCount(*args): return PyIB.IDB_GetNodeOffsetCount(*args)
    def GetDescendentsFCT(*args): return PyIB.IDB_GetDescendentsFCT(*args)
    def GetAncestorFc(*args): return PyIB.IDB_GetAncestorFc(*args)
    def GetAncestorContent(*args): return PyIB.IDB_GetAncestorContent(*args)
    def GetDescendentsContent(*args): return PyIB.IDB_GetDescendentsContent(*args)
    def KeyLookup(*args): return PyIB.IDB_KeyLookup(*args)
    def KeyExists(*args): return PyIB.IDB_KeyExists(*args)
    def GetFields(*args): return PyIB.IDB_GetFields(*args)
    __swig_destroy__ = PyIB.delete_IDB
    __del__ = lambda self : None;
IDB_swigregister = PyIB.IDB_swigregister
IDB_swigregister(IDB)
cvar = PyIB.cvar
DbStateInvalid = cvar.DbStateInvalid
DbStateReady = cvar.DbStateReady
DbStateBusy = cvar.DbStateBusy

class VIDB(IDBOBJ):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_VIDB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_VIDB
    __del__ = lambda self : None;
    def getself(*args): return PyIB.VIDB_getself(*args)
    def GetIDB(*args): return PyIB.VIDB_GetIDB(*args)
    def GetIDBCount(*args): return PyIB.VIDB_GetIDBCount(*args)
    def IsDbVirtual(*args): return PyIB.VIDB_IsDbVirtual(*args)
    def GetMainMdt(*args): return PyIB.VIDB_GetMainMdt(*args)
    def GetFieldCache(*args): return PyIB.VIDB_GetFieldCache(*args)
    def GetDocTypeOptions(*args): return PyIB.VIDB_GetDocTypeOptions(*args)
    def GetDbFileStem(*args): return PyIB.VIDB_GetDbFileStem(*args)
    def XMLHitTable(*args): return PyIB.VIDB_XMLHitTable(*args)
    def XMLNodeTree(*args): return PyIB.VIDB_XMLNodeTree(*args)
    def SetPriorityFactor(*args): return PyIB.VIDB_SetPriorityFactor(*args)
    def SetDbSearchCutoff(*args): return PyIB.VIDB_SetDbSearchCutoff(*args)
    def GetDbSearchCutoff(*args): return PyIB.VIDB_GetDbSearchCutoff(*args)
    def SetDbSearchFuel(*args): return PyIB.VIDB_SetDbSearchFuel(*args)
    def SetDbSearchCacheSize(*args): return PyIB.VIDB_SetDbSearchCacheSize(*args)
    def BeforeSearching(*args): return PyIB.VIDB_BeforeSearching(*args)
    def SetDebugMode(*args): return PyIB.VIDB_SetDebugMode(*args)
    def GetErrorCode(*args): return PyIB.VIDB_GetErrorCode(*args)
    def ErrorMessage(*args): return PyIB.VIDB_ErrorMessage(*args)
    def GetTotalWords(*args): return PyIB.VIDB_GetTotalWords(*args)
    def GetTotalUniqueWords(*args): return PyIB.VIDB_GetTotalUniqueWords(*args)
    def GetTotalRecords(*args): return PyIB.VIDB_GetTotalRecords(*args)
    def GetTotalDocumentsDeleted(*args): return PyIB.VIDB_GetTotalDocumentsDeleted(*args)
    def GetTotalDatabases(*args): return PyIB.VIDB_GetTotalDatabases(*args)
    def IsDbCompatible(*args): return PyIB.VIDB_IsDbCompatible(*args)
    def IsEmpty(*args): return PyIB.VIDB_IsEmpty(*args)
    def Ok(*args): return PyIB.VIDB_Ok(*args)
    def SetCommonWordsThreshold(*args): return PyIB.VIDB_SetCommonWordsThreshold(*args)
    def SetStoplist(*args): return PyIB.VIDB_SetStoplist(*args)
    def IsStopWord(*args): return PyIB.VIDB_IsStopWord(*args)
    def GetTitle(*args): return PyIB.VIDB_GetTitle(*args)
    def GetComments(*args): return PyIB.VIDB_GetComments(*args)
    def GetMaintainer(*args): return PyIB.VIDB_GetMaintainer(*args)
    def SearchSmart(*args): return PyIB.VIDB_SearchSmart(*args)
    def Search(*args): return PyIB.VIDB_Search(*args)
    def VSearch(*args): return PyIB.VIDB_VSearch(*args)
    def VSearchSmart(*args): return PyIB.VIDB_VSearchSmart(*args)
    def Scan(*args): return PyIB.VIDB_Scan(*args)
    def ScanGlob(*args): return PyIB.VIDB_ScanGlob(*args)
    def ScanSearch(*args): return PyIB.VIDB_ScanSearch(*args)
    def BeginRsetPresent(*args): return PyIB.VIDB_BeginRsetPresent(*args)
    def GetAncestorContent(*args): return PyIB.VIDB_GetAncestorContent(*args)
    def Headline(*args): return PyIB.VIDB_Headline(*args)
    def Summary(*args): return PyIB.VIDB_Summary(*args)
    def Context(*args): return PyIB.VIDB_Context(*args)
    def NthContext(*args): return PyIB.VIDB_NthContext(*args)
    def URL(*args): return PyIB.VIDB_URL(*args)
    def HighlightedRecord(*args): return PyIB.VIDB_HighlightedRecord(*args)
    def DocHighlight(*args): return PyIB.VIDB_DocHighlight(*args)
    def GetFieldData(*args): return PyIB.VIDB_GetFieldData(*args)
    def GetFieldContents(*args): return PyIB.VIDB_GetFieldContents(*args)
    def Present(*args): return PyIB.VIDB_Present(*args)
    def DocPresent(*args): return PyIB.VIDB_DocPresent(*args)
    def EndRsetPresent(*args): return PyIB.VIDB_EndRsetPresent(*args)
    def GetGlobalDocType(*args): return PyIB.VIDB_GetGlobalDocType(*args)
    def KeyLookup(*args): return PyIB.VIDB_KeyLookup(*args)
    def KeyExists(*args): return PyIB.VIDB_KeyExists(*args)
    def SetDateRange(*args): return PyIB.VIDB_SetDateRange(*args)
    def ProfileGetString(*args): return PyIB.VIDB_ProfileGetString(*args)
    def FirstKey(*args): return PyIB.VIDB_FirstKey(*args)
    def LastKey(*args): return PyIB.VIDB_LastKey(*args)
    def NextKey(*args): return PyIB.VIDB_NextKey(*args)
    def PrevKey(*args): return PyIB.VIDB_PrevKey(*args)
    def GetDocumentInfo(*args): return PyIB.VIDB_GetDocumentInfo(*args)
    def DateCreated(*args): return PyIB.VIDB_DateCreated(*args)
    def DateLastModified(*args): return PyIB.VIDB_DateLastModified(*args)
    def GetAllDocTypes(*args): return PyIB.VIDB_GetAllDocTypes(*args)
    def ValidateDocType(*args): return PyIB.VIDB_ValidateDocType(*args)
    def GetVersionID(*args): return PyIB.VIDB_GetVersionID(*args)
    def GetLocks(*args): return PyIB.VIDB_GetLocks(*args)
    def GetFields(*args): return PyIB.VIDB_GetFields(*args)
VIDB_swigregister = PyIB.VIDB_swigregister
VIDB_swigregister(VIDB)

class LANGUAGE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_LANGUAGE(*args)
        try: self.this.append(this)
        except: self.this = this
    def Name(*args): return PyIB.LANGUAGE_Name(*args)
    def Code(*args): return PyIB.LANGUAGE_Code(*args)
    __swig_destroy__ = PyIB.delete_LANGUAGE
    __del__ = lambda self : None;
LANGUAGE_swigregister = PyIB.LANGUAGE_swigregister
LANGUAGE_swigregister(LANGUAGE)

class CHARSET(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_CHARSET(*args)
        try: self.this.append(this)
        except: self.this = this
    def Ok(*args): return PyIB.CHARSET_Ok(*args)
    def Name(*args): return PyIB.CHARSET_Name(*args)
    def HtmlCat(*args): return PyIB.CHARSET_HtmlCat(*args)
    def ToLower(*args): return PyIB.CHARSET_ToLower(*args)
    def ToUpper(*args): return PyIB.CHARSET_ToUpper(*args)
    def ib_isalpha(*args): return PyIB.CHARSET_ib_isalpha(*args)
    def ib_isupper(*args): return PyIB.CHARSET_ib_isupper(*args)
    def ib_islower(*args): return PyIB.CHARSET_ib_islower(*args)
    def ib_isdigit(*args): return PyIB.CHARSET_ib_isdigit(*args)
    def ib_isxdigit(*args): return PyIB.CHARSET_ib_isxdigit(*args)
    def ib_isalnum(*args): return PyIB.CHARSET_ib_isalnum(*args)
    def ib_isspace(*args): return PyIB.CHARSET_ib_isspace(*args)
    def ib_ispunct(*args): return PyIB.CHARSET_ib_ispunct(*args)
    def ib_isprint(*args): return PyIB.CHARSET_ib_isprint(*args)
    def ib_isgraph(*args): return PyIB.CHARSET_ib_isgraph(*args)
    def ib_iscntrl(*args): return PyIB.CHARSET_ib_iscntrl(*args)
    def ib_iswhite(*args): return PyIB.CHARSET_ib_iswhite(*args)
    def ib_isascii(*args): return PyIB.CHARSET_ib_isascii(*args)
    def ib_islatin1(*args): return PyIB.CHARSET_ib_islatin1(*args)
    def ib_toupper(*args): return PyIB.CHARSET_ib_toupper(*args)
    def ib_tolower(*args): return PyIB.CHARSET_ib_tolower(*args)
    def ib_toascii(*args): return PyIB.CHARSET_ib_toascii(*args)
    def isTermChr(*args): return PyIB.CHARSET_isTermChr(*args)
    def isWordSep(*args): return PyIB.CHARSET_isWordSep(*args)
    def isTermWhite(*args): return PyIB.CHARSET_isTermWhite(*args)
    def UCS(*args): return PyIB.CHARSET_UCS(*args)
    __swig_destroy__ = PyIB.delete_CHARSET
    __del__ = lambda self : None;
CHARSET_swigregister = PyIB.CHARSET_swigregister
CHARSET_swigregister(CHARSET)

class LOCALE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_LOCALE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_LOCALE
    __del__ = lambda self : None;
    def SetLanguage(*args): return PyIB.LOCALE_SetLanguage(*args)
    def SetCharset(*args): return PyIB.LOCALE_SetCharset(*args)
    def GetLanguageCode(*args): return PyIB.LOCALE_GetLanguageCode(*args)
    def GetLanguageName(*args): return PyIB.LOCALE_GetLanguageName(*args)
    def GetCharsetCode(*args): return PyIB.LOCALE_GetCharsetCode(*args)
    def GetCharsetName(*args): return PyIB.LOCALE_GetCharsetName(*args)
    def Charset(*args): return PyIB.LOCALE_Charset(*args)
    def Language(*args): return PyIB.LOCALE_Language(*args)
    def Name(*args): return PyIB.LOCALE_Name(*args)
    def Id(*args): return PyIB.LOCALE_Id(*args)
LOCALE_swigregister = PyIB.LOCALE_swigregister
LOCALE_swigregister(LOCALE)

ResolveConfigPath = PyIB.ResolveConfigPath
ResolveBinPath = PyIB.ResolveBinPath
ExpandFileSpec = PyIB.ExpandFileSpec
LOG_PANIC = PyIB.LOG_PANIC
LOG_FATAL = PyIB.LOG_FATAL
LOG_ERROR = PyIB.LOG_ERROR
LOG_ERRNO = PyIB.LOG_ERRNO
LOG_WARN = PyIB.LOG_WARN
LOG_NOTICE = PyIB.LOG_NOTICE
LOG_INFO = PyIB.LOG_INFO
LOG_DEBUG = PyIB.LOG_DEBUG
LOG_ALL = PyIB.LOG_ALL
DEVICE_STDERR = PyIB.DEVICE_STDERR
DEVICE_STDOUT = PyIB.DEVICE_STDOUT
DEVICE_SYSLOG = PyIB.DEVICE_SYSLOG
DEVICE_LOCAL0 = PyIB.DEVICE_LOCAL0
DEVICE_LOCAL1 = PyIB.DEVICE_LOCAL1
DEVICE_LOCAL2 = PyIB.DEVICE_LOCAL2
DEVICE_LOCAL3 = PyIB.DEVICE_LOCAL3
DEVICE_LOCAL4 = PyIB.DEVICE_LOCAL4
DEVICE_LOCAL5 = PyIB.DEVICE_LOCAL5
DEVICE_LOCAL6 = PyIB.DEVICE_LOCAL6
DEVICE_LOCAL7 = PyIB.DEVICE_LOCAL7
set_syslog = PyIB.set_syslog
log_message = PyIB.log_message
class INODE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_INODE(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clear(*args): return PyIB.INODE_Clear(*args)
    def Set(*args): return PyIB.INODE_Set(*args)
    def Key(*args): return PyIB.INODE_Key(*args)
    def isLinked(*args): return PyIB.INODE_isLinked(*args)
    def isDangling(*args): return PyIB.INODE_isDangling(*args)
    def inode(*args): return PyIB.INODE_inode(*args)
    def device(*args): return PyIB.INODE_device(*args)
    __swig_destroy__ = PyIB.delete_INODE
    __del__ = lambda self : None;
INODE_swigregister = PyIB.INODE_swigregister
INODE_swigregister(INODE)
log_init = PyIB.log_init

class __IB(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetFreeMemory(*args): return PyIB.__IB_GetFreeMemory(*args)
    def GetTotalMemory(*args): return PyIB.__IB_GetTotalMemory(*args)
    def Hostid(*args): return PyIB.__IB_Hostid(*args)
    def SerialID(*args): return PyIB.__IB_SerialID(*args)
    def FileGlob(*args): return PyIB.__IB_FileGlob(*args)
    def Glob(*args): return PyIB.__IB_Glob(*args)
    def GetUserHome(*args): return PyIB.__IB_GetUserHome(*args)
    def DirectoryExists(*args): return PyIB.__IB_DirectoryExists(*args)
    def FileExists(*args): return PyIB.__IB_FileExists(*args)
    def ExeExists(*args): return PyIB.__IB_ExeExists(*args)
    def FileLink(*args): return PyIB.__IB_FileLink(*args)
    def SendDebugMessage(*args): return PyIB.__IB_SendDebugMessage(*args)
    def SendInfoMessage(*args): return PyIB.__IB_SendInfoMessage(*args)
    def SendNoticeMessage(*args): return PyIB.__IB_SendNoticeMessage(*args)
    def SendWarningMessage(*args): return PyIB.__IB_SendWarningMessage(*args)
    def SendErrorMessage(*args): return PyIB.__IB_SendErrorMessage(*args)
    def SendErrnoMessage(*args): return PyIB.__IB_SendErrnoMessage(*args)
    def SendFatalMessage(*args): return PyIB.__IB_SendFatalMessage(*args)
    def SendPanicMessage(*args): return PyIB.__IB_SendPanicMessage(*args)
    def __init__(self, *args): 
        this = PyIB.new___IB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete___IB
    __del__ = lambda self : None;
__IB_swigregister = PyIB.__IB_swigregister
__IB_swigregister(__IB)



