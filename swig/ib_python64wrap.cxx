/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.21
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};                                                    
#endif


#include "Python.h"

/*************************************************************** -*- c -*-
 * python/precommon.swg
 *
 * Rename all exported symbols from common.swg, to avoid symbol
 * clashes if multiple interpreters are included
 *
 ************************************************************************/

#define SWIG_TypeRegister    SWIG_Python_TypeRegister
#define SWIG_TypeCheck       SWIG_Python_TypeCheck
#define SWIG_TypeCast        SWIG_Python_TypeCast
#define SWIG_TypeDynamicCast SWIG_Python_TypeDynamicCast
#define SWIG_TypeName        SWIG_Python_TypeName
#define SWIG_TypeQuery       SWIG_Python_TypeQuery
#define SWIG_TypeClientData  SWIG_Python_TypeClientData
#define SWIG_PackData        SWIG_Python_PackData 
#define SWIG_UnpackData      SWIG_Python_UnpackData 


/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  if defined(_MSC_VER) || defined(__GNUC__)
#    if defined(STATIC_LINKED)
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) extern a
#    else
#      define SWIGEXPORT(a) __declspec(dllexport) a
#      define SWIGIMPORT(a) extern a
#    endif
#  else
#    if defined(__BORLANDC__)
#      define SWIGEXPORT(a) a _export
#      define SWIGIMPORT(a) a _export
#    else
#      define SWIGEXPORT(a) a
#      define SWIGIMPORT(a) a
#    endif
#  endif
#else
#  define SWIGEXPORT(a) a
#  define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#  define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#  define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);
SWIGIMPORT(char *)           SWIG_PackData(char *, void *, int);
SWIGIMPORT(char *)           SWIG_UnpackData(char *, void *, int);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti) {
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
  l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty) {
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
        s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) {
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
        if ((strcmp(tc->name, equiv->name) == 0))
          SWIG_TypeClientData(tc,clientdata);
        tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

#endif

#ifdef __cplusplus
}
#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags) \
  SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags) \
  SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags) \
  SWIG_Python_MustGetPtr(p, type, argnum, flags)

/* Python-specific SWIG API */
#define SWIG_newvarlink() \
  SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr) \
  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags) \
  SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type) \
  SWIG_Python_NewPackedObj(ptr, sz, type)
#define SWIG_InstallConstants(d, constants) \
  SWIG_Python_InstallConstants(d, constants)

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(int)               SWIG_Python_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPointerObj(void *, swig_type_info *,int own);
SWIGIMPORT(void *)            SWIG_Python_MustGetPtr(PyObject *, swig_type_info *, int, int);
SWIGIMPORT(PyObject *)        SWIG_Python_newvarlink(void);
SWIGIMPORT(void)              SWIG_Python_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGIMPORT(int)               SWIG_Python_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGIMPORT(PyObject *)        SWIG_Python_NewPackedObj(void *, int sz, swig_type_info *);
SWIGIMPORT(void)              SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",              /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_Python_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject *zero = PyInt_FromLong(0);
    PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
    Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME(void *)
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  SWIG_Python_ConvertPtr(obj, &result, ty, flags | SWIG_POINTER_EXCEPTION);
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c = 0;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty && c) {
      char *temp = (char *) malloc(64+strlen(ty->name)+strlen(c));
      sprintf(temp,"Type error. Got %s, expected %s", c, ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject *n = PyInt_FromLong(1);
        PyObject_SetAttrString(inst,(char*)"thisown",n);
        Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_Python_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

/* Contract support */

#define SWIG_contract_assert(expr, msg) if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_SCANLIST swig_types[0] 
#define  SWIGTYPE_p_SRCH_DATE swig_types[1] 
#define  SWIGTYPE_p_MDTREC swig_types[2] 
#define  SWIGTYPE_p_FCACHE swig_types[3] 
#define  SWIGTYPE_p_INFIX2RPN swig_types[4] 
#define  SWIGTYPE_p_NODETREE swig_types[5] 
#define  SWIGTYPE_p_STRING swig_types[6] 
#define  SWIGTYPE_p_ArraySTRING swig_types[7] 
#define  SWIGTYPE_p_LANGUAGE swig_types[8] 
#define  SWIGTYPE_p_DATERANGE swig_types[9] 
#define  SWIGTYPE_p_IDBOBJ swig_types[10] 
#define  SWIGTYPE_p_RECORD swig_types[11] 
#define  SWIGTYPE_p_RSET swig_types[12] 
#define  SWIGTYPE_p_LOCALE swig_types[13] 
#define  SWIGTYPE_p___IB swig_types[14] 
#define  SWIGTYPE_p_INDEX_ID swig_types[15] 
#define  SWIGTYPE_p_RESULT swig_types[16] 
#define  SWIGTYPE_p_CHARSET swig_types[17] 
#define  SWIGTYPE_p_IDBC swig_types[18] 
#define  SWIGTYPE_p_SQUERY swig_types[19] 
#define  SWIGTYPE_p_TREENODELIST swig_types[20] 
#define  SWIGTYPE_p_IDB swig_types[21] 
#define  SWIGTYPE_p_SIZE_T swig_types[22] 
#define  SWIGTYPE_p_DOC_ID swig_types[23] 
#define  SWIGTYPE_p_VIDB swig_types[24] 
#define  SWIGTYPE_p_GDT_BOOLEAN swig_types[25] 
#define  SWIGTYPE_p_INT swig_types[26] 
#define  SWIGTYPE_p_TREENODE swig_types[27] 
#define  SWIGTYPE_p_MDT swig_types[28] 
#define  SWIGTYPE_p_SCANOBJ swig_types[29] 
#define  SWIGTYPE_p_STRLIST swig_types[30] 
#define  SWIGTYPE_p_unsigned_long_long swig_types[31] 
#define  SWIGTYPE_p_IRSET swig_types[32] 
#define  SWIGTYPE_p_FC swig_types[33] 
#define  SWIGTYPE_p_DOCTYPE_ID swig_types[34] 
static swig_type_info *swig_types[36];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _IB64.so
  ------------------------------------------------*/
#define SWIG_init    init_IB64

#define SWIG_name    "_IB64"

#pragma ident  "%Z%%Y%%M%  %I% %G% %U% BSN"

//static const long timeout = 979891200; // Expires Fri Jan 19 09:00:00 2001

static const int DebugFlag = 0;


#include "../src/common.hxx"
#include "../src/vidb.hxx"
#include "../src/rset.hxx"
#include "../src/irset.hxx"
#include "../src/log.hxx"
#include "../src/infix2rpn.hxx"

//// Use cached IRSETs..
//#undef IRSET
//#undef PIRSET
//#define IRSET  _IRSET
//#define PIRSET P_IRSET
///


#ifdef SWIGPYTHON
#include "callbacks.hxx"
#endif

// #ifdef SWIGPYTHON
// #include "pyglue.cxx"
// #endif

static const ArraySTRING NulArraySTRING;

static const char rFileErrorMsg[] = "file type is required for read parameter";
static const char wFileErrorMsg[] = "file type is required for write parameter";
static const char keyErrorMsg[]   = "key not available";

#ifdef SWIGPYTHON

#define myWrite(f) { \
  FILE *fp = NULL; \
  if (PyString_Check(f)) { \
    if ((fp = fopen( PyString_AsString(f), "a+")) != NULL) \
      f = NULL; \
  } else if (f == NULL || f == Py_None || !PyFile_Check(f)) { \
    PyErr_SetString(PyExc_TypeError, wFileErrorMsg); \
    return NULL; \
  } else fp = PyFile_AsFile(f); \
  GDT_BOOLEAN result = GDT_TRUE; \
  if (fp) self->Write(fp); \
  else result = GDT_FALSE; \
  if (f == NULL) fclose(fp); \
  return Py_BuildValue("i", (int)result); \
}

#define myRead(f) { \
  FILE *fp = NULL; \
  if (PyString_Check(f)) { \
    if ((fp = fopen( PyString_AsString(f), "rb")) != NULL) { \
      f = NULL; \
    } \
  } else if (f == NULL || f == Py_None || !PyFile_Check(f)) { \
    PyErr_SetString(PyExc_TypeError, rFileErrorMsg); \
    return NULL; \
  } else fp = PyFile_AsFile(f); \
  GDT_BOOLEAN result = fp ? self->Read(fp) : GDT_FALSE; \
  if (f == NULL) fclose(fp); \
  return Py_BuildValue("i", (int)result); \
}
#endif

class IDBC:public IDB {
public:
 IDBC (const char *DBname, const ArraySTRING NewDocTypeOptions = NulArraySTRING):
	IDB (DBname, STRLIST(NewDocTypeOptions))
    {
      init();
    }
  IDBC (const char *DBname, const STRLIST NewDocTypeOptions = NulStrlist):
	IDB (DBname, NewDocTypeOptions)
    {
      init();
    }

  void AddRecord (const RECORD& Record) {
     IDB::AddRecord (Record);
  }

  void AddRecord (const STRING& fn) {
     RECORD Record (fn);
     Record.SetDocumentType (def_doctype);
     IDB::AddRecord (Record);
  }


protected:
  void IndexingStatus (const t_IndexingStatus StatusMessage, const STRING& FileName, const long arg) const
  {
    switch (StatusMessage)
      {
	case IndexingStatusReading:
	  logf (LOG_NOTICE, "Reading files...");
	  break;
        case IndexingStatusParsingFiles:
	  logf (LOG_NOTICE, "Parsing files ...");
	  break;
	case IndexingStatusParsingDocument:
	  logf (LOG_NOTICE, "Parsing %s ...", FileName.c_str());
	  break;
	case IndexingStatusIndexing:
	  logf (LOG_NOTICE, "Indexing %ul words ...", arg);
	  break;
	case IndexingStatusFlushing:
	  logf (LOG_NOTICE, "Writing index ...");
	  break;
	case IndexingStatusMerging:
	  logf (LOG_NOTICE, "Merging index (%ul indices)...", arg);
	  break;
      } ;
  } ;
private:
  void     init() {
    log_init(LOG_PANIC|LOG_FATAL|LOG_ERROR|LOG_ERRNO|LOG_NOTICE);
    SetMergeStatus(iOptimize);
    def_doctype.Set ("AUTODETECT");
  }
  DOCTYPE_ID   def_doctype;
};

#ifdef SWIGPYTHON

PyObject* PyIB_dict;

#if 0

PyObject* PyIBConstructObject(void* ptr, char* className)
{
    char            buff[64];  // should always be big enough...
    char            swigptr[64];
    _swig_type_info ty;

    ty.name = buff;

    sprintf(buff, "_%s_p", className);
    SWIG_MakePtr(swigptr, ptr, &ty);

    sprintf(buff, "%sPtr", className);
    PyObject* classobj = PyDict_GetItemString(PyIB_dict, buff);
    if (! classobj) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    PyObject* arg = Py_BuildValue("(s)", swigptr);
    PyObject* obj = PyInstance_New(classobj, arg, NULL);
    Py_DECREF(arg);

    return obj;
}
#endif /* SWIGPYTHON */

PyIBCallbackHelper::PyIBCallbackHelper() {
    m_self = NULL;
    m_lastFound = NULL;
}


PyIBCallbackHelper::~PyIBCallbackHelper() {
#ifdef WXP_WITH_THREAD
    PyEval_RestoreThread(PyIBEventThreadState);
#endif

    Py_XDECREF(m_self);

#ifdef WXP_WITH_THREAD
    PyEval_SaveThread();
#endif
}

void PyIBCallbackHelper::setSelf(PyObject* self) {
    m_self = self;
    Py_INCREF(m_self);
}



GDT_BOOLEAN PyIBCallbackHelper::findCallback(const char * name) {
    m_lastFound = NULL;
    if (m_self && PyObject_HasAttrString(m_self, (char *)name))
        m_lastFound = PyObject_GetAttrString(m_self, (char *)name);
    return m_lastFound != NULL;
}


int PyIBCallbackHelper::callCallback(PyObject* argTuple) {
    PyObject*   result;
    int         retval = GDT_FALSE;

    result = callCallbackObj(argTuple);
    if (result) {                       // Assumes an integer return type...
        retval = PyInt_AsLong(result);
        Py_DECREF(result);
        PyErr_Clear();                  // forget about it if it's not...
    }
#ifdef WXP_WITH_THREAD
    PyEval_SaveThread();
#endif
    return retval;
}

// Invoke the Python callable object, returning the raw PyObject return
// value.  Caller should DECREF the return value and also call PyEval_SaveThread.
PyObject* PyIBCallbackHelper::callCallbackObj(PyObject* argTuple) {
#ifdef WXP_WITH_THREAD
    PyEval_RestoreThread(PyIBEventThreadState);
#endif
    PyObject*   result;

    result = PyEval_CallObject(m_lastFound, argTuple);
    Py_DECREF(argTuple);
    if (!result) {
        PyErr_Print();
    }
    return result;
}
#endif

//----------------------------------------------------------------------








#ifdef SWIGPYTHON
//--------------- Python Helper Functions --------------------------------------

extern int*    int_LIST_helper(PyObject* source);
extern long*   long_LIST_helper(PyObject* source);
extern char**  string_LIST_helper(PyObject* source);
extern STRING* STRING_LIST_helper(PyObject* source);


extern ArraySTRING* ArraySTRING_FromPyList(PyObject *source);
extern STRINGS*  STRINGS_FromPyList(PyObject* source);
extern STRLIST*  STRLIST_FromPyList(PyObject* source);

extern PyObject* PyList_FromArraySTRING(const ArraySTRING& List);
extern PyObject* PyList_FromArraySTRING(const ArraySTRING *List);
extern PyObject* PyList_FromSTRLIST(const STRLIST& List);
extern PyObject* PyList_FromSTRLIST(const STRLIST* ListPtr);
extern PyObject* PyList_FromFCT(const FCT list);
extern PyObject* PyList_FromFCT(const FCT *Fct);
#endif /* SWIGPYTHON */



static char* StringErrorMsg = "string type is required for parameter";


#ifndef bool
# define bool GDT_BOOLEAN
#endif


//--------------- Helper Functions --------------------------------------

static const char err_nomem[] = "Unable to allocate temporary array";
static const char err_not_a_list[] = "Expected a list object."; 

//----------------------------------------------------------------------
//----------------------------------------------------------------------
// Some helper functions for typemaps in my_typemaps.i
//

static inline PyObject *FCasTuple(const FC& Fc)
{
  PyObject* rv = PyTuple_New(2);
  PyTuple_SetItem(rv, 0, PyInt_FromLong(Fc.GetFieldStart()));
  PyTuple_SetItem(rv, 1, PyInt_FromLong(Fc.GetFieldEnd()));
  return rv;
}


PyObject* PyList_FromFCT(const FCT Fct)
{
  PyObject     *listPtr = PyList_New ( Fct.GetTotalEntries() );
  const FCLIST *fclist  = Fct.GetPtrFCLIST();
  int i = 0;
  for (const FCLIST *p = fclist->Next(); p != fclist; p = p->Next())
    PyList_SetItem(listPtr, i++,  FCasTuple(p->Value()) );
  return listPtr;
}

PyObject* PyList_FromFCT(const FCT *Fct)
{
  if (Fct)
    {
      PyObject     *listPtr = PyList_New ( Fct->GetTotalEntries() );
      const FCLIST *fclist  = Fct->GetPtrFCLIST();
      int i = 0;
      for (const FCLIST *p = fclist->Next(); p != fclist; p = p->Next())
	PyList_SetItem(listPtr, i++,  FCasTuple(p->Value()) );
      return listPtr;
    }
  PyErr_SetString(PyExc_TypeError, "Null pointer. Expected an FCT pointer.");
  return NULL;
}

PyObject * PyList_FromArraySTRING(const ArraySTRING& array)
{
  const size_t  count = array.Count();
  PyObject *listPtr = PyList_New ( count );
  for (size_t i=0; i < count; i++)
    PyList_SetItem(listPtr, i, PyString_FromString(array[i].c_str()) );
  return listPtr;
}

PyObject * PyList_FromArraySTRING(const ArraySTRING *array)
{
  if (array)
    {
      const size_t  count = array->Count();
      PyObject *listPtr = PyList_New ( count );
      for (size_t i=0; i < count; i++)
	PyList_SetItem(listPtr, i, PyString_FromString((*array)[i].c_str()) );
      return listPtr;
    }
  PyErr_SetString(PyExc_TypeError, "Null pointer. Expected an ArraySTRING pointer.");
  return NULL;
}


PyObject * PyList_FromSTRLIST(const STRLIST& List)
{
  return PyList_FromSTRLIST(&List);
}

PyObject * PyList_FromSTRLIST(const STRLIST *List)
{
  const size_t  count = List ? List->GetTotalEntries() : 0;
  PyObject *listPtr = PyList_New ( count );
  int i = 0;
  for (const STRLIST *p = List->Next(); p != List; p = p->Next())
    {
       PyList_SetItem(listPtr, i++, PyString_FromString(STRINGCAST(p->Value()).c_str()) );
    }
  return listPtr;
}


int* int_LIST_helper(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
        return NULL;
    }
    int count = PyList_Size(source);
    int* temp = new int[count];
    if (! temp) {
        PyErr_SetString(PyExc_MemoryError, err_nomem);
        return NULL;
    }
    for (int x=0; x<count; x++) {
        PyObject* o = PyList_GetItem(source, x);
        if (! PyInt_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of integers.");
            return NULL;
        }
        temp[x] = PyInt_AsLong(o);
    }
    return temp;
}


long* long_LIST_helper(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
        return NULL;
    }
    int count = PyList_Size(source);
    long* temp = new long[count];
    if (! temp) {
        PyErr_SetString(PyExc_MemoryError, err_nomem);
        return NULL;
    }
    for (int x=0; x<count; x++) {
        PyObject* o = PyList_GetItem(source, x);
        if (! PyInt_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of long integers.");
            return NULL;
        }
        temp[x] = PyInt_AsLong(o);
    }
    return temp;
}


char** string_LIST_helper(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
        return NULL;
    }
    int count = PyList_Size(source);
    char** temp = new char*[count+1];
    if (! temp) {
        PyErr_SetString(PyExc_MemoryError, err_nomem);
        return NULL;
    }
    for (int x=0; x<count; x++) {
        PyObject* o = PyList_GetItem(source, x);
        if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of C-strings.");
            return NULL;
        }
        temp[x] = PyString_AsString(o);
    }
    temp[count] = (char *)NULL;
    return temp;
}


STRING* STRING_LIST_helper(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
        return NULL;
    }
    int count = PyList_Size(source);
    STRING* temp = new STRING[count+1];
    if (! temp) {
        PyErr_SetString(PyExc_MemoryError, err_nomem);
        return NULL;
    }
    int j = 0;
    for (int x=0; x<count; x++) {
	char *ptr;
        PyObject* o = PyList_GetItem(source, x);
        if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of C-strings.");
            return NULL;
        }
	if ((ptr = PyString_AsString(o)) != NULL && *ptr)
	  temp[j++] = ptr; 
    }
    temp[j] = NulString;
    return temp;
}




STRINGS *STRINGS_FromPyList(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
    } else {
	STRINGS *temp = new STRINGS();
	const int count = PyList_Size(source);
	for (int x=0; x<count; x++) {
	  PyObject* o = PyList_GetItem(source, x);
	  if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of strings.");
	    delete temp;
            return NULL;
          }
          temp->AddEntry(  PyString_AsString(o) );
        }
	return temp;
    }
    return NULL;
}


ArraySTRING *ArraySTRING_FromPyList(PyObject* source) {
    if (!PyList_Check(source))
      {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
      }
    else
      {
	const int count = PyList_Size(source);
        ArraySTRING *temp = new ArraySTRING(count);
        for (int x=0; x<count; x++) {
          PyObject* o = PyList_GetItem(source, x);
          if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of strings.");
            delete temp;
            return NULL;
          }
          temp->Add(  PyString_AsString(o) );
        }
        return temp;
      }
    return NULL;
}


STRLIST *STRLIST_FromPyList(PyObject* source) {
    if (!PyList_Check(source))
      {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
      }
    else
      {
	STRLIST *temp = new STRLIST();
        const int count = PyList_Size(source);
        for (int x=0; x<count; x++) {
          PyObject* o = PyList_GetItem(source, x);
          if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of strings.");
            delete temp;
	    return NULL;
          }
          temp->AddEntry(  PyString_AsString(o) );
        }
	return temp;
      }
    return NULL;
}


STRING ArraySTRING___getitem__(ArraySTRING *self,int i){
	return self->GetEntry(i+1);
  }
ArraySTRING &ArraySTRING_getself(ArraySTRING *self){ return *self; }
PyObject *ArraySTRING_asTuple(ArraySTRING *self){
	unsigned  count = self->Count();
        PyObject* rv = PyTuple_New(count);
	for (int i=0; i< count; i++)
	  PyTuple_SetItem(rv, i,  PyString_FromString(self->Item(i))); 
        return rv;
    }
STRING ArraySTRING_Join(ArraySTRING *self,char const *seperator){
      STRING result;
      char quotes = '"';
      if (seperator == NULL) seperator = ",";
      else if (strchr(seperator, '"')) quotes = '\'';
      else if (strchr(seperator, '\'')) quotes = '"';
      // Make sure its OK..
      if (strchr(seperator, quotes)) quotes = '\0'; // Nope

      const unsigned  count = self->Count();
      for (unsigned i=0; i< count; i++)
	{
	  // Add seperator
	  if (i) result.Cat(seperator);
	  GDT_BOOLEAN quote = self->Item(i).Search(seperator);
	  // Open quote
	  if (quote && quotes) result.Cat(quotes);
	  // Item
	  result.Cat (self->Item(i));
	  // Close quote
	  if (quote && quotes) result.Cat(quotes);
	}
      return result;
    }
void INDEX_ID_SetIndex(INDEX_ID *self,long index){ *self = index; }
PyObject *FC_Write(FC *self,PyObject *f){ myWrite(f);}
PyObject *FC_Read(FC *self,PyObject *f){ myRead(f); }
PyObject *FC_asTuple(FC *self){
	PyObject* rv = PyTuple_New(2);
	PyTuple_SetItem(rv, 0, PyInt_FromLong(self->GetFieldStart()));
	PyTuple_SetItem(rv, 1, PyInt_FromLong(self->GetFieldEnd()));
	return rv;
    }
PyObject *RESULT_Write(RESULT *self,PyObject *f){ myWrite(f); }
PyObject *RESULT_Read(RESULT *self,PyObject *f){ myRead(f);  }
IRSET &IRSET_getself(IRSET *self){ return *self; }
PyObject *IRSET_Write(IRSET *self,PyObject *f){ myWrite(f); }
PyObject *IRSET_Read(IRSET *self,PyObject *f){ myRead(f);  }
RSET &RSET_getself(RSET *self){ return *self; }
PyObject *RSET_Write(RSET *self,PyObject *f){ myWrite(f); }
PyObject *RSET_Read(RSET *self,PyObject *f){ myRead(f);  }
RESULT RSET___getitem__(RSET *self,int i){ return self->GetEntry(i+1); }
PyObject *SQUERY_Write(SQUERY *self,PyObject *f){ myWrite(f); }
PyObject *SQUERY_Read(SQUERY *self,PyObject *f){ myRead(f);  }
PyObject *SRCH_DATE_Write(SRCH_DATE *self,PyObject *f){ myWrite(f); }
PyObject *SRCH_DATE_Read(SRCH_DATE *self,PyObject *f){ myRead(f);  }
STRING SRCH_DATE___repr__(SRCH_DATE *self){ return self->RFCdate(); }
STRING SRCH_DATE_Strftime(SRCH_DATE *self,char const *format){
      STRING result;
      if (!self->Strftime(format, &result))
        result.form("*** Error, bad Strftime format: %s", format);
      return result;
    }
int SRCH_DATE___cmp__(SRCH_DATE *self,SRCH_DATE const Other){
	return Compare(*self, Other);
    }
STRING DATERANGE_ISO(DATERANGE *self){ return (STRING)(*self); }
STRING DATERANGE_RFC(DATERANGE *self){
      STRING from, to;
      if (self->RFC(&from, &to))
	return STRING().form("%s To %s", from.c_str(), to.c_str());
      return NulString;
    }
STRING DATERANGE_Strftime(DATERANGE *self,char const *fmt,char const *sep){
      STRING from, to;
      if (sep == NULL || *sep == '\0') sep = "-";
      if (fmt && self->Strftime(fmt, &from, &to))
        return STRING().form("%s%s%s", from.c_str(), sep, to.c_str());
      return NulString;
    }
PyObject *DATERANGE_Write(DATERANGE *self,PyObject *f){ myWrite(f); }
PyObject *DATERANGE_Read(DATERANGE *self,PyObject *f){ myRead(f);  }
PyObject *DATERANGE_asTuple(DATERANGE *self){
        PyObject* rv = PyTuple_New(2);
        PyTuple_SetItem(rv, 0,  PyString_FromString(self->GetStart().ISOdate()) );
        PyTuple_SetItem(rv, 1,  PyString_FromString(self->GetEnd().ISOdate()) );
        return rv;
    }
double DATERANGE_Duration(DATERANGE *self){
	return self->Ok() ? self->GetEnd().GetValue() - self->GetStart().GetValue() : 0.0;
    }
PyObject *SCANOBJ_asTuple(SCANOBJ *self){
        PyObject* rv = PyTuple_New(2);
        PyTuple_SetItem(rv, 0,  PyString_FromString(self->Term()) );
        PyTuple_SetItem(rv, 1,  PyInt_FromLong(self->Frequency()) );
        return rv;
    }
PyObject *SCANLIST_Get(SCANLIST *self){
        PyObject *listPtr = PyList_New ( self->GetTotalEntries() );
        int i = 0;
        const atomicSCANLIST *List = self->GetPtratomicSCANLIST() ;
        for (const atomicSCANLIST *p = List->Next(); p != List; p = p->Next())
          PyList_SetItem(listPtr, i++,  SCANOBJ_asTuple( &(p->Value())) );
        return listPtr;
    }
PyObject *SCANLIST___getitem__(SCANLIST *self,int i){
       return SCANOBJ_asTuple( &(self->GetEntry(i+1)));
    }
int RECORD___len__(RECORD *self){
       return self->GetRecordEnd() - self->GetRecordStart();
    }
void IDB_SetDbState(IDB const *self,int DbState){
    enum DbState State = (enum DbState)DbState;
    self->SetDbState(State) ;
  }
bool IDB_AppendToIndex(IDB *self,RECORD const Record){
      self->AddRecord(Record);
      return self->Index(0);
    }
bool IDB_AppendFileToIndex(IDB *self,char const *Filename){
      static DOCTYPE_ID DefaultDoctype ("AUTODETECT");
      RECORD Record (Filename);
      Record.SetDocumentType(DefaultDoctype);
      self->AddRecord(Record);
      return self->Index(0);
    }
PyObject *IDB_GetFieldData(IDB *self,RESULT const *ResultPtr,char const *ESet){
      STRLIST Strlist;
      if (ResultPtr &&
        self->GetFieldData (*ResultPtr, ESet, &Strlist, self->GetDocTypePtr ( ResultPtr->GetDocumentType ())) )
        {
          return PyList_FromSTRLIST(Strlist);
        }
      return  PyList_New (0); // Zero list
    }
PyObject *IDB_GetFieldContents(IDB *self,RESULT const *ResultPtr,char const *ESet){
      STRLIST Strlist;
      if (ResultPtr && self->GetFieldData (*ResultPtr, ESet, &Strlist))
        {
          return PyList_FromSTRLIST(Strlist);
        }
      return  PyList_New (0); // Zero list
    }
RESULT *IDB_KeyLookup(IDB *self,char const *Key){
    RESULT *result = new RESULT();
    if (self->KeyLookup(Key, result) == 0) {
      delete result;

      PyErr_SetString(PyExc_TypeError,  keyErrorMsg);

      return NULL;
    }
    return result;
   }
ArraySTRING IDB_GetFields(IDB *self,RESULT const *result){
    DFDT            Dfdt;
    DFD             Dfd;
    ArraySTRING     list;

    if (result) {
       self->GetRecordDfdt (*result, &Dfdt);
    } else {
      self->GetDfdt(&Dfdt);
    }
    const size_t    total = Dfdt.GetTotalEntries();
    ArraySTRING     List(total);
    for (int i=0; i < total; i++) {
      Dfdt.GetEntry(i+1, &Dfd);
      list.Add ( Dfd.GetFieldName());
    }
    return list;
  }
VIDB &VIDB_getself(VIDB *self){ return *self; }
IDB *VIDB_GetIDB(VIDB *self,unsigned int idx){ return (IDB *)self->GetIDB(idx); }
PyObject *VIDB_GetDocTypeOptions(VIDB *self){
    return PyList_FromSTRLIST( self->GetDocTypeOptions() );
   }
PyObject *VIDB_GetFieldData(VIDB *self,RESULT const *ResultPtr,char const *ESet){
      STRLIST Strlist;
      if (ResultPtr && 
        self->GetFieldData (*ResultPtr, ESet, &Strlist, self->GetDocTypePtr ( ResultPtr->GetDocumentType ())) )
        {
          return PyList_FromSTRLIST(Strlist);
        } 
      return  PyList_New (0); // Zero list
    }
PyObject *VIDB_GetFieldContents(VIDB *self,RESULT const *ResultPtr,char const *ESet){
      STRLIST Strlist;
      if (ResultPtr && self->GetFieldData (*ResultPtr, ESet, &Strlist))
	{
	  return PyList_FromSTRLIST(Strlist);
	}
      return  PyList_New (0); // Zero list
    }
RESULT *VIDB_KeyLookup(VIDB *self,char const *Key){
      RESULT *result = new RESULT();
      if (self->KeyLookup(Key, result) == 0)
	{
	  delete result;

	  PyErr_SetString(PyExc_TypeError,  keyErrorMsg);

	  return NULL;
	}
      return result;
    }
PyObject *VIDB_GetAllDocTypes(VIDB *self){
    return PyList_FromSTRLIST( self->GetAllDocTypes() );
  }
PyObject *VIDB_GetFields(VIDB *self,RESULT const *result){
    DFDT            Dfdt;
    DFD             Dfd;

    if (result) {
       self->GetRecordDfdt (*result, &Dfdt);
    } else
      self->GetDfdt(&Dfdt);
    const int       total = Dfdt.GetTotalEntries();
    PyObject *listPtr = PyList_New ( total );
    for (int i=0; i < total; i++) {
      Dfdt.GetEntry(i+1, &Dfd);
      PyList_SetItem(listPtr, i, PyString_FromString(STRINGCAST(Dfd.GetFieldName())));
    }
    return listPtr;
  }
char const *CHARSET_Name(CHARSET const *self){
      return (const char *)self;
    }
int CHARSET_UCS(CHARSET *self,char Ch){ return self->UCS((UCHR)Ch); }
STRING LOCALE_Name(LOCALE const *self){
      return self->LocaleName();
    }


class __IB {
 public:
  long GetFreeMemory()  { return ::_IB_GetFreeMemory();  }
  long GetTotalMemory() { return ::_IB_GetTotalMemory(); }
  long Hostid()         { return ::_IB_Hostid();         }
  long SerialID()       { return ::_IB_SerialID();       }

  void SendDebugMessage(const char *msg)   { logf(LOG_DEBUG, msg); }
  void SendInfoMessage(const char *msg)    { logf(LOG_INFO, msg);  }
  void SendNoticeMessage(const char *msg)  { logf(LOG_NOTICE, msg);}
  void SendWarningMessage(const char *msg) { logf(LOG_WARN, msg);  }
  void SendErrorMessage(const char *msg)   { logf(LOG_ERROR, msg); }
  void SendErrnoMessage(const char *msg)   { logf(LOG_ERRNO, msg); }
  void SendFatalMessage(const char *msg)   { logf(LOG_FATAL, msg); }
  void SendPanicMessage(const char *msg)   { logf(LOG_PANIC, msg); }

};

#ifdef __cplusplus
extern "C" {
#endif

#ident "%Z%%Y%IB  %I% %G% %U% BSN"

static PyObject *_wrap_new_ArraySTRING__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_ArraySTRING")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (ArraySTRING *)new ArraySTRING();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ArraySTRING, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ArraySTRING__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    ArraySTRING *result;
    
    if(!PyArg_ParseTuple(args,(char *)"i:new_ArraySTRING",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (ArraySTRING *)new ArraySTRING(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ArraySTRING, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ArraySTRING__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING arg1 ;
    ArraySTRING *result;
    ArraySTRING *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ArraySTRING",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (ArraySTRING *)new ArraySTRING(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ArraySTRING, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ArraySTRING__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    STRLIST arg1 ;
    ArraySTRING *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_ArraySTRING",&obj0)) goto fail;
    {
        STRLIST *l =  STRLIST_FromPyList(obj0);
        if (l == NULL) arg1 = NulStrlist;
        else arg1 =  *l;
        
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (ArraySTRING *)new ArraySTRING(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ArraySTRING, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ArraySTRING(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_ArraySTRING__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_ArraySTRING, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_ArraySTRING__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_STRLIST, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_ArraySTRING__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_ArraySTRING__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_ArraySTRING'");
    return NULL;
}


static PyObject *_wrap_delete_ArraySTRING(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ArraySTRING",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Empty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ArraySTRING_Empty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Empty();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ArraySTRING_Clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Clear();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Count(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ArraySTRING_Count",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((ArraySTRING const *)arg1)->Count();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_IsEmpty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ArraySTRING_IsEmpty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsEmpty();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Item(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    unsigned int arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ArraySTRING_Item",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((ArraySTRING const *)arg1)->Item(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_GetEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    unsigned int arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ArraySTRING_GetEntry",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((ArraySTRING const *)arg1)->GetEntry(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    int arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:ArraySTRING___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ArraySTRING___getitem__(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_SetEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    unsigned int arg2 ;
    char *arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:ArraySTRING_SetEntry",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetEntry(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:ArraySTRING_Add",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Add((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Insert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    char *arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:ArraySTRING_Insert",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Insert((char const *)arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Replace(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    char *arg2 ;
    unsigned int arg3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OsO:ArraySTRING_Replace",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = (unsigned int) PyInt_AsLong(obj2);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Replace((char const *)arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Remove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ArraySTRING_Remove",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Remove(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_getself(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    ArraySTRING *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ArraySTRING_getself",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        {
            ArraySTRING &_result_ref = ArraySTRING_getself(arg1);
            result = (ArraySTRING *) &_result_ref;
        }
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ArraySTRING, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_asTuple(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:ArraySTRING_asTuple",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)ArraySTRING_asTuple(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ArraySTRING_Join(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ArraySTRING *arg1 = (ArraySTRING *) 0 ;
    char *arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:ArraySTRING_Join",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ArraySTRING,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ArraySTRING_Join(arg1,(char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ArraySTRING_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ArraySTRING, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IDBOBJ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDBOBJ *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_IDBOBJ")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IDBOBJ *)new IDBOBJ();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IDBOBJ, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IDBOBJ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDBOBJ *arg1 = (IDBOBJ *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IDBOBJ",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDBOBJ,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IDBOBJ_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IDBOBJ, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_INDEX_ID__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_INDEX_ID")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (INDEX_ID *)new INDEX_ID();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_INDEX_ID, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_INDEX_ID__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID arg1 ;
    INDEX_ID *result;
    INDEX_ID *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_INDEX_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (INDEX_ID *)new INDEX_ID(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_INDEX_ID, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_INDEX_ID(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_INDEX_ID__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_INDEX_ID, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_INDEX_ID__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_INDEX_ID'");
    return NULL;
}


static PyObject *_wrap_delete_INDEX_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_INDEX_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INDEX_ID_GetIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INDEX_ID_GetIndex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->GetIndex();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INDEX_ID_SetIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:INDEX_ID_SetIndex",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        INDEX_ID_SetIndex(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INDEX_ID_SetMdtIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:INDEX_ID_SetMdtIndex",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetMdtIndex(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INDEX_ID_GetMdtIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INDEX_ID_GetMdtIndex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((INDEX_ID const *)arg1)->GetMdtIndex();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INDEX_ID_SetVirtualIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:INDEX_ID_SetVirtualIndex",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetVirtualIndex(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INDEX_ID_GetVirtualIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INDEX_ID_GetVirtualIndex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((INDEX_ID const *)arg1)->GetVirtualIndex();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INDEX_ID_Equals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    INDEX_ID arg2 ;
    bool result;
    INDEX_ID *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:INDEX_ID_Equals",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((INDEX_ID const *)arg1)->Equals(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INDEX_ID_Compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INDEX_ID *arg1 = (INDEX_ID *) 0 ;
    INDEX_ID arg2 ;
    int result;
    INDEX_ID *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:INDEX_ID_Compare",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((INDEX_ID const *)arg1)->Compare(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * INDEX_ID_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_INDEX_ID, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MDTREC(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) NULL ;
    MDTREC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_MDTREC",&obj0)) goto fail;
    if (obj0) {
        if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (MDTREC *)new MDTREC(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MDTREC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetCategory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetCategory",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetCategory(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetCategory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetCategory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((MDTREC const *)arg1)->GetCategory();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetPriority(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    short arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oh:MDTREC_SetPriority",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetPriority(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetPriority(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    short result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetPriority",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (short)((MDTREC const *)arg1)->GetPriority();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:MDTREC_SetKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetKey",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetKey();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetDocumentType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    SwigValueWrapper< DOCTYPE_ID const > arg2 ;
    DOCTYPE_ID *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetDocumentType",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDocumentType(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetDocumentType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    SwigValueWrapper< DOCTYPE_ID > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetDocumentType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetDocumentType();
        
        Py_END_ALLOW_THREADS;
    }
    {
        DOCTYPE_ID * resultptr;
        resultptr = new DOCTYPE_ID((DOCTYPE_ID &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_DOCTYPE_ID, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetPathName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:MDTREC_SetPathName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetPathName((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetPathName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetPathName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetPathName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:MDTREC_SetFileName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetFileName((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetFileName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetFileName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetFullFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:MDTREC_SetFullFileName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetFullFileName((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetFullFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetFullFileName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetFullFileName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetGlobalFileStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    unsigned long long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetGlobalFileStart",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetGlobalFileStart(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetGlobalFileStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    unsigned long long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetGlobalFileStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned long long)((MDTREC const *)arg1)->GetGlobalFileStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyLong_FromUnsignedLongLong(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetLocalRecordStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    unsigned long long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetLocalRecordStart",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetLocalRecordStart(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetLocalRecordStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    unsigned long long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetLocalRecordStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned long long)((MDTREC const *)arg1)->GetLocalRecordStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyLong_FromUnsignedLongLong(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetLocalRecordEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    unsigned long long arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetLocalRecordEnd",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetLocalRecordEnd(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetLocalRecordEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    unsigned long long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetLocalRecordEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned long long)((MDTREC const *)arg1)->GetLocalRecordEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyLong_FromUnsignedLongLong(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetLocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    LOCALE arg2 ;
    LOCALE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetLocale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetLocale(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetLocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    LOCALE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetLocale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetLocale();
        
        Py_END_ALLOW_THREADS;
    }
    {
        LOCALE * resultptr;
        resultptr = new LOCALE((LOCALE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_LOCALE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetDate",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDate(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetDate();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetDateModified(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetDateModified",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDateModified(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetDateModified(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetDateModified",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetDateModified();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetDateCreated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetDateCreated",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDateCreated(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetDateCreated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetDateCreated",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->GetDateCreated();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_SetDeleted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDTREC_SetDeleted",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDeleted(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_GetDeleted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_GetDeleted",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((MDTREC const *)arg1)->GetDeleted();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_FlipBytes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_FlipBytes",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->FlipBytes();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDTREC_Dump(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDTREC_Dump",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDTREC const *)arg1)->Dump();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MDTREC(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDTREC *arg1 = (MDTREC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MDTREC",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MDTREC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_MDTREC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_MDT(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) NULL ;
    bool arg2 = (bool) 0 ;
    MDT *result;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|sO:new_MDT",&arg1,&obj1)) goto fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (MDT *)new MDT((char const *)arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MDT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_GetFileStem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDT_GetFileStem",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((MDT const *)arg1)->GetFileStem();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_SetEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    unsigned int arg2 ;
    MDTREC arg3 ;
    MDTREC *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:MDT_SetEntry",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_MDTREC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg3 = *argp3; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetEntry(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_LookupByKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    char *arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:MDT_LookupByKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->LookupByKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_GetEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    unsigned int arg2 ;
    MDTREC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDT_GetEntry",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (MDTREC *)(arg1)->GetEntry(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MDTREC, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_Delete(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDT_Delete",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Delete(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_UnDelete(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDT_UnDelete",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->UnDelete(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_IsDeleted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:MDT_IsDeleted",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsDeleted(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_GetTotalEntries(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDT_GetTotalEntries",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetTotalEntries();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_GetTotalDeleted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDT_GetTotalDeleted",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetTotalDeleted();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_GetChanged(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDT_GetChanged",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((MDT const *)arg1)->GetChanged();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_RemoveDeleted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDT_RemoveDeleted",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->RemoveDeleted();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_MDT_Ok(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:MDT_Ok",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((MDT const *)arg1)->Ok();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_MDT(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    MDT *arg1 = (MDT *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_MDT",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_MDT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * MDT_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_MDT, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FC__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC arg1 ;
    FC *result;
    FC *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FC",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (FC *)new FC(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FC__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned long long *arg1 = (unsigned long long *) 0 ;
    FC *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FC",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_unsigned_long_long,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (FC *)new FC((unsigned long long const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FC__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned long long arg1 ;
    unsigned long long arg2 ;
    FC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_FC",&obj0,&obj1)) goto fail;
    arg1 = (unsigned long long) PyLong_AsUnsignedLongLong(obj0);
    if (PyErr_Occurred()) SWIG_fail;
    arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (FC *)new FC(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FC__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) (unsigned int)0 ;
    unsigned int arg2 = (unsigned int) (unsigned int)0 ;
    FC *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|OO:new_FC",&obj0,&obj1)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj1) {
        arg2 = (unsigned int) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (FC *)new FC(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_FC(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 2)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_FC__SWIG_3(self,args);
        }
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_FC__SWIG_3(self,args);
            }
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_FC__SWIG_3(self,args);
            }
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_long_long, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_FC__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_FC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_FC__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_FC__SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_FC'");
    return NULL;
}


static PyObject *_wrap_FC_Write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FC_Write",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)FC_Write(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_Read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FC_Read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)FC_Read(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_SetFieldStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FC_SetFieldStart",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetFieldStart(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_SetFieldEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FC_SetFieldEnd",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetFieldEnd(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_GetFieldStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FC_GetFieldStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetFieldStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_GetFieldEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FC_GetFieldEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetFieldEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_GetLength(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FC_GetLength",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetLength();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_Compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    FC arg2 ;
    int result;
    FC *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FC_Compare",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->Compare(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_Contains(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    FC arg2 ;
    int result;
    FC *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FC_Contains",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->Contains(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_asTuple(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FC_asTuple",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)FC_asTuple(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FC_FlipBytes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FC_FlipBytes",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->FlipBytes();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FC(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC *arg1 = (FC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FC",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_FC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_TREENODE__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TREENODE *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_TREENODE")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (TREENODE *)new TREENODE();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TREENODE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TREENODE__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FC arg1 ;
    char *arg2 ;
    TREENODE *result;
    FC *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:new_TREENODE",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (TREENODE *)new TREENODE(arg1,(char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TREENODE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_TREENODE(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_TREENODE__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_FC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_TREENODE__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_TREENODE'");
    return NULL;
}


static PyObject *_wrap_delete_TREENODE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TREENODE *arg1 = (TREENODE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_TREENODE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TREENODE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TREENODE_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TREENODE *arg1 = (TREENODE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TREENODE_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TREENODE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Name();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_TREENODE_Fc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    TREENODE *arg1 = (TREENODE *) 0 ;
    FC result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:TREENODE_Fc",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_TREENODE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Fc();
        
        Py_END_ALLOW_THREADS;
    }
    {
        FC * resultptr;
        resultptr = new FC((FC &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_FC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * TREENODE_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_TREENODE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_NODETREE__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_NODETREE")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (NODETREE *)new NODETREE();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_NODETREE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NODETREE__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE arg1 ;
    NODETREE *result;
    NODETREE *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_NODETREE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (NODETREE *)new NODETREE(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_NODETREE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_NODETREE(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_NODETREE__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_NODETREE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_NODETREE__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_NODETREE'");
    return NULL;
}


static PyObject *_wrap_NODETREE_AddEntry__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    TREENODE arg2 ;
    TREENODELIST *result;
    TREENODE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NODETREE_AddEntry",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_TREENODE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (TREENODELIST *)(arg1)->AddEntry(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TREENODELIST, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NODETREE_AddEntry__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    NODETREE arg2 ;
    TREENODELIST *result;
    NODETREE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:NODETREE_AddEntry",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (TREENODELIST *)(arg1)->AddEntry(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_TREENODELIST, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NODETREE_AddEntry(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_NODETREE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_TREENODE, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_NODETREE_AddEntry__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_NODETREE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_NODETREE, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_NODETREE_AddEntry__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'NODETREE_AddEntry'");
    return NULL;
}


static PyObject *_wrap_NODETREE_Clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NODETREE_Clear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Clear();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NODETREE_Reverse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NODETREE_Reverse",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Reverse();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NODETREE_Sort(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NODETREE_Sort",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Sort();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NODETREE_IsSorted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NODETREE_IsSorted",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsSorted();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NODETREE_IsEmpty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:NODETREE_IsEmpty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsEmpty();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NODETREE_GetEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    int arg2 ;
    TREENODE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:NODETREE_GetEntry",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetEntry(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        TREENODE * resultptr;
        resultptr = new TREENODE((TREENODE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_TREENODE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_NODETREE_XMLNodeTree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    char *arg2 = (char *) "" ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|s:NODETREE_XMLNodeTree",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->XMLNodeTree((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_NODETREE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    NODETREE *arg1 = (NODETREE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_NODETREE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_NODETREE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * NODETREE_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_NODETREE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RESULT__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_RESULT")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RESULT *)new RESULT();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RESULT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RESULT__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT arg1 ;
    RESULT *result;
    RESULT *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_RESULT",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RESULT *)new RESULT(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RESULT, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_RESULT(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_RESULT__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_RESULT__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_RESULT'");
    return NULL;
}


static PyObject *_wrap_RESULT_Write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RESULT_Write",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)RESULT_Write(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_Read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RESULT_Read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)RESULT_Read(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_SetIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    INDEX_ID arg2 ;
    INDEX_ID *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RESULT_SetIndex",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_INDEX_ID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetIndex(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    INDEX_ID result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetIndex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetIndex();
        
        Py_END_ALLOW_THREADS;
    }
    {
        INDEX_ID * resultptr;
        resultptr = new INDEX_ID((INDEX_ID &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_INDEX_ID, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_SetMdtIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RESULT_SetMdtIndex",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetMdtIndex(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetMdtIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetMdtIndex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((RESULT const *)arg1)->GetMdtIndex();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_SetVirtualIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RESULT_SetVirtualIndex",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetVirtualIndex(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetVirtualIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetVirtualIndex",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((RESULT const *)arg1)->GetVirtualIndex();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetCategory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetCategory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)((RESULT const *)arg1)->GetCategory();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_SetCategory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:RESULT_SetCategory",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetCategory(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_SetKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RESULT_SetKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetKey",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetKey();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetGlobalKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetGlobalKey",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetGlobalKey();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetLanguageCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetLanguageCode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((RESULT const *)arg1)->GetLanguageCode();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetCharsetCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetCharsetCode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((RESULT const *)arg1)->GetCharsetCode();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetLanguageName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetLanguageName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((RESULT const *)arg1)->GetLanguageName();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetCharsetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetCharsetName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((RESULT const *)arg1)->GetCharsetName();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetFullFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetFullFileName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetFullFileName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetPathName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetPathName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetPathName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetFileName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetFileName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetDoctype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetDoctype",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetDoctype();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetRecordStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetRecordStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)((RESULT const *)arg1)->GetRecordStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetRecordEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetRecordEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)((RESULT const *)arg1)->GetRecordEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetLength(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetLength",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)((RESULT const *)arg1)->GetLength();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetRecordSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetRecordSize",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)((RESULT const *)arg1)->GetRecordSize();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetScore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetScore",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (double)((RESULT const *)arg1)->GetScore();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetAuxCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetAuxCount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((RESULT const *)arg1)->GetAuxCount();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetHitTotal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetHitTotal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((RESULT const *)arg1)->GetHitTotal();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetDate();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetDateModified(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetDateModified",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetDateModified();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetDateCreated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetDateCreated",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetDateCreated();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetHitTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    FCT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetHitTable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->GetHitTable();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyList_FromFCT(result);
        
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_GetRefcount_(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_GetRefcount_",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((RESULT const *)arg1)->GetRefcount_();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RESULT_XMLHitTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RESULT_XMLHitTable",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RESULT const *)arg1)->XMLHitTable();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RESULT(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RESULT *arg1 = (RESULT *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RESULT",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RESULT_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RESULT, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IRSET(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDBOBJ *arg1 = (IDBOBJ *) 0 ;
    unsigned int arg2 = (unsigned int) 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:new_IRSET",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDBOBJ,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (unsigned int) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)new IRSET(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_getself(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IRSET_getself",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        {
            IRSET &_result_ref = IRSET_getself(arg1);
            result = (IRSET *) &_result_ref;
        }
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Write",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)IRSET_Write(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)IRSET_Read(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_LoadTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IRSET_LoadTable",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->LoadTable((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_SaveTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IRSET_SaveTable",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        ((IRSET const *)arg1)->SaveTable((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_GetRset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    unsigned int arg2 = (unsigned int) 0 ;
    RSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:IRSET_GetRset",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (unsigned int) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RSET *)((IRSET const *)arg1)->GetRset(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Fill(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 = (unsigned int) 0 ;
    RSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:IRSET_Fill",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = (unsigned int) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RSET *)((IRSET const *)arg1)->Fill(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_GetTotalEntries(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IRSET_GetTotalEntries",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((IRSET const *)arg1)->GetTotalEntries();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_GetHitTotal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IRSET_GetHitTotal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((IRSET const *)arg1)->GetHitTotal();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Or(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Or",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Or((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Nor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Nor",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Nor((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_And(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_And",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->And((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Nand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Nand",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Nand((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_AndNot(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_AndNot",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->AndNot((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Xor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Xor",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Xor((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Near(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Near",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Near((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Far(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Far",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Far((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_After(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_After",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->After((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Before(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Before",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Before((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Adj(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Adj",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Adj((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Follows(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Follows",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Follows((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Precedes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Precedes",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Precedes((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Neighbor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Neighbor",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Neighbor((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Peer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IRSET_Peer",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Peer((IRSET const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Within__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    char *arg2 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IRSET_Within",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Within((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Within__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    char *arg3 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:IRSET_Within",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Within(*arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Within(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IRSET, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_IRSET_Within__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IRSET, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_IRSET, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_IRSET_Within__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IRSET_Within'");
    return NULL;
}


static PyObject *_wrap_IRSET_XWithin(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    char *arg2 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IRSET_XWithin",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->XWithin((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Inside(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    char *arg2 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IRSET_Inside",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Inside((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_WithinXChars(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    float arg3 = (float) 50.0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|f:IRSET_WithinXChars",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->WithinXChars((IRSET const &)*arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_WithinXChars_Before(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    float arg3 = (float) 50.0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|f:IRSET_WithinXChars_Before",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->WithinXChars_Before((IRSET const &)*arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_WithinXChars_After(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    float arg3 = (float) 50.0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|f:IRSET_WithinXChars_After",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->WithinXChars_After((IRSET const &)*arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_WithinXPercent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    float arg3 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOf:IRSET_WithinXPercent",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->WithinXPercent((IRSET const &)*arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_WithinXPercent_Before(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    float arg3 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOf:IRSET_WithinXPercent_Before",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->WithinXPercent_Before((IRSET const &)*arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_WithinXPercent_After(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *arg2 = 0 ;
    float arg3 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOf:IRSET_WithinXPercent_After",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->WithinXPercent_After((IRSET const &)*arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_Not(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IRSET_Not",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Not();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_ComputeScores(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IRSET_ComputeScores",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->ComputeScores(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_SortBy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IRSET_SortBy",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SortBy((enum SortBy)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_GetMaxScore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IRSET_GetMaxScore",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (double)((IRSET const *)arg1)->GetMaxScore();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IRSET_GetMinScore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IRSET_GetMinScore",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (double)((IRSET const *)arg1)->GetMinScore();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IRSET(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IRSET *arg1 = (IRSET *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IRSET",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IRSET_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IRSET, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RSET(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg1 = (unsigned int) 0 ;
    RSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|O:new_RSET",&obj0)) goto fail;
    if (obj0) {
        arg1 = (unsigned int) PyInt_AsLong(obj0);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RSET *)new RSET(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RSET, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_getself(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    RSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RSET_getself",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        {
            RSET &_result_ref = RSET_getself(arg1);
            result = (RSET *) &_result_ref;
        }
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_Write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RSET_Write",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)RSET_Write(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_Read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RSET_Read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)RSET_Read(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_Cat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    RSET arg2 ;
    RSET result;
    RSET *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RSET_Cat",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Cat(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        RSET * resultptr;
        resultptr = new RSET((RSET &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_RSET, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_LoadTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RSET_LoadTable",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->LoadTable((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_SaveTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RSET_SaveTable",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        ((RSET const *)arg1)->SaveTable((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_GetMaxScore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RSET_GetMaxScore",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (double)((RSET const *)arg1)->GetMaxScore();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_GetMinScore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RSET_GetMinScore",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (double)((RSET const *)arg1)->GetMinScore();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_FilterDateRange(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    SwigValueWrapper< DATERANGE const > arg2 ;
    bool result;
    DATERANGE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RSET_FilterDateRange",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->FilterDateRange(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_GetEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    unsigned int arg2 ;
    RESULT result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RSET_GetEntry",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RSET const *)arg1)->GetEntry(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        RESULT * resultptr;
        resultptr = new RESULT((RESULT &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_RESULT, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_GetScaledScore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    double arg2 ;
    int arg3 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Odi:RSET_GetScaledScore",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->GetScaledScore(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_GetHitTotal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RSET_GetHitTotal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((RSET const *)arg1)->GetHitTotal();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_Find(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    char *arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RSET_Find",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((RSET const *)arg1)->Find((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_GetTotalEntries(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RSET_GetTotalEntries",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetTotalEntries();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_SortBy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:RSET_SortBy",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SortBy((enum SortBy)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_SortByCategoryMagnetism(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:RSET_SortByCategoryMagnetism",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SortByCategoryMagnetism(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_Reduce(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:RSET_Reduce",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->Reduce(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_DropByTerms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    int arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:RSET_DropByTerms",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->DropByTerms(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET_DropByScore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    double arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:RSET_DropByScore",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->DropByScore(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RSET___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    int arg2 ;
    RESULT result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:RSET___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = RSET___getitem__(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        RESULT * resultptr;
        resultptr = new RESULT((RESULT &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_RESULT, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RSET(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RSET *arg1 = (RSET *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RSET",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RSET_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RSET, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_INFIX2RPN(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INFIX2RPN *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_INFIX2RPN")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (INFIX2RPN *)new INFIX2RPN();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_INFIX2RPN, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INFIX2RPN_Parse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INFIX2RPN *arg1 = (INFIX2RPN *) 0 ;
    char *arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:INFIX2RPN_Parse",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INFIX2RPN,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Parse((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INFIX2RPN_InputParsedOK(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INFIX2RPN *arg1 = (INFIX2RPN *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INFIX2RPN_InputParsedOK",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INFIX2RPN,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((INFIX2RPN const *)arg1)->InputParsedOK();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_INFIX2RPN_GetErrorMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INFIX2RPN *arg1 = (INFIX2RPN *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:INFIX2RPN_GetErrorMessage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INFIX2RPN,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((INFIX2RPN const *)arg1)->GetErrorMessage();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_INFIX2RPN(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    INFIX2RPN *arg1 = (INFIX2RPN *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_INFIX2RPN",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_INFIX2RPN,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * INFIX2RPN_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_INFIX2RPN, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SQUERY__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_SQUERY")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (SQUERY *)new SQUERY();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SQUERY, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SQUERY__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY arg1 ;
    SQUERY *result;
    SQUERY *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SQUERY",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (SQUERY *)new SQUERY(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SQUERY, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SQUERY__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    SQUERY *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_SQUERY",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (SQUERY *)new SQUERY((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SQUERY, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SQUERY(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_SQUERY__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_SQUERY, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_new_SQUERY__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_SQUERY__SWIG_2(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_SQUERY'");
    return NULL;
}


static PyObject *_wrap_SQUERY_Write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SQUERY_Write",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)SQUERY_Write(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_Read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SQUERY_Read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)SQUERY_Read(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_GetTotalTerms(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SQUERY_GetTotalTerms",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((SQUERY const *)arg1)->GetTotalTerms();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_SetRelevantTerm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    char *arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SQUERY_SetRelevantTerm",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->SetRelevantTerm((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_SetInfixTerm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    char *arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SQUERY_SetInfixTerm",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->SetInfixTerm((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_SetRpnTerm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    char *arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SQUERY_SetRpnTerm",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->SetRpnTerm((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_SetQueryTerm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    char *arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SQUERY_SetQueryTerm",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->SetQueryTerm((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_LastErrorMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SQUERY_LastErrorMessage",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((SQUERY const *)arg1)->LastErrorMessage();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_GetRpnTerm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SQUERY_GetRpnTerm",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((SQUERY const *)arg1)->GetRpnTerm();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_Cat__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    SQUERY arg2 ;
    SQUERY result;
    SQUERY *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SQUERY_Cat",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Cat(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SQUERY * resultptr;
        resultptr = new SQUERY((SQUERY &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SQUERY, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_Cat__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    SQUERY arg2 ;
    char *arg3 ;
    SQUERY result;
    SQUERY *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:SQUERY_Cat",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Cat(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SQUERY * resultptr;
        resultptr = new SQUERY((SQUERY &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SQUERY, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_Cat(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_SQUERY, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_SQUERY, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_SQUERY_Cat__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_SQUERY, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_SQUERY, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_SQUERY_Cat__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'SQUERY_Cat'");
    return NULL;
}


static PyObject *_wrap_SQUERY_OpenThesaurus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SQUERY_OpenThesaurus",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->OpenThesaurus((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_CloseThesaurus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SQUERY_CloseThesaurus",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->CloseThesaurus();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SQUERY_ExpandQuery(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SQUERY_ExpandQuery",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->ExpandQuery();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SQUERY(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SQUERY *arg1 = (SQUERY *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SQUERY",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SQUERY_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SQUERY, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SRCH_DATE__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) NULL ;
    SRCH_DATE *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|s:new_SRCH_DATE",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (SRCH_DATE *)new SRCH_DATE((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SRCH_DATE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SRCH_DATE__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    double arg1 ;
    SRCH_DATE *result;
    
    if(!PyArg_ParseTuple(args,(char *)"d:new_SRCH_DATE",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (SRCH_DATE *)new SRCH_DATE(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SRCH_DATE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SRCH_DATE__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    long arg1 ;
    SRCH_DATE *result;
    
    if(!PyArg_ParseTuple(args,(char *)"l:new_SRCH_DATE",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (SRCH_DATE *)new SRCH_DATE(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SRCH_DATE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_SRCH_DATE(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 1)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_SRCH_DATE__SWIG_0(self,args);
        }
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_SRCH_DATE__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_SRCH_DATE__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = (PyFloat_Check(argv[0]) || PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_SRCH_DATE__SWIG_1(self,args);
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_SRCH_DATE'");
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE_Write",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)SRCH_DATE_Write(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE_Read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)SRCH_DATE_Read(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE___repr__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE___repr__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = SRCH_DATE___repr__(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Plus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE result;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE_Plus",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Plus(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Minus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE result;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE_Minus",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Minus(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PlusNseconds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_PlusNseconds",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->PlusNseconds(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PlusNminutes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_PlusNminutes",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->PlusNminutes(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PlusNhours(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_PlusNhours",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->PlusNhours(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PlusNdays(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_PlusNdays",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->PlusNdays(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PlusNweeks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_PlusNweeks",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->PlusNweeks(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PlusNmonths(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_PlusNmonths",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->PlusNmonths(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PlusNyears(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_PlusNyears",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->PlusNyears(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_MinusNseconds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_MinusNseconds",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->MinusNseconds(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_MinusNminutes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_MinusNminutes",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->MinusNminutes(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_MinusNhours(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_MinusNhours",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->MinusNhours(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_MinusNdays(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_MinusNdays",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->MinusNdays(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_MinusNweeks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_MinusNweeks",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->MinusNweeks(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_MinusNmonths(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_MinusNmonths",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->MinusNmonths(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_MinusNyears(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_MinusNyears",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->MinusNyears(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Tommorrow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_Tommorrow",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Tommorrow();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Yesterday(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_Yesterday",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Yesterday();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_NextWeek(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_NextWeek",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->NextWeek();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_LastWeek(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_LastWeek",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->LastWeek();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_NextMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_NextMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->NextMonth();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_LastMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_LastMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->LastMonth();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_NextYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_NextYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->NextYear();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_LastYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_LastYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->LastYear();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetValue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_GetValue",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (double)(arg1)->GetValue();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsYearDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_IsYearDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsYearDate();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsMonthDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_IsMonthDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsMonthDate();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsDayDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_IsDayDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsDayDate();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsBogusDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_IsBogusDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsBogusDate();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsValidDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_IsValidDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsValidDate();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsLeapYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_IsLeapYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsLeapYear();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Ok(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_Ok",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Ok();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_TrimToMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_TrimToMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->TrimToMonth();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_TrimToYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_TrimToYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->TrimToYear();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetToYearStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_SetToYearStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetToYearStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetToYearEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_SetToYearEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetToYearEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetToMonthStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_SetToMonthStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetToMonthStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetToMonthEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_SetToMonthEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetToMonthEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetToDayStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_SetToDayStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetToDayStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetToDayEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_SetToDayEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetToDayEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PromoteToMonthStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_PromoteToMonthStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->PromoteToMonthStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PromoteToMonthEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_PromoteToMonthEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->PromoteToMonthEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PromoteToDayStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_PromoteToDayStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->PromoteToDayStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_PromoteToDayEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_PromoteToDayEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->PromoteToDayEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetTodaysDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_GetTodaysDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->GetTodaysDate();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetNow(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_SetNow",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetNow();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_SetYear",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetYear(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_SetMonth",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetMonth(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetDay(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SRCH_DATE_SetDay",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetDay(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Year(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_Year",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->Year();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Month(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_Month",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->Month();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Day(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_Day",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->Day();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_DayOfWeek(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_DayOfWeek",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->DayOfWeek();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_DayOfYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_DayOfYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->DayOfYear();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetFirstDayOfMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_GetFirstDayOfMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->GetFirstDayOfMonth();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetWeekOfMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_GetWeekOfMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->GetWeekOfMonth();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_WeekOfYear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_WeekOfYear",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->WeekOfYear();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetDaysInMonth(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_GetDaysInMonth",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->GetDaysInMonth();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetJulianDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_GetJulianDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->GetJulianDate();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetTimeSeconds(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_GetTimeSeconds",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->GetTimeSeconds();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetTimeOfFile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SRCH_DATE_SetTimeOfFile",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetTimeOfFile((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_SetTimeOfFileCreation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SRCH_DATE_SetTimeOfFileCreation",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetTimeOfFileCreation((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetTimeOfFile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    char *arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SRCH_DATE_GetTimeOfFile",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetTimeOfFile((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_GetTimeOfFileCreation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    char *arg2 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SRCH_DATE_GetTimeOfFileCreation",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetTimeOfFileCreation((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsBefore(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE arg2 ;
    bool result;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE_IsBefore",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsBefore(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Equals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE arg2 ;
    bool result;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE_Equals",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Equals(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsDuring(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE arg2 ;
    bool result;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE_IsDuring",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsDuring(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_IsAfter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE arg2 ;
    bool result;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE_IsAfter",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsAfter(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_ISOdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_ISOdate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ISOdate();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_RFCdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_RFCdate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->RFCdate();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_ANSIdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_ANSIdate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ANSIdate();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_LCdate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SRCH_DATE_LCdate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->LCdate();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE_Strftime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    char *arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:SRCH_DATE_Strftime",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = SRCH_DATE_Strftime(arg1,(char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SRCH_DATE___cmp__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    SRCH_DATE arg2 ;
    int result;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SRCH_DATE___cmp__",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)SRCH_DATE___cmp__(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SRCH_DATE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SRCH_DATE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SRCH_DATE_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SRCH_DATE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DATERANGE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SRCH_DATE arg1 ;
    SRCH_DATE arg2 ;
    DATERANGE *result;
    SRCH_DATE *argp1 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_DATERANGE",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (DATERANGE *)new DATERANGE(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DATERANGE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_GetStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DATERANGE_GetStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetStart();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_GetEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DATERANGE_GetEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetEnd();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_SetStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DATERANGE_SetStart",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetStart(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_SetEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DATERANGE_SetEnd",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetEnd(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_Ok(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DATERANGE_Ok",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Ok();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_Defined(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DATERANGE_Defined",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Defined();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_Contains(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    SRCH_DATE arg2 ;
    bool result;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DATERANGE_Contains",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Contains(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_ISO(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DATERANGE_ISO",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = DATERANGE_ISO(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_RFC(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DATERANGE_RFC",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = DATERANGE_RFC(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_Strftime(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) NULL ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|s:DATERANGE_Strftime",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = DATERANGE_Strftime(arg1,(char const *)arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_Write(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DATERANGE_Write",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)DATERANGE_Write(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_Read(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DATERANGE_Read",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        arg2 = obj1; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)DATERANGE_Read(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DATERANGE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DATERANGE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_asTuple(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DATERANGE_asTuple",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)DATERANGE_asTuple(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DATERANGE_Duration(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DATERANGE *arg1 = (DATERANGE *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DATERANGE_Duration",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (double)DATERANGE_Duration(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DATERANGE_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_DATERANGE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SCANOBJ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    unsigned int arg2 ;
    SCANOBJ *result;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:new_SCANOBJ",&arg1,&obj1)) goto fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (SCANOBJ *)new SCANOBJ((char const *)arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SCANOBJ, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANOBJ_Frequency(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANOBJ *arg1 = (SCANOBJ *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCANOBJ_Frequency",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANOBJ,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((SCANOBJ const *)arg1)->Frequency();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANOBJ_Term(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANOBJ *arg1 = (SCANOBJ *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCANOBJ_Term",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANOBJ,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((SCANOBJ const *)arg1)->Term();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SCANOBJ(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANOBJ *arg1 = (SCANOBJ *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SCANOBJ",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANOBJ,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANOBJ_asTuple(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANOBJ *arg1 = (SCANOBJ *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCANOBJ_asTuple",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANOBJ,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)SCANOBJ_asTuple(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SCANOBJ_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SCANOBJ, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_SCANLIST(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SwigValueWrapper< SCANLIST const > arg1 ;
    SCANLIST *result;
    SCANLIST *argp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_SCANLIST",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &argp1, SWIGTYPE_p_SCANLIST,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg1 = *argp1; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (SCANLIST *)new SCANLIST(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_SCANLIST, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANLIST_Reverse(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANLIST *arg1 = (SCANLIST *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCANLIST_Reverse",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANLIST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Reverse();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANLIST_IsEmpty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANLIST *arg1 = (SCANLIST *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCANLIST_IsEmpty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANLIST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsEmpty();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANLIST_GetTotalEntries(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANLIST *arg1 = (SCANLIST *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCANLIST_GetTotalEntries",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANLIST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetTotalEntries();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANLIST_GetEntry(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANLIST *arg1 = (SCANLIST *) 0 ;
    unsigned int arg2 ;
    SwigValueWrapper< SCANOBJ > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:SCANLIST_GetEntry",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANLIST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetEntry(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANOBJ * resultptr;
        resultptr = new SCANOBJ((SCANOBJ &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANOBJ, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_SCANLIST(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANLIST *arg1 = (SCANLIST *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_SCANLIST",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANLIST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANLIST_Get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANLIST *arg1 = (SCANLIST *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:SCANLIST_Get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANLIST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)SCANLIST_Get(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_SCANLIST___getitem__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SCANLIST *arg1 = (SCANLIST *) 0 ;
    int arg2 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:SCANLIST___getitem__",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_SCANLIST,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)SCANLIST___getitem__(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * SCANLIST_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_SCANLIST, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DOCTYPE_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    DOCTYPE_ID *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_DOCTYPE_ID",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (DOCTYPE_ID *)new DOCTYPE_ID((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DOCTYPE_ID, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOCTYPE_ID_DocumentType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DOCTYPE_ID_DocumentType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((DOCTYPE_ID const *)arg1)->DocumentType();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOCTYPE_ID_Set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:DOCTYPE_ID_Set",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->Set((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOCTYPE_ID_Get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DOCTYPE_ID_Get",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((DOCTYPE_ID const *)arg1)->Get();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOCTYPE_ID_c_str(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DOCTYPE_ID_c_str",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((DOCTYPE_ID const *)arg1)->c_str();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOCTYPE_ID_IsDefined(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DOCTYPE_ID_IsDefined",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((DOCTYPE_ID const *)arg1)->IsDefined();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOCTYPE_ID_Equals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
    SwigValueWrapper< DOCTYPE_ID const > arg2 ;
    bool result;
    DOCTYPE_ID *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DOCTYPE_ID_Equals",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Equals(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DOCTYPE_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DOCTYPE_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DOCTYPE_ID_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_DOCTYPE_ID, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_DOC_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    DOC_ID *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_DOC_ID",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (DOC_ID *)new DOC_ID((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_DOC_ID, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOC_ID_Equals(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOC_ID *arg1 = (DOC_ID *) 0 ;
    DOC_ID *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DOC_ID_Equals",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOC_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_DOC_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Equals((DOC_ID const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOC_ID_Compare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOC_ID *arg1 = (DOC_ID *) 0 ;
    DOC_ID *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:DOC_ID_Compare",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOC_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_DOC_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->Compare((DOC_ID const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_DOC_ID_GlobalKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOC_ID *arg1 = (DOC_ID *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:DOC_ID_GlobalKey",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOC_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GlobalKey();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_DOC_ID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    DOC_ID *arg1 = (DOC_ID *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_DOC_ID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_DOC_ID,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * DOC_ID_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_DOC_ID, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_RECORD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    RECORD *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_RECORD",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RECORD *)new RECORD((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RECORD, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RECORD_SetKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetKey",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetKey();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetPathName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RECORD_SetPathName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetPathName((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetPathName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetPathName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetPathName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RECORD_SetFileName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetFileName((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetFileName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetFileName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetFullFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RECORD_SetFullFileName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetFullFileName((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetFullFileName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetFullFileName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetFullFileName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetRecordStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RECORD_SetRecordStart",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetRecordStart(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetRecordStart(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetRecordStart",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((RECORD const *)arg1)->GetRecordStart();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetRecordEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RECORD_SetRecordEnd",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetRecordEnd(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetRecordEnd(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetRecordEnd",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((RECORD const *)arg1)->GetRecordEnd();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetDocumentType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    SwigValueWrapper< DOCTYPE_ID const > arg2 ;
    DOCTYPE_ID *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RECORD_SetDocumentType",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDocumentType(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetDocumentType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    SwigValueWrapper< DOCTYPE_ID > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetDocumentType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetDocumentType();
        
        Py_END_ALLOW_THREADS;
    }
    {
        DOCTYPE_ID * resultptr;
        resultptr = new DOCTYPE_ID((DOCTYPE_ID &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_DOCTYPE_ID, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetLocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    LOCALE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetLocale",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetLocale();
        
        Py_END_ALLOW_THREADS;
    }
    {
        LOCALE * resultptr;
        resultptr = new LOCALE((LOCALE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_LOCALE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetLocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    LOCALE arg2 ;
    LOCALE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RECORD_SetLocale",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetLocale(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetLanguage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RECORD_SetLanguage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetLanguage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetCharset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:RECORD_SetCharset",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetCharset((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetDate",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetDate();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetDate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RECORD_SetDate",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDate(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetDateModified(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RECORD_SetDateModified",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDateModified(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetDateModified(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetDateModified",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetDateModified();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetDateCreated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    SRCH_DATE arg2 ;
    SRCH_DATE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:RECORD_SetDateCreated",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SRCH_DATE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDateCreated(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetDateCreated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetDateCreated",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((RECORD const *)arg1)->GetDateCreated();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetPriority(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetPriority",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((RECORD const *)arg1)->GetPriority();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetPriority(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:RECORD_SetPriority",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetPriority(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_GetCategory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD_GetCategory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((RECORD const *)arg1)->GetCategory();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD_SetCategory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:RECORD_SetCategory",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetCategory(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_RECORD___len__(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:RECORD___len__",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)RECORD___len__(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_RECORD(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    RECORD *arg1 = (RECORD *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_RECORD",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * RECORD_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_RECORD, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_FCACHE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDBOBJ *arg1 = (IDBOBJ *) 0 ;
    FCACHE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_FCACHE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDBOBJ,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (FCACHE *)new FCACHE(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FCACHE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FCACHE_Ok(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    GDT_BOOLEAN result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FCACHE_Ok",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((FCACHE const *)arg1)->Ok();
        
        Py_END_ALLOW_THREADS;
    }
    {
        GDT_BOOLEAN * resultptr;
        resultptr = new GDT_BOOLEAN((GDT_BOOLEAN &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_GDT_BOOLEAN, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FCACHE_ValidateInField__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    unsigned long long arg2 ;
    GDT_BOOLEAN result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FCACHE_ValidateInField",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ValidateInField(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        GDT_BOOLEAN * resultptr;
        resultptr = new GDT_BOOLEAN((GDT_BOOLEAN &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_GDT_BOOLEAN, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FCACHE_ValidateInField__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    FC arg2 ;
    GDT_BOOLEAN result;
    FC *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:FCACHE_ValidateInField",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ValidateInField(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        GDT_BOOLEAN * resultptr;
        resultptr = new GDT_BOOLEAN((GDT_BOOLEAN &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_GDT_BOOLEAN, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FCACHE_ValidateInField__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    unsigned long long arg2 ;
    char *arg3 ;
    GDT_BOOLEAN result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:FCACHE_ValidateInField",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((FCACHE const *)arg1)->ValidateInField(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        GDT_BOOLEAN * resultptr;
        resultptr = new GDT_BOOLEAN((GDT_BOOLEAN &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_GDT_BOOLEAN, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FCACHE_ValidateInField__SWIG_3(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    FC arg2 ;
    char *arg3 ;
    GDT_BOOLEAN result;
    FC *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:FCACHE_ValidateInField",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((FCACHE const *)arg1)->ValidateInField(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        GDT_BOOLEAN * resultptr;
        resultptr = new GDT_BOOLEAN((GDT_BOOLEAN &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_GDT_BOOLEAN, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FCACHE_ValidateInField(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_FCACHE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_FC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_FCACHE_ValidateInField__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_FCACHE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_FCACHE_ValidateInField__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_FCACHE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_FC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_FCACHE_ValidateInField__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_FCACHE, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_FCACHE_ValidateInField__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'FCACHE_ValidateInField'");
    return NULL;
}


static PyObject *_wrap_FCACHE_GetTotal(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    SIZE_T result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FCACHE_GetTotal",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((FCACHE const *)arg1)->GetTotal();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SIZE_T * resultptr;
        resultptr = new SIZE_T((SIZE_T &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SIZE_T, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FCACHE_SetFieldName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    char *arg2 ;
    bool arg3 = (bool) 0 ;
    GDT_BOOLEAN result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|O:FCACHE_SetFieldName",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->SetFieldName((char const *)arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        GDT_BOOLEAN * resultptr;
        resultptr = new GDT_BOOLEAN((GDT_BOOLEAN &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_GDT_BOOLEAN, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FCACHE_GetFieldName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:FCACHE_GetFieldName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((FCACHE const *)arg1)->GetFieldName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FCACHE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    FCACHE *arg1 = (FCACHE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_FCACHE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FCACHE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FCACHE_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_FCACHE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_DbStateInvalid_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable DbStateInvalid is read-only.");
    return 1;
}


static PyObject *_wrap_DbStateInvalid_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)DbStateInvalid);
    return pyobj;
}


static int _wrap_DbStateReady_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable DbStateReady is read-only.");
    return 1;
}


static PyObject *_wrap_DbStateReady_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)DbStateReady);
    return pyobj;
}


static int _wrap_DbStateBusy_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable DbStateBusy is read-only.");
    return 1;
}


static PyObject *_wrap_DbStateBusy_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)DbStateBusy);
    return pyobj;
}


static PyObject *_wrap_new_IDB__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg1 ;
    IDB *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_IDB",&obj0)) goto fail;
    arg1 = PyInt_AsLong(obj0) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IDB *)new IDB(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IDB, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IDB__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    bool arg2 ;
    IDB *result;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"sO:new_IDB",&arg1,&obj1)) goto fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IDB *)new IDB((char const *)arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IDB, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IDB__SWIG_2(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) NULL ;
    STRLIST arg2 = (STRLIST) NulStrlist ;
    IDB *result;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|sO:new_IDB",&arg1,&obj1)) goto fail;
    if (obj1) {
        {
            STRLIST *l =  STRLIST_FromPyList(obj1);
            if (l == NULL) arg2 = NulStrlist;
            else arg2 =  *l;
            
        }
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IDB *)new IDB((char const *)arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IDB, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_IDB(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 0) && (argc <= 2)) {
        int _v;
        if (argc <= 0) {
            return _wrap_new_IDB__SWIG_2(self,args);
        }
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            if (argc <= 1) {
                return _wrap_new_IDB__SWIG_2(self,args);
            }
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_STRLIST, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_new_IDB__SWIG_2(self,args);
            }
        }
    }
    if (argc == 1) {
        int _v;
        {
            _v = (PyInt_Check(argv[0]) || PyLong_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_IDB__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = PyString_Check(argv[0]) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_IDB__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'new_IDB'");
    return NULL;
}


static PyObject *_wrap_IDB_SetCommonWordsThreshold(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:IDB_SetCommonWordsThreshold",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetCommonWordsThreshold(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetLocale(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 = (char *) NULL ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|s:IDB_SetLocale",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetLocale((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_IsDbCompatible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_IsDbCompatible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsDbCompatible();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_IsEmpty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_IsEmpty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((IDB const *)arg1)->IsEmpty();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Ok(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_Ok",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Ok();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetMergeStatus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IDB_SetMergeStatus",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetMergeStatus((enum MergeStatus)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetDbState(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IDB_SetDbState",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        IDB_SetDbState((IDB const *)arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetDbState(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetDbState",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((IDB const *)arg1)->GetDbState();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetDefaultDbSearchCutoff(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_SetDefaultDbSearchCutoff",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDefaultDbSearchCutoff(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetDbSearchCutoff(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_SetDbSearchCutoff",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDbSearchCutoff(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetDbSearchCutoff(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetDbSearchCutoff",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((IDB const *)arg1)->GetDbSearchCutoff();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetDbSearchFuel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_SetDbSearchFuel",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDbSearchFuel(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetDbSearchCacheSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_SetDbSearchCacheSize",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDbSearchCacheSize(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetDefaultPriorityFactor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:IDB_SetDefaultPriorityFactor",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDefaultPriorityFactor(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetPriorityFactor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    double arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od:IDB_SetPriorityFactor",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetPriorityFactor(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetPriorityFactor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetPriorityFactor",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (double)((IDB const *)arg1)->GetPriorityFactor();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyFloat_FromDouble(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetDbSisLimit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_SetDbSisLimit",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDbSisLimit(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetTitle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_SetTitle",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetTitle((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetTitle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetTitle",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((IDB const *)arg1)->GetTitle();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetComments(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_SetComments",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetComments((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetComments(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetComments",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((IDB const *)arg1)->GetComments();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetCopyright(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_SetCopyright",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetCopyright((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetCopyright(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetCopyright",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((IDB const *)arg1)->GetCopyright();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetMaintainer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    char *arg3 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss:IDB_SetMaintainer",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetMaintainer((char const *)arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetMaintainer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetMaintainer",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((IDB const *)arg1)->GetMaintainer();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetGlobalDoctype(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    SwigValueWrapper< DOCTYPE_ID const > arg2 ;
    DOCTYPE_ID *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_SetGlobalDoctype",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_DOCTYPE_ID,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetGlobalDoctype(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetIndexingMemory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    long arg2 ;
    bool arg3 = (bool) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol|O:IDB_SetIndexingMemory",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetIndexingMemory(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetIndexingMemory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetIndexingMemory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)((IDB const *)arg1)->GetIndexingMemory();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetStoplist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_SetStoplist",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetStoplist((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetGlobalStoplist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_SetGlobalStoplist",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetGlobalStoplist((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetGlobalStoplist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetGlobalStoplist",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((IDB const *)arg1)->GetGlobalStoplist();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetTotalWords(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetTotalWords",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)((IDB const *)arg1)->GetTotalWords();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetTotalUniqueWords(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetTotalUniqueWords",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)((IDB const *)arg1)->GetTotalUniqueWords();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetTotalRecords(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetTotalRecords",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((IDB const *)arg1)->GetTotalRecords();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetTotalDocumentsDeleted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetTotalDocumentsDeleted",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((IDB const *)arg1)->GetTotalDocumentsDeleted();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetFieldCache(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    FCACHE *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetFieldCache",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (FCACHE *)(arg1)->GetFieldCache();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FCACHE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetPeerFc__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned long long arg2 ;
    STRING *arg3 = (STRING *) NULL ;
    FC result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:IDB_GetPeerFc",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        {
            STRING tmp_string(PyString_AsString(obj2), PyString_Size(obj2));
            arg3=&tmp_string;
        }
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetPeerFc(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        FC * resultptr;
        resultptr = new FC((FC &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_FC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetPeerFc__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    FC arg2 ;
    STRING *arg3 = (STRING *) NULL ;
    FC result;
    FC *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:IDB_GetPeerFc",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (obj2) {
        {
            STRING tmp_string(PyString_AsString(obj2), PyString_Size(obj2));
            arg3=&tmp_string;
        }
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetPeerFc(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        FC * resultptr;
        resultptr = new FC((FC &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_FC, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetPeerFc(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_FC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_IDB_GetPeerFc__SWIG_1(self,args);
                }
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_STRING, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_IDB_GetPeerFc__SWIG_1(self,args);
                }
            }
        }
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_IDB_GetPeerFc__SWIG_0(self,args);
                }
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_STRING, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_IDB_GetPeerFc__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_GetPeerFc'");
    return NULL;
}


static PyObject *_wrap_IDB_GetNodeTree__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned long long arg2 ;
    NODETREE result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_GetNodeTree",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned long long) PyLong_AsUnsignedLongLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetNodeTree(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        NODETREE * resultptr;
        resultptr = new NODETREE((NODETREE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_NODETREE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetNodeTree__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    FC arg2 ;
    NODETREE result;
    FC *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_GetNodeTree",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetNodeTree(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        NODETREE * resultptr;
        resultptr = new NODETREE((NODETREE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_NODETREE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetNodeTree(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_FC, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_IDB_GetNodeTree__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_IDB_GetNodeTree__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_GetNodeTree'");
    return NULL;
}


static PyObject *_wrap_IDB_KillCache(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_KillCache",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((IDB const *)arg1)->KillCache();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_FillHeadlineCache__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_FillHeadlineCache",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->FillHeadlineCache();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_FillHeadlineCache__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_FillHeadlineCache",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->FillHeadlineCache((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_FillHeadlineCache(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_IDB_FillHeadlineCache__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_IDB_FillHeadlineCache__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_FillHeadlineCache'");
    return NULL;
}


static PyObject *_wrap_IDB_IsSystemFile(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_IsSystemFile",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsSystemFile((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetServerName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_SetServerName",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetServerName((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetServerName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetServerName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((IDB const *)arg1)->GetServerName();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_MergeIndexFiles(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_MergeIndexFiles",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->MergeIndexFiles();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_CollapseIndexFiles(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_CollapseIndexFiles",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->CollapseIndexFiles();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_KillAll(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_KillAll",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->KillAll();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetVersionID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetVersionID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((IDB const *)arg1)->GetVersionID();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_AddRecord(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    SwigValueWrapper< RECORD const > arg2 ;
    RECORD *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_AddRecord",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->AddRecord(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Index(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool arg2 = (bool) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:IDB_Index",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Index(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_AppendToIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    SwigValueWrapper< RECORD const > arg2 ;
    bool result;
    RECORD *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_AppendToIndex",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)IDB_AppendToIndex(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_AppendFileToIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_AppendFileToIndex",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)IDB_AppendFileToIndex(arg1,(char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_IsStopWord(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_IsStopWord",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((IDB const *)arg1)->IsStopWord((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_MdtLookupKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_MdtLookupKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((IDB const *)arg1)->MdtLookupKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetDocumentDeleted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IDB_GetDocumentDeleted",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((IDB const *)arg1)->GetDocumentDeleted(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_DeleteByIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IDB_DeleteByIndex",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->DeleteByIndex(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_DeleteByKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_DeleteByKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->DeleteByKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_UndeleteByIndex(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oi:IDB_UndeleteByIndex",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->UndeleteByIndex(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_UndeleteByKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_UndeleteByKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->UndeleteByKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_SetOverride(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_SetOverride",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetOverride(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetOverride(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetOverride",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((IDB const *)arg1)->GetOverride();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_CleanupDb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_CleanupDb",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->CleanupDb();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetLocks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_GetLocks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((IDB const *)arg1)->GetLocks();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Scan__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    int arg3 = (int) (int)-1 ;
    SwigValueWrapper< SCANLIST > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|i:IDB_Scan",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Scan((char const *)arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANLIST * resultptr;
        resultptr = new SCANLIST((SCANLIST &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANLIST, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Scan__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    char *arg3 ;
    int arg4 = (int) (int)-1 ;
    SwigValueWrapper< SCANLIST > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss|i:IDB_Scan",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Scan((char const *)arg2,(char const *)arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANLIST * resultptr;
        resultptr = new SCANLIST((SCANLIST &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANLIST, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Scan(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_IDB_Scan__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_IDB_Scan__SWIG_0(self,args);
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_IDB_Scan__SWIG_1(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_IDB_Scan__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_Scan'");
    return NULL;
}


static PyObject *_wrap_IDB_ScanGlob__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    INT arg3 = (INT) (INT)-1 ;
    SwigValueWrapper< SCANLIST > result;
    INT *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|O:IDB_ScanGlob",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_INT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
        arg3 = *argp3; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ScanGlob((char const *)arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANLIST * resultptr;
        resultptr = new SCANLIST((SCANLIST &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANLIST, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_ScanGlob__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    char *arg3 ;
    INT arg4 = (INT) (INT)-1 ;
    SwigValueWrapper< SCANLIST > result;
    INT *argp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss|O:IDB_ScanGlob",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &argp4, SWIGTYPE_p_INT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
        arg4 = *argp4; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ScanGlob((char const *)arg2,(char const *)arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANLIST * resultptr;
        resultptr = new SCANLIST((SCANLIST &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANLIST, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_ScanGlob(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_IDB_ScanGlob__SWIG_0(self,args);
                }
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_INT, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_IDB_ScanGlob__SWIG_0(self,args);
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_IDB_ScanGlob__SWIG_1(self,args);
                    }
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_INT, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_IDB_ScanGlob__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_ScanGlob'");
    return NULL;
}


static PyObject *_wrap_IDB_BeginRsetPresent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_BeginRsetPresent",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->BeginRsetPresent((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_EndRsetPresent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_EndRsetPresent",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->EndRsetPresent((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_BeforeSearching(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    SQUERY *arg2 = (SQUERY *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_BeforeSearching",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->BeforeSearching(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_AfterSearching(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    IRSET *arg2 = (IRSET *) 0 ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_AfterSearching",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_IRSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->AfterSearching(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_BeforeIndexing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_BeforeIndexing",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->BeforeIndexing();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_AfterIndexing(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:IDB_AfterIndexing",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->AfterIndexing();
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Search(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    SQUERY arg2 ;
    int arg3 = (int) Unsorted ;
    int arg4 = (int) defaultNormalization ;
    IRSET *result;
    SQUERY *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|ii:IDB_Search",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Search(arg2,(enum SortBy)arg3,(enum NormalizationMethods)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Headline__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_Headline",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Headline(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Headline__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:IDB_Headline",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Headline(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Headline(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_IDB_Headline__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_IDB_Headline__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_Headline'");
    return NULL;
}


static PyObject *_wrap_IDB_Summary__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_Summary",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Summary(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Summary__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:IDB_Summary",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Summary(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Summary(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_IDB_Summary__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_IDB_Summary__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_Summary'");
    return NULL;
}


static PyObject *_wrap_IDB_Context__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_Context",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Context(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Context__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    char *arg4 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:IDB_Context",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Context(arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Context(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_IDB_Context__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_IDB_Context__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_Context'");
    return NULL;
}


static PyObject *_wrap_IDB_NthContext__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int arg2 ;
    RESULT arg3 ;
    STRING result;
    RESULT *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:IDB_NthContext",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg3 = *argp3; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->NthContext(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_NthContext__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    unsigned int arg2 ;
    RESULT arg3 ;
    char *arg4 ;
    char *arg5 ;
    STRING result;
    RESULT *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOss:IDB_NthContext",&obj0,&obj1,&obj2,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg3 = *argp3; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->NthContext(arg2,arg3,(char const *)arg4,(char const *)arg5);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_NthContext(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_IDB_NthContext__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = PyString_Check(argv[4]) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_IDB_NthContext__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_NthContext'");
    return NULL;
}


static PyObject *_wrap_IDB_URL(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    bool arg3 = (bool) 0 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:IDB_URL",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->URL(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_HighlightedRecord(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    char *arg4 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:IDB_HighlightedRecord",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->HighlightedRecord(arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_DocHighlight__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDB_DocHighlight",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DocHighlight(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_DocHighlight__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:IDB_DocHighlight",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DocHighlight(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_DocHighlight(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_IDB_DocHighlight__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_IDB_DocHighlight__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_DocHighlight'");
    return NULL;
}


static PyObject *_wrap_IDB_GetFieldData(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT *arg2 = (RESULT *) 0 ;
    char *arg3 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:IDB_GetFieldData",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)IDB_GetFieldData(arg1,(RESULT const *)arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetFieldContents(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT *arg2 = (RESULT *) 0 ;
    char *arg3 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:IDB_GetFieldContents",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)IDB_GetFieldContents(arg1,(RESULT const *)arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Present__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:IDB_Present",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Present(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Present__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    char *arg4 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:IDB_Present",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Present(arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_Present(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_IDB_Present__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_IDB_Present__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_Present'");
    return NULL;
}


static PyObject *_wrap_IDB_DocPresent__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:IDB_DocPresent",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DocPresent(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_DocPresent__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    char *arg4 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:IDB_DocPresent",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DocPresent(arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_DocPresent(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_IDB_DocPresent__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_IDB_DocPresent__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDB_DocPresent'");
    return NULL;
}


static PyObject *_wrap_IDB_KeyLookup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    char *arg2 ;
    RESULT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDB_KeyLookup",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RESULT *)IDB_KeyLookup(arg1,(char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RESULT, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDB_GetFields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    RESULT *arg2 = (RESULT *) NULL ;
    ArraySTRING result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:IDB_GetFields",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = IDB_GetFields(arg1,(RESULT const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        ArraySTRING * resultptr;
        resultptr = new ArraySTRING((ArraySTRING &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_ArraySTRING, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_IDB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDB *arg1 = (IDB *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IDB",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IDB_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IDB, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_IDBC(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) NULL ;
    STRLIST arg2 = (STRLIST) (STRLIST)NulStrlist ;
    IDBC *result;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"|sO:new_IDBC",&arg1,&obj1)) goto fail;
    if (obj1) {
        {
            STRLIST *l =  STRLIST_FromPyList(obj1);
            if (l == NULL) arg2 = NulStrlist;
            else arg2 =  *l;
            
        }
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IDBC *)new IDBC((char const *)arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IDBC, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDBC_AddRecord__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDBC *arg1 = (IDBC *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:IDBC_AddRecord",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDBC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->AddRecord((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDBC_AddRecord__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDBC *arg1 = (IDBC *) 0 ;
    SwigValueWrapper< RECORD const > arg2 ;
    RECORD *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:IDBC_AddRecord",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDBC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->AddRecord(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_IDBC_AddRecord(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDBC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RECORD, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_IDBC_AddRecord__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_IDBC, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                return _wrap_IDBC_AddRecord__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'IDBC_AddRecord'");
    return NULL;
}


static PyObject *_wrap_delete_IDBC(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    IDBC *arg1 = (IDBC *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_IDBC",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_IDBC,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * IDBC_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_IDBC, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_VIDB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 = (char *) NULL ;
    VIDB *result;
    
    if(!PyArg_ParseTuple(args,(char *)"|s:new_VIDB",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (VIDB *)new VIDB((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_VIDB, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_VIDB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_VIDB",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_getself(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    VIDB *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_getself",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        {
            VIDB &_result_ref = VIDB_getself(arg1);
            result = (VIDB *) &_result_ref;
        }
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_VIDB, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetIDB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int arg2 = (unsigned int) 1 ;
    IDB *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:VIDB_GetIDB",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (unsigned int) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IDB *)VIDB_GetIDB(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IDB, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetIDBCount(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_GetIDBCount",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)((VIDB const *)arg1)->GetIDBCount();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_IsDbVirtual(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_IsDbVirtual",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((VIDB const *)arg1)->IsDbVirtual();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetMainMdt(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int arg2 = (unsigned int) 1 ;
    MDT *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:VIDB_GetMainMdt",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (unsigned int) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (MDT *)((VIDB const *)arg1)->GetMainMdt(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_MDT, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetFieldCache(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int arg2 = (unsigned int) 1 ;
    FCACHE *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:VIDB_GetFieldCache",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        arg2 = (unsigned int) PyInt_AsLong(obj1);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (FCACHE *)(arg1)->GetFieldCache(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FCACHE, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetDocTypeOptions(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_GetDocTypeOptions",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)VIDB_GetDocTypeOptions(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetDbFileStem(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetDbFileStem",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((VIDB const *)arg1)->GetDbFileStem(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_XMLHitTable(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT *arg2 = 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VIDB_XMLHitTable",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (arg2 == NULL) {
        PyErr_SetString(PyExc_TypeError,"null reference"); SWIG_fail; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->XMLHitTable((RESULT const &)*arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_XMLNodeTree(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    FC arg3 ;
    STRING result;
    RESULT *argp2 ;
    FC *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VIDB_XMLNodeTree",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_FC,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg3 = *argp3; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->XMLNodeTree(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SetPriorityFactor(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    double arg2 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Od|O:VIDB_SetPriorityFactor",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = (unsigned int) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetPriorityFactor(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SetDbSearchCutoff(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:VIDB_SetDbSearchCutoff",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = (unsigned int) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDbSearchCutoff(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetDbSearchCutoff(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_GetDbSearchCutoff",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetDbSearchCutoff();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SetDbSearchFuel(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:VIDB_SetDbSearchFuel",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = (unsigned int) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDbSearchFuel(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SetDbSearchCacheSize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 = (unsigned int) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:VIDB_SetDbSearchCacheSize",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if (obj2) {
        arg3 = (unsigned int) PyInt_AsLong(obj2);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDbSearchCacheSize(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_BeforeSearching(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    SQUERY arg2 ;
    SQUERY result;
    SQUERY *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VIDB_BeforeSearching",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->BeforeSearching(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SQUERY * resultptr;
        resultptr = new SQUERY((SQUERY &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SQUERY, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SetDebugMode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VIDB_SetDebugMode",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetDebugMode(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetErrorCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) (int)0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetErrorCode",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->GetErrorCode(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetTotalWords(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) (int)0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetTotalWords",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->GetTotalWords(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetTotalUniqueWords(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) (int)0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetTotalUniqueWords",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->GetTotalUniqueWords(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetTotalRecords(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) (int)0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetTotalRecords",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetTotalRecords(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetTotalDocumentsDeleted(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) (int)0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetTotalDocumentsDeleted",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetTotalDocumentsDeleted(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetTotalDatabases(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_GetTotalDatabases",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (unsigned int)(arg1)->GetTotalDatabases();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_IsDbCompatible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_IsDbCompatible",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsDbCompatible();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_IsEmpty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_IsEmpty",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((VIDB const *)arg1)->IsEmpty();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Ok(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_Ok",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->Ok();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SetCommonWordsThreshold(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    long arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Ol:VIDB_SetCommonWordsThreshold",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetCommonWordsThreshold(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SetStoplist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VIDB_SetStoplist",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SetStoplist((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_IsStopWord(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VIDB_IsStopWord",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->IsStopWord((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetTitle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) (int)0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetTitle",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetTitle(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetComments(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) (int)0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetComments",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetComments(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetMaintainer(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 = (int) (int)0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|i:VIDB_GetMaintainer",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetMaintainer(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Search(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    SQUERY arg2 ;
    int arg3 = (int) Unsorted ;
    int arg4 = (int) defaultNormalization ;
    IRSET *result;
    SQUERY *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|ii:VIDB_Search",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->Search(arg2,(enum SortBy)arg3,(enum NormalizationMethods)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SearchWords(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    int arg3 = (int) Unsorted ;
    int arg4 = (int) defaultNormalization ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|ii:VIDB_SearchWords",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->SearchWords((char const *)arg2,(enum SortBy)arg3,(enum NormalizationMethods)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SearchRpn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    int arg3 = (int) Unsorted ;
    int arg4 = (int) defaultNormalization ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|ii:VIDB_SearchRpn",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->SearchRpn((char const *)arg2,(enum SortBy)arg3,(enum NormalizationMethods)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SearchInfix(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    int arg3 = (int) Unsorted ;
    int arg4 = (int) defaultNormalization ;
    IRSET *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|ii:VIDB_SearchInfix",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (IRSET *)(arg1)->SearchInfix((char const *)arg2,(enum SortBy)arg3,(enum NormalizationMethods)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_IRSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_VSearch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    SQUERY arg2 ;
    int arg3 = (int) Unsorted ;
    unsigned int arg4 = (unsigned int) 300 ;
    RSET *result;
    SQUERY *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|iO:VIDB_VSearch",&obj0,&obj1,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_SQUERY,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (obj3) {
        arg4 = (unsigned int) PyInt_AsLong(obj3);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RSET *)(arg1)->VSearch(arg2,(enum SortBy)arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_VSearchWords(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    int arg3 = (int) Unsorted ;
    unsigned int arg4 = (unsigned int) 300 ;
    RSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|iO:VIDB_VSearchWords",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        arg4 = (unsigned int) PyInt_AsLong(obj3);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RSET *)(arg1)->VSearchWords((char const *)arg2,(enum SortBy)arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_VSearchRpn(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    int arg3 = (int) Unsorted ;
    unsigned int arg4 = (unsigned int) 300 ;
    RSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|iO:VIDB_VSearchRpn",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        arg4 = (unsigned int) PyInt_AsLong(obj3);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RSET *)(arg1)->VSearchRpn((char const *)arg2,(enum SortBy)arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_VSearchInfix(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    int arg3 = (int) Unsorted ;
    unsigned int arg4 = (unsigned int) 300 ;
    RSET *result;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|iO:VIDB_VSearchInfix",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        arg4 = (unsigned int) PyInt_AsLong(obj3);
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RSET *)(arg1)->VSearchInfix((char const *)arg2,(enum SortBy)arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RSET, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Scan__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    int arg3 = (int) (int)-1 ;
    SwigValueWrapper< SCANLIST > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|i:VIDB_Scan",&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Scan((char const *)arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANLIST * resultptr;
        resultptr = new SCANLIST((SCANLIST &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANLIST, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Scan__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    char *arg3 ;
    int arg4 = (int) (int)-1 ;
    SwigValueWrapper< SCANLIST > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss|i:VIDB_Scan",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Scan((char const *)arg2,(char const *)arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANLIST * resultptr;
        resultptr = new SCANLIST((SCANLIST &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANLIST, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Scan(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_VIDB_Scan__SWIG_0(self,args);
                }
                {
                    _v = (PyInt_Check(argv[2]) || PyLong_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_VIDB_Scan__SWIG_0(self,args);
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_VIDB_Scan__SWIG_1(self,args);
                    }
                    {
                        _v = (PyInt_Check(argv[3]) || PyLong_Check(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_VIDB_Scan__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_Scan'");
    return NULL;
}


static PyObject *_wrap_VIDB_ScanGlob__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    INT arg3 = (INT) (INT)-1 ;
    SwigValueWrapper< SCANLIST > result;
    INT *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|O:VIDB_ScanGlob",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_INT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
        arg3 = *argp3; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ScanGlob((char const *)arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANLIST * resultptr;
        resultptr = new SCANLIST((SCANLIST &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANLIST, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_ScanGlob__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    char *arg3 ;
    INT arg4 = (INT) (INT)-1 ;
    SwigValueWrapper< SCANLIST > result;
    INT *argp4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss|O:VIDB_ScanGlob",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        if ((SWIG_ConvertPtr(obj3,(void **) &argp4, SWIGTYPE_p_INT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
        arg4 = *argp4; 
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ScanGlob((char const *)arg2,(char const *)arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        SCANLIST * resultptr;
        resultptr = new SCANLIST((SCANLIST &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SCANLIST, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_ScanGlob(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if ((argc >= 2) && (argc <= 3)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                if (argc <= 2) {
                    return _wrap_VIDB_ScanGlob__SWIG_0(self,args);
                }
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_INT, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_VIDB_ScanGlob__SWIG_0(self,args);
                }
            }
        }
    }
    if ((argc >= 3) && (argc <= 4)) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = PyString_Check(argv[1]) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    if (argc <= 3) {
                        return _wrap_VIDB_ScanGlob__SWIG_1(self,args);
                    }
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], (void **) &ptr, SWIGTYPE_p_INT, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_VIDB_ScanGlob__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_ScanGlob'");
    return NULL;
}


static PyObject *_wrap_VIDB_BeginRsetPresent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VIDB_BeginRsetPresent",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->BeginRsetPresent((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Headline__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VIDB_Headline",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Headline(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Headline__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:VIDB_Headline",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Headline(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Headline(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_VIDB_Headline__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_VIDB_Headline__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_Headline'");
    return NULL;
}


static PyObject *_wrap_VIDB_Summary__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VIDB_Summary",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Summary(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Summary__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:VIDB_Summary",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Summary(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Summary(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_VIDB_Summary__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_VIDB_Summary__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_Summary'");
    return NULL;
}


static PyObject *_wrap_VIDB_Context__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VIDB_Context",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Context(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Context__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    char *arg4 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:VIDB_Context",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Context(arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Context(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_VIDB_Context__SWIG_0(self,args);
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_VIDB_Context__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_Context'");
    return NULL;
}


static PyObject *_wrap_VIDB_NthContext__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int arg2 ;
    RESULT arg3 ;
    STRING result;
    RESULT *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:VIDB_NthContext",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg3 = *argp3; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->NthContext(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_NthContext__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    unsigned int arg2 ;
    RESULT arg3 ;
    char *arg4 ;
    char *arg5 ;
    STRING result;
    RESULT *argp3 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOss:VIDB_NthContext",&obj0,&obj1,&obj2,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    if ((SWIG_ConvertPtr(obj2,(void **) &argp3, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg3 = *argp3; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->NthContext(arg2,arg3,(char const *)arg4,(char const *)arg5);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_NthContext(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_VIDB_NthContext__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyInt_Check(argv[1]) || PyLong_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = PyString_Check(argv[4]) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_VIDB_NthContext__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_NthContext'");
    return NULL;
}


static PyObject *_wrap_VIDB_URL(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    bool arg3 = (bool) 0 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO|O:VIDB_URL",&obj0,&obj1,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->URL(arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_HighlightedRecord(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    char *arg4 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:VIDB_HighlightedRecord",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->HighlightedRecord(arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_DocHighlight__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VIDB_DocHighlight",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DocHighlight(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_DocHighlight__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:VIDB_DocHighlight",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DocHighlight(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_DocHighlight(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                return _wrap_VIDB_DocHighlight__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_VIDB_DocHighlight__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_DocHighlight'");
    return NULL;
}


static PyObject *_wrap_VIDB_GetFieldData(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT *arg2 = (RESULT *) 0 ;
    char *arg3 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:VIDB_GetFieldData",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)VIDB_GetFieldData(arg1,(RESULT const *)arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetFieldContents(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT *arg2 = (RESULT *) 0 ;
    char *arg3 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:VIDB_GetFieldContents",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)VIDB_GetFieldContents(arg1,(RESULT const *)arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Present__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:VIDB_Present",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Present(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Present__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    char *arg4 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:VIDB_Present",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->Present(arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_Present(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_VIDB_Present__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_VIDB_Present__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_Present'");
    return NULL;
}


static PyObject *_wrap_VIDB_DocPresent__SWIG_0(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOs:VIDB_DocPresent",&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DocPresent(arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_DocPresent__SWIG_1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT arg2 ;
    char *arg3 ;
    char *arg4 ;
    STRING result;
    RESULT *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOss:VIDB_DocPresent",&obj0,&obj1,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DocPresent(arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_DocPresent(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_VIDB_DocPresent__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], (void **) &ptr, SWIGTYPE_p_VIDB, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr;
                if (SWIG_ConvertPtr(argv[1], (void **) &ptr, SWIGTYPE_p_RESULT, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = 1;
                }
            }
            if (_v) {
                {
                    _v = PyString_Check(argv[2]) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = PyString_Check(argv[3]) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_VIDB_DocPresent__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_TypeError,"No matching function for overloaded 'VIDB_DocPresent'");
    return NULL;
}


static PyObject *_wrap_VIDB_EndRsetPresent(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VIDB_EndRsetPresent",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->EndRsetPresent((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetGlobalDocType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_GetGlobalDocType",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetGlobalDocType();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_KeyLookup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    RESULT *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VIDB_KeyLookup",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (RESULT *)VIDB_KeyLookup(arg1,(char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_RESULT, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_SetDateRange(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    SwigValueWrapper< DATERANGE const > arg2 ;
    bool result;
    DATERANGE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:VIDB_SetDateRange",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_DATERANGE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->SetDateRange(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_ProfileGetString(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    char *arg3 ;
    char *arg4 = (char *) NULL ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oss|s:VIDB_ProfileGetString",&obj0,&arg2,&arg3,&arg4)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->ProfileGetString((char const *)arg2,(char const *)arg3,(char const *)arg4);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_FirstKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_FirstKey",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->FirstKey();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_LastKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_LastKey",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->LastKey();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_NextKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VIDB_NextKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->NextKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_PrevKey(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VIDB_PrevKey",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->PrevKey((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetDocumentInfo(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int arg2 ;
    int arg3 ;
    RECORD *arg4 = (RECORD *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OiiO:VIDB_GetDocumentInfo",&obj0,&arg2,&arg3,&obj3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj3,(void **) &arg4, SWIGTYPE_p_RECORD,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->GetDocumentInfo(arg2,arg3,arg4);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_DateCreated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_DateCreated",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DateCreated();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_DateLastModified(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    SRCH_DATE result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_DateLastModified",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->DateLastModified();
        
        Py_END_ALLOW_THREADS;
    }
    {
        SRCH_DATE * resultptr;
        resultptr = new SRCH_DATE((SRCH_DATE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_SRCH_DATE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetAllDocTypes(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_GetAllDocTypes",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)VIDB_GetAllDocTypes(arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_ValidateDocType(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    char *arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:VIDB_ValidateDocType",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)(arg1)->ValidateDocType((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetVersionID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_GetVersionID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->GetVersionID();
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetLocks(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:VIDB_GetLocks",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)(arg1)->GetLocks();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_VIDB_GetFields(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    VIDB *arg1 = (VIDB *) 0 ;
    RESULT *arg2 = (RESULT *) NULL ;
    PyObject *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O|O:VIDB_GetFields",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_VIDB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj1) {
        if ((SWIG_ConvertPtr(obj1,(void **) &arg2, SWIGTYPE_p_RESULT,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (PyObject *)VIDB_GetFields(arg1,(RESULT const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        return result;    
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * VIDB_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_VIDB, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LANGUAGE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    LANGUAGE *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_LANGUAGE",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (LANGUAGE *)new LANGUAGE((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_LANGUAGE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LANGUAGE_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LANGUAGE *arg1 = (LANGUAGE *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LANGUAGE_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LANGUAGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((LANGUAGE const *)arg1)->Name();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LANGUAGE_Code(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LANGUAGE *arg1 = (LANGUAGE *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LANGUAGE_Code",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LANGUAGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((LANGUAGE const *)arg1)->Code();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_LANGUAGE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LANGUAGE *arg1 = (LANGUAGE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LANGUAGE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LANGUAGE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LANGUAGE_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_LANGUAGE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_CHARSET(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    CHARSET *result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:new_CHARSET",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (CHARSET *)new CHARSET((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_CHARSET, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_Ok(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CHARSET_Ok",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)((CHARSET const *)arg1)->Ok();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:CHARSET_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)CHARSET_Name((CHARSET const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_HtmlCat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char *arg2 ;
    bool arg3 = (bool) 1 ;
    STRING result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os|O:CHARSET_HtmlCat",&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj2) {
        arg3 = PyInt_AsLong(obj2) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((CHARSET const *)arg1)->HtmlCat((char const *)arg2,arg3);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ToLower(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char *arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:CHARSET_ToLower",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((CHARSET const *)arg1)->ToLower((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ToUpper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char *arg2 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:CHARSET_ToUpper",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((CHARSET const *)arg1)->ToUpper((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isalpha(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isalpha",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isalpha(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isupper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isupper",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isupper(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_islower(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_islower",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_islower(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isdigit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isdigit",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isdigit(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isxdigit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isxdigit",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isxdigit(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isalnum(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isalnum",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isalnum(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isspace(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isspace",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isspace(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_ispunct(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_ispunct",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_ispunct(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isprint(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isprint",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isprint(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isgraph(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isgraph",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isgraph(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_iscntrl(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_iscntrl",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_iscntrl(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_iswhite(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_iswhite",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_iswhite(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_isascii(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_isascii",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_isascii(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_islatin1(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_islatin1",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_islatin1(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_toupper(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_toupper",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_toupper(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_tolower(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_tolower",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_tolower(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_ib_toascii(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_ib_toascii",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->ib_toascii(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_isTermChr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_isTermChr",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->isTermChr(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_isWordSep(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_isWordSep",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->isWordSep(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_isTermWhite(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_isTermWhite",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((CHARSET const *)arg1)->isTermWhite(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CHARSET_UCS(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    char arg2 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Oc:CHARSET_UCS",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)CHARSET_UCS(arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_CHARSET(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    CHARSET *arg1 = (CHARSET *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_CHARSET",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * CHARSET_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_CHARSET, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_LOCALE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_LOCALE")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (LOCALE *)new LOCALE();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_LOCALE, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_LOCALE(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_LOCALE",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_SetLanguage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    SwigValueWrapper< LANGUAGE > arg2 ;
    LOCALE result;
    LANGUAGE *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LOCALE_SetLanguage",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_LANGUAGE,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->SetLanguage(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        LOCALE * resultptr;
        resultptr = new LOCALE((LOCALE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_LOCALE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_SetCharset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    SwigValueWrapper< CHARSET > arg2 ;
    LOCALE result;
    CHARSET *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:LOCALE_SetCharset",&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_CHARSET,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (arg1)->SetCharset(arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        LOCALE * resultptr;
        resultptr = new LOCALE((LOCALE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_LOCALE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_GetLanguageCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LOCALE_GetLanguageCode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((LOCALE const *)arg1)->GetLanguageCode();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_GetLanguageName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LOCALE_GetLanguageName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((LOCALE const *)arg1)->GetLanguageName();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_GetCharsetCode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LOCALE_GetCharsetCode",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((LOCALE const *)arg1)->GetCharsetCode();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_GetCharsetName(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LOCALE_GetCharsetName",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (char *)((LOCALE const *)arg1)->GetCharsetName();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = result ? PyString_FromString(result) : Py_BuildValue((char*)"");
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_Charset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    SwigValueWrapper< CHARSET > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LOCALE_Charset",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((LOCALE const *)arg1)->Charset();
        
        Py_END_ALLOW_THREADS;
    }
    {
        CHARSET * resultptr;
        resultptr = new CHARSET((CHARSET &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_CHARSET, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_Language(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    SwigValueWrapper< LANGUAGE > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LOCALE_Language",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ((LOCALE const *)arg1)->Language();
        
        Py_END_ALLOW_THREADS;
    }
    {
        LANGUAGE * resultptr;
        resultptr = new LANGUAGE((LANGUAGE &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_LANGUAGE, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_Name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    STRING result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LOCALE_Name",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = LOCALE_Name((LOCALE const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_LOCALE_Id(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    LOCALE *arg1 = (LOCALE *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:LOCALE_Id",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_LOCALE,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (int)((LOCALE const *)arg1)->Id();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * LOCALE_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_LOCALE, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_ResolveConfigPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    STRING result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:ResolveConfigPath",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ResolveConfigPath((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ResolveBinPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    STRING result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:ResolveBinPath",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ResolveBinPath((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ResolveHtdocPath(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    bool arg2 = (bool) 1 ;
    STRING result;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"s|O:ResolveHtdocPath",&arg1,&obj1)) goto fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ResolveHtdocPath((char const *)arg1,arg2);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ExpandFileSpec(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    STRING result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:ExpandFileSpec",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = ExpandFileSpec((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    {
        resultobj = PyString_FromString((result).IsEmpty() ?  NulString.c_str() : (result).c_str() );
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_set_syslog(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg1 ;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)"s:set_syslog",&arg1)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)set_syslog((char const *)arg1);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_log_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char *arg2 = (char *) NULL ;
    char *arg3 = (char *) NULL ;
    bool result;
    
    if(!PyArg_ParseTuple(args,(char *)"i|ss:log_init",&arg1,&arg2,&arg3)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (bool)log_init(arg1,(char const *)arg2,(char const *)arg3);
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_log_message(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg1 ;
    char *arg2 ;
    
    if(!PyArg_ParseTuple(args,(char *)"is:log_message",&arg1,&arg2)) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        log_message(arg1,(char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_GetFreeMemory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:__IB_GetFreeMemory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->GetFreeMemory();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_GetTotalMemory(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:__IB_GetTotalMemory",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->GetTotalMemory();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_Hostid(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:__IB_Hostid",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->Hostid();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SerialID(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:__IB_SerialID",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (long)(arg1)->SerialID();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SendDebugMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:__IB_SendDebugMessage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SendDebugMessage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SendInfoMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:__IB_SendInfoMessage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SendInfoMessage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SendNoticeMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:__IB_SendNoticeMessage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SendNoticeMessage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SendWarningMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:__IB_SendWarningMessage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SendWarningMessage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SendErrorMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:__IB_SendErrorMessage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SendErrorMessage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SendErrnoMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:__IB_SendErrnoMessage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SendErrnoMessage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SendFatalMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:__IB_SendFatalMessage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SendFatalMessage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap___IB_SendPanicMessage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"Os:__IB_SendPanicMessage",&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        (arg1)->SendPanicMessage((char const *)arg2);
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new___IB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new___IB")) goto fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        result = (__IB *)new __IB();
        
        Py_END_ALLOW_THREADS;
    }
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p___IB, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete___IB(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    __IB *arg1 = (__IB *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete___IB",&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p___IB,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    {
        Py_BEGIN_ALLOW_THREADS;
        delete arg1;
        
        Py_END_ALLOW_THREADS;
    }
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * __IB_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p___IB, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_ArraySTRING", _wrap_new_ArraySTRING, METH_VARARGS },
	 { (char *)"delete_ArraySTRING", _wrap_delete_ArraySTRING, METH_VARARGS },
	 { (char *)"ArraySTRING_Empty", _wrap_ArraySTRING_Empty, METH_VARARGS },
	 { (char *)"ArraySTRING_Clear", _wrap_ArraySTRING_Clear, METH_VARARGS },
	 { (char *)"ArraySTRING_Count", _wrap_ArraySTRING_Count, METH_VARARGS },
	 { (char *)"ArraySTRING_IsEmpty", _wrap_ArraySTRING_IsEmpty, METH_VARARGS },
	 { (char *)"ArraySTRING_Item", _wrap_ArraySTRING_Item, METH_VARARGS },
	 { (char *)"ArraySTRING_GetEntry", _wrap_ArraySTRING_GetEntry, METH_VARARGS },
	 { (char *)"ArraySTRING___getitem__", _wrap_ArraySTRING___getitem__, METH_VARARGS },
	 { (char *)"ArraySTRING_SetEntry", _wrap_ArraySTRING_SetEntry, METH_VARARGS },
	 { (char *)"ArraySTRING_Add", _wrap_ArraySTRING_Add, METH_VARARGS },
	 { (char *)"ArraySTRING_Insert", _wrap_ArraySTRING_Insert, METH_VARARGS },
	 { (char *)"ArraySTRING_Replace", _wrap_ArraySTRING_Replace, METH_VARARGS },
	 { (char *)"ArraySTRING_Remove", _wrap_ArraySTRING_Remove, METH_VARARGS },
	 { (char *)"ArraySTRING_getself", _wrap_ArraySTRING_getself, METH_VARARGS },
	 { (char *)"ArraySTRING_asTuple", _wrap_ArraySTRING_asTuple, METH_VARARGS },
	 { (char *)"ArraySTRING_Join", _wrap_ArraySTRING_Join, METH_VARARGS },
	 { (char *)"ArraySTRING_swigregister", ArraySTRING_swigregister, METH_VARARGS },
	 { (char *)"new_IDBOBJ", _wrap_new_IDBOBJ, METH_VARARGS },
	 { (char *)"delete_IDBOBJ", _wrap_delete_IDBOBJ, METH_VARARGS },
	 { (char *)"IDBOBJ_swigregister", IDBOBJ_swigregister, METH_VARARGS },
	 { (char *)"new_INDEX_ID", _wrap_new_INDEX_ID, METH_VARARGS },
	 { (char *)"delete_INDEX_ID", _wrap_delete_INDEX_ID, METH_VARARGS },
	 { (char *)"INDEX_ID_GetIndex", _wrap_INDEX_ID_GetIndex, METH_VARARGS },
	 { (char *)"INDEX_ID_SetIndex", _wrap_INDEX_ID_SetIndex, METH_VARARGS },
	 { (char *)"INDEX_ID_SetMdtIndex", _wrap_INDEX_ID_SetMdtIndex, METH_VARARGS },
	 { (char *)"INDEX_ID_GetMdtIndex", _wrap_INDEX_ID_GetMdtIndex, METH_VARARGS },
	 { (char *)"INDEX_ID_SetVirtualIndex", _wrap_INDEX_ID_SetVirtualIndex, METH_VARARGS },
	 { (char *)"INDEX_ID_GetVirtualIndex", _wrap_INDEX_ID_GetVirtualIndex, METH_VARARGS },
	 { (char *)"INDEX_ID_Equals", _wrap_INDEX_ID_Equals, METH_VARARGS },
	 { (char *)"INDEX_ID_Compare", _wrap_INDEX_ID_Compare, METH_VARARGS },
	 { (char *)"INDEX_ID_swigregister", INDEX_ID_swigregister, METH_VARARGS },
	 { (char *)"new_MDTREC", _wrap_new_MDTREC, METH_VARARGS },
	 { (char *)"MDTREC_SetCategory", _wrap_MDTREC_SetCategory, METH_VARARGS },
	 { (char *)"MDTREC_GetCategory", _wrap_MDTREC_GetCategory, METH_VARARGS },
	 { (char *)"MDTREC_SetPriority", _wrap_MDTREC_SetPriority, METH_VARARGS },
	 { (char *)"MDTREC_GetPriority", _wrap_MDTREC_GetPriority, METH_VARARGS },
	 { (char *)"MDTREC_SetKey", _wrap_MDTREC_SetKey, METH_VARARGS },
	 { (char *)"MDTREC_GetKey", _wrap_MDTREC_GetKey, METH_VARARGS },
	 { (char *)"MDTREC_SetDocumentType", _wrap_MDTREC_SetDocumentType, METH_VARARGS },
	 { (char *)"MDTREC_GetDocumentType", _wrap_MDTREC_GetDocumentType, METH_VARARGS },
	 { (char *)"MDTREC_SetPathName", _wrap_MDTREC_SetPathName, METH_VARARGS },
	 { (char *)"MDTREC_GetPathName", _wrap_MDTREC_GetPathName, METH_VARARGS },
	 { (char *)"MDTREC_SetFileName", _wrap_MDTREC_SetFileName, METH_VARARGS },
	 { (char *)"MDTREC_GetFileName", _wrap_MDTREC_GetFileName, METH_VARARGS },
	 { (char *)"MDTREC_SetFullFileName", _wrap_MDTREC_SetFullFileName, METH_VARARGS },
	 { (char *)"MDTREC_GetFullFileName", _wrap_MDTREC_GetFullFileName, METH_VARARGS },
	 { (char *)"MDTREC_SetGlobalFileStart", _wrap_MDTREC_SetGlobalFileStart, METH_VARARGS },
	 { (char *)"MDTREC_GetGlobalFileStart", _wrap_MDTREC_GetGlobalFileStart, METH_VARARGS },
	 { (char *)"MDTREC_SetLocalRecordStart", _wrap_MDTREC_SetLocalRecordStart, METH_VARARGS },
	 { (char *)"MDTREC_GetLocalRecordStart", _wrap_MDTREC_GetLocalRecordStart, METH_VARARGS },
	 { (char *)"MDTREC_SetLocalRecordEnd", _wrap_MDTREC_SetLocalRecordEnd, METH_VARARGS },
	 { (char *)"MDTREC_GetLocalRecordEnd", _wrap_MDTREC_GetLocalRecordEnd, METH_VARARGS },
	 { (char *)"MDTREC_SetLocale", _wrap_MDTREC_SetLocale, METH_VARARGS },
	 { (char *)"MDTREC_GetLocale", _wrap_MDTREC_GetLocale, METH_VARARGS },
	 { (char *)"MDTREC_SetDate", _wrap_MDTREC_SetDate, METH_VARARGS },
	 { (char *)"MDTREC_GetDate", _wrap_MDTREC_GetDate, METH_VARARGS },
	 { (char *)"MDTREC_SetDateModified", _wrap_MDTREC_SetDateModified, METH_VARARGS },
	 { (char *)"MDTREC_GetDateModified", _wrap_MDTREC_GetDateModified, METH_VARARGS },
	 { (char *)"MDTREC_SetDateCreated", _wrap_MDTREC_SetDateCreated, METH_VARARGS },
	 { (char *)"MDTREC_GetDateCreated", _wrap_MDTREC_GetDateCreated, METH_VARARGS },
	 { (char *)"MDTREC_SetDeleted", _wrap_MDTREC_SetDeleted, METH_VARARGS },
	 { (char *)"MDTREC_GetDeleted", _wrap_MDTREC_GetDeleted, METH_VARARGS },
	 { (char *)"MDTREC_FlipBytes", _wrap_MDTREC_FlipBytes, METH_VARARGS },
	 { (char *)"MDTREC_Dump", _wrap_MDTREC_Dump, METH_VARARGS },
	 { (char *)"delete_MDTREC", _wrap_delete_MDTREC, METH_VARARGS },
	 { (char *)"MDTREC_swigregister", MDTREC_swigregister, METH_VARARGS },
	 { (char *)"new_MDT", _wrap_new_MDT, METH_VARARGS },
	 { (char *)"MDT_GetFileStem", _wrap_MDT_GetFileStem, METH_VARARGS },
	 { (char *)"MDT_SetEntry", _wrap_MDT_SetEntry, METH_VARARGS },
	 { (char *)"MDT_LookupByKey", _wrap_MDT_LookupByKey, METH_VARARGS },
	 { (char *)"MDT_GetEntry", _wrap_MDT_GetEntry, METH_VARARGS },
	 { (char *)"MDT_Delete", _wrap_MDT_Delete, METH_VARARGS },
	 { (char *)"MDT_UnDelete", _wrap_MDT_UnDelete, METH_VARARGS },
	 { (char *)"MDT_IsDeleted", _wrap_MDT_IsDeleted, METH_VARARGS },
	 { (char *)"MDT_GetTotalEntries", _wrap_MDT_GetTotalEntries, METH_VARARGS },
	 { (char *)"MDT_GetTotalDeleted", _wrap_MDT_GetTotalDeleted, METH_VARARGS },
	 { (char *)"MDT_GetChanged", _wrap_MDT_GetChanged, METH_VARARGS },
	 { (char *)"MDT_RemoveDeleted", _wrap_MDT_RemoveDeleted, METH_VARARGS },
	 { (char *)"MDT_Ok", _wrap_MDT_Ok, METH_VARARGS },
	 { (char *)"delete_MDT", _wrap_delete_MDT, METH_VARARGS },
	 { (char *)"MDT_swigregister", MDT_swigregister, METH_VARARGS },
	 { (char *)"new_FC", _wrap_new_FC, METH_VARARGS },
	 { (char *)"FC_Write", _wrap_FC_Write, METH_VARARGS },
	 { (char *)"FC_Read", _wrap_FC_Read, METH_VARARGS },
	 { (char *)"FC_SetFieldStart", _wrap_FC_SetFieldStart, METH_VARARGS },
	 { (char *)"FC_SetFieldEnd", _wrap_FC_SetFieldEnd, METH_VARARGS },
	 { (char *)"FC_GetFieldStart", _wrap_FC_GetFieldStart, METH_VARARGS },
	 { (char *)"FC_GetFieldEnd", _wrap_FC_GetFieldEnd, METH_VARARGS },
	 { (char *)"FC_GetLength", _wrap_FC_GetLength, METH_VARARGS },
	 { (char *)"FC_Compare", _wrap_FC_Compare, METH_VARARGS },
	 { (char *)"FC_Contains", _wrap_FC_Contains, METH_VARARGS },
	 { (char *)"FC_asTuple", _wrap_FC_asTuple, METH_VARARGS },
	 { (char *)"FC_FlipBytes", _wrap_FC_FlipBytes, METH_VARARGS },
	 { (char *)"delete_FC", _wrap_delete_FC, METH_VARARGS },
	 { (char *)"FC_swigregister", FC_swigregister, METH_VARARGS },
	 { (char *)"new_TREENODE", _wrap_new_TREENODE, METH_VARARGS },
	 { (char *)"delete_TREENODE", _wrap_delete_TREENODE, METH_VARARGS },
	 { (char *)"TREENODE_Name", _wrap_TREENODE_Name, METH_VARARGS },
	 { (char *)"TREENODE_Fc", _wrap_TREENODE_Fc, METH_VARARGS },
	 { (char *)"TREENODE_swigregister", TREENODE_swigregister, METH_VARARGS },
	 { (char *)"new_NODETREE", _wrap_new_NODETREE, METH_VARARGS },
	 { (char *)"NODETREE_AddEntry", _wrap_NODETREE_AddEntry, METH_VARARGS },
	 { (char *)"NODETREE_Clear", _wrap_NODETREE_Clear, METH_VARARGS },
	 { (char *)"NODETREE_Reverse", _wrap_NODETREE_Reverse, METH_VARARGS },
	 { (char *)"NODETREE_Sort", _wrap_NODETREE_Sort, METH_VARARGS },
	 { (char *)"NODETREE_IsSorted", _wrap_NODETREE_IsSorted, METH_VARARGS },
	 { (char *)"NODETREE_IsEmpty", _wrap_NODETREE_IsEmpty, METH_VARARGS },
	 { (char *)"NODETREE_GetEntry", _wrap_NODETREE_GetEntry, METH_VARARGS },
	 { (char *)"NODETREE_XMLNodeTree", _wrap_NODETREE_XMLNodeTree, METH_VARARGS },
	 { (char *)"delete_NODETREE", _wrap_delete_NODETREE, METH_VARARGS },
	 { (char *)"NODETREE_swigregister", NODETREE_swigregister, METH_VARARGS },
	 { (char *)"new_RESULT", _wrap_new_RESULT, METH_VARARGS },
	 { (char *)"RESULT_Write", _wrap_RESULT_Write, METH_VARARGS },
	 { (char *)"RESULT_Read", _wrap_RESULT_Read, METH_VARARGS },
	 { (char *)"RESULT_SetIndex", _wrap_RESULT_SetIndex, METH_VARARGS },
	 { (char *)"RESULT_GetIndex", _wrap_RESULT_GetIndex, METH_VARARGS },
	 { (char *)"RESULT_SetMdtIndex", _wrap_RESULT_SetMdtIndex, METH_VARARGS },
	 { (char *)"RESULT_GetMdtIndex", _wrap_RESULT_GetMdtIndex, METH_VARARGS },
	 { (char *)"RESULT_SetVirtualIndex", _wrap_RESULT_SetVirtualIndex, METH_VARARGS },
	 { (char *)"RESULT_GetVirtualIndex", _wrap_RESULT_GetVirtualIndex, METH_VARARGS },
	 { (char *)"RESULT_GetCategory", _wrap_RESULT_GetCategory, METH_VARARGS },
	 { (char *)"RESULT_SetCategory", _wrap_RESULT_SetCategory, METH_VARARGS },
	 { (char *)"RESULT_SetKey", _wrap_RESULT_SetKey, METH_VARARGS },
	 { (char *)"RESULT_GetKey", _wrap_RESULT_GetKey, METH_VARARGS },
	 { (char *)"RESULT_GetGlobalKey", _wrap_RESULT_GetGlobalKey, METH_VARARGS },
	 { (char *)"RESULT_GetLanguageCode", _wrap_RESULT_GetLanguageCode, METH_VARARGS },
	 { (char *)"RESULT_GetCharsetCode", _wrap_RESULT_GetCharsetCode, METH_VARARGS },
	 { (char *)"RESULT_GetLanguageName", _wrap_RESULT_GetLanguageName, METH_VARARGS },
	 { (char *)"RESULT_GetCharsetName", _wrap_RESULT_GetCharsetName, METH_VARARGS },
	 { (char *)"RESULT_GetFullFileName", _wrap_RESULT_GetFullFileName, METH_VARARGS },
	 { (char *)"RESULT_GetPathName", _wrap_RESULT_GetPathName, METH_VARARGS },
	 { (char *)"RESULT_GetFileName", _wrap_RESULT_GetFileName, METH_VARARGS },
	 { (char *)"RESULT_GetDoctype", _wrap_RESULT_GetDoctype, METH_VARARGS },
	 { (char *)"RESULT_GetRecordStart", _wrap_RESULT_GetRecordStart, METH_VARARGS },
	 { (char *)"RESULT_GetRecordEnd", _wrap_RESULT_GetRecordEnd, METH_VARARGS },
	 { (char *)"RESULT_GetLength", _wrap_RESULT_GetLength, METH_VARARGS },
	 { (char *)"RESULT_GetRecordSize", _wrap_RESULT_GetRecordSize, METH_VARARGS },
	 { (char *)"RESULT_GetScore", _wrap_RESULT_GetScore, METH_VARARGS },
	 { (char *)"RESULT_GetAuxCount", _wrap_RESULT_GetAuxCount, METH_VARARGS },
	 { (char *)"RESULT_GetHitTotal", _wrap_RESULT_GetHitTotal, METH_VARARGS },
	 { (char *)"RESULT_GetDate", _wrap_RESULT_GetDate, METH_VARARGS },
	 { (char *)"RESULT_GetDateModified", _wrap_RESULT_GetDateModified, METH_VARARGS },
	 { (char *)"RESULT_GetDateCreated", _wrap_RESULT_GetDateCreated, METH_VARARGS },
	 { (char *)"RESULT_GetHitTable", _wrap_RESULT_GetHitTable, METH_VARARGS },
	 { (char *)"RESULT_GetRefcount_", _wrap_RESULT_GetRefcount_, METH_VARARGS },
	 { (char *)"RESULT_XMLHitTable", _wrap_RESULT_XMLHitTable, METH_VARARGS },
	 { (char *)"delete_RESULT", _wrap_delete_RESULT, METH_VARARGS },
	 { (char *)"RESULT_swigregister", RESULT_swigregister, METH_VARARGS },
	 { (char *)"new_IRSET", _wrap_new_IRSET, METH_VARARGS },
	 { (char *)"IRSET_getself", _wrap_IRSET_getself, METH_VARARGS },
	 { (char *)"IRSET_Write", _wrap_IRSET_Write, METH_VARARGS },
	 { (char *)"IRSET_Read", _wrap_IRSET_Read, METH_VARARGS },
	 { (char *)"IRSET_LoadTable", _wrap_IRSET_LoadTable, METH_VARARGS },
	 { (char *)"IRSET_SaveTable", _wrap_IRSET_SaveTable, METH_VARARGS },
	 { (char *)"IRSET_GetRset", _wrap_IRSET_GetRset, METH_VARARGS },
	 { (char *)"IRSET_Fill", _wrap_IRSET_Fill, METH_VARARGS },
	 { (char *)"IRSET_GetTotalEntries", _wrap_IRSET_GetTotalEntries, METH_VARARGS },
	 { (char *)"IRSET_GetHitTotal", _wrap_IRSET_GetHitTotal, METH_VARARGS },
	 { (char *)"IRSET_Or", _wrap_IRSET_Or, METH_VARARGS },
	 { (char *)"IRSET_Nor", _wrap_IRSET_Nor, METH_VARARGS },
	 { (char *)"IRSET_And", _wrap_IRSET_And, METH_VARARGS },
	 { (char *)"IRSET_Nand", _wrap_IRSET_Nand, METH_VARARGS },
	 { (char *)"IRSET_AndNot", _wrap_IRSET_AndNot, METH_VARARGS },
	 { (char *)"IRSET_Xor", _wrap_IRSET_Xor, METH_VARARGS },
	 { (char *)"IRSET_Near", _wrap_IRSET_Near, METH_VARARGS },
	 { (char *)"IRSET_Far", _wrap_IRSET_Far, METH_VARARGS },
	 { (char *)"IRSET_After", _wrap_IRSET_After, METH_VARARGS },
	 { (char *)"IRSET_Before", _wrap_IRSET_Before, METH_VARARGS },
	 { (char *)"IRSET_Adj", _wrap_IRSET_Adj, METH_VARARGS },
	 { (char *)"IRSET_Follows", _wrap_IRSET_Follows, METH_VARARGS },
	 { (char *)"IRSET_Precedes", _wrap_IRSET_Precedes, METH_VARARGS },
	 { (char *)"IRSET_Neighbor", _wrap_IRSET_Neighbor, METH_VARARGS },
	 { (char *)"IRSET_Peer", _wrap_IRSET_Peer, METH_VARARGS },
	 { (char *)"IRSET_Within", _wrap_IRSET_Within, METH_VARARGS },
	 { (char *)"IRSET_XWithin", _wrap_IRSET_XWithin, METH_VARARGS },
	 { (char *)"IRSET_Inside", _wrap_IRSET_Inside, METH_VARARGS },
	 { (char *)"IRSET_WithinXChars", _wrap_IRSET_WithinXChars, METH_VARARGS },
	 { (char *)"IRSET_WithinXChars_Before", _wrap_IRSET_WithinXChars_Before, METH_VARARGS },
	 { (char *)"IRSET_WithinXChars_After", _wrap_IRSET_WithinXChars_After, METH_VARARGS },
	 { (char *)"IRSET_WithinXPercent", _wrap_IRSET_WithinXPercent, METH_VARARGS },
	 { (char *)"IRSET_WithinXPercent_Before", _wrap_IRSET_WithinXPercent_Before, METH_VARARGS },
	 { (char *)"IRSET_WithinXPercent_After", _wrap_IRSET_WithinXPercent_After, METH_VARARGS },
	 { (char *)"IRSET_Not", _wrap_IRSET_Not, METH_VARARGS },
	 { (char *)"IRSET_ComputeScores", _wrap_IRSET_ComputeScores, METH_VARARGS },
	 { (char *)"IRSET_SortBy", _wrap_IRSET_SortBy, METH_VARARGS },
	 { (char *)"IRSET_GetMaxScore", _wrap_IRSET_GetMaxScore, METH_VARARGS },
	 { (char *)"IRSET_GetMinScore", _wrap_IRSET_GetMinScore, METH_VARARGS },
	 { (char *)"delete_IRSET", _wrap_delete_IRSET, METH_VARARGS },
	 { (char *)"IRSET_swigregister", IRSET_swigregister, METH_VARARGS },
	 { (char *)"new_RSET", _wrap_new_RSET, METH_VARARGS },
	 { (char *)"RSET_getself", _wrap_RSET_getself, METH_VARARGS },
	 { (char *)"RSET_Write", _wrap_RSET_Write, METH_VARARGS },
	 { (char *)"RSET_Read", _wrap_RSET_Read, METH_VARARGS },
	 { (char *)"RSET_Cat", _wrap_RSET_Cat, METH_VARARGS },
	 { (char *)"RSET_LoadTable", _wrap_RSET_LoadTable, METH_VARARGS },
	 { (char *)"RSET_SaveTable", _wrap_RSET_SaveTable, METH_VARARGS },
	 { (char *)"RSET_GetMaxScore", _wrap_RSET_GetMaxScore, METH_VARARGS },
	 { (char *)"RSET_GetMinScore", _wrap_RSET_GetMinScore, METH_VARARGS },
	 { (char *)"RSET_FilterDateRange", _wrap_RSET_FilterDateRange, METH_VARARGS },
	 { (char *)"RSET_GetEntry", _wrap_RSET_GetEntry, METH_VARARGS },
	 { (char *)"RSET_GetScaledScore", _wrap_RSET_GetScaledScore, METH_VARARGS },
	 { (char *)"RSET_GetHitTotal", _wrap_RSET_GetHitTotal, METH_VARARGS },
	 { (char *)"RSET_Find", _wrap_RSET_Find, METH_VARARGS },
	 { (char *)"RSET_GetTotalEntries", _wrap_RSET_GetTotalEntries, METH_VARARGS },
	 { (char *)"RSET_SortBy", _wrap_RSET_SortBy, METH_VARARGS },
	 { (char *)"RSET_SortByCategoryMagnetism", _wrap_RSET_SortByCategoryMagnetism, METH_VARARGS },
	 { (char *)"RSET_Reduce", _wrap_RSET_Reduce, METH_VARARGS },
	 { (char *)"RSET_DropByTerms", _wrap_RSET_DropByTerms, METH_VARARGS },
	 { (char *)"RSET_DropByScore", _wrap_RSET_DropByScore, METH_VARARGS },
	 { (char *)"RSET___getitem__", _wrap_RSET___getitem__, METH_VARARGS },
	 { (char *)"delete_RSET", _wrap_delete_RSET, METH_VARARGS },
	 { (char *)"RSET_swigregister", RSET_swigregister, METH_VARARGS },
	 { (char *)"new_INFIX2RPN", _wrap_new_INFIX2RPN, METH_VARARGS },
	 { (char *)"INFIX2RPN_Parse", _wrap_INFIX2RPN_Parse, METH_VARARGS },
	 { (char *)"INFIX2RPN_InputParsedOK", _wrap_INFIX2RPN_InputParsedOK, METH_VARARGS },
	 { (char *)"INFIX2RPN_GetErrorMessage", _wrap_INFIX2RPN_GetErrorMessage, METH_VARARGS },
	 { (char *)"delete_INFIX2RPN", _wrap_delete_INFIX2RPN, METH_VARARGS },
	 { (char *)"INFIX2RPN_swigregister", INFIX2RPN_swigregister, METH_VARARGS },
	 { (char *)"new_SQUERY", _wrap_new_SQUERY, METH_VARARGS },
	 { (char *)"SQUERY_Write", _wrap_SQUERY_Write, METH_VARARGS },
	 { (char *)"SQUERY_Read", _wrap_SQUERY_Read, METH_VARARGS },
	 { (char *)"SQUERY_GetTotalTerms", _wrap_SQUERY_GetTotalTerms, METH_VARARGS },
	 { (char *)"SQUERY_SetRelevantTerm", _wrap_SQUERY_SetRelevantTerm, METH_VARARGS },
	 { (char *)"SQUERY_SetInfixTerm", _wrap_SQUERY_SetInfixTerm, METH_VARARGS },
	 { (char *)"SQUERY_SetRpnTerm", _wrap_SQUERY_SetRpnTerm, METH_VARARGS },
	 { (char *)"SQUERY_SetQueryTerm", _wrap_SQUERY_SetQueryTerm, METH_VARARGS },
	 { (char *)"SQUERY_LastErrorMessage", _wrap_SQUERY_LastErrorMessage, METH_VARARGS },
	 { (char *)"SQUERY_GetRpnTerm", _wrap_SQUERY_GetRpnTerm, METH_VARARGS },
	 { (char *)"SQUERY_Cat", _wrap_SQUERY_Cat, METH_VARARGS },
	 { (char *)"SQUERY_OpenThesaurus", _wrap_SQUERY_OpenThesaurus, METH_VARARGS },
	 { (char *)"SQUERY_CloseThesaurus", _wrap_SQUERY_CloseThesaurus, METH_VARARGS },
	 { (char *)"SQUERY_ExpandQuery", _wrap_SQUERY_ExpandQuery, METH_VARARGS },
	 { (char *)"delete_SQUERY", _wrap_delete_SQUERY, METH_VARARGS },
	 { (char *)"SQUERY_swigregister", SQUERY_swigregister, METH_VARARGS },
	 { (char *)"new_SRCH_DATE", _wrap_new_SRCH_DATE, METH_VARARGS },
	 { (char *)"SRCH_DATE_Write", _wrap_SRCH_DATE_Write, METH_VARARGS },
	 { (char *)"SRCH_DATE_Read", _wrap_SRCH_DATE_Read, METH_VARARGS },
	 { (char *)"SRCH_DATE___repr__", _wrap_SRCH_DATE___repr__, METH_VARARGS },
	 { (char *)"SRCH_DATE_Plus", _wrap_SRCH_DATE_Plus, METH_VARARGS },
	 { (char *)"SRCH_DATE_Minus", _wrap_SRCH_DATE_Minus, METH_VARARGS },
	 { (char *)"SRCH_DATE_PlusNseconds", _wrap_SRCH_DATE_PlusNseconds, METH_VARARGS },
	 { (char *)"SRCH_DATE_PlusNminutes", _wrap_SRCH_DATE_PlusNminutes, METH_VARARGS },
	 { (char *)"SRCH_DATE_PlusNhours", _wrap_SRCH_DATE_PlusNhours, METH_VARARGS },
	 { (char *)"SRCH_DATE_PlusNdays", _wrap_SRCH_DATE_PlusNdays, METH_VARARGS },
	 { (char *)"SRCH_DATE_PlusNweeks", _wrap_SRCH_DATE_PlusNweeks, METH_VARARGS },
	 { (char *)"SRCH_DATE_PlusNmonths", _wrap_SRCH_DATE_PlusNmonths, METH_VARARGS },
	 { (char *)"SRCH_DATE_PlusNyears", _wrap_SRCH_DATE_PlusNyears, METH_VARARGS },
	 { (char *)"SRCH_DATE_MinusNseconds", _wrap_SRCH_DATE_MinusNseconds, METH_VARARGS },
	 { (char *)"SRCH_DATE_MinusNminutes", _wrap_SRCH_DATE_MinusNminutes, METH_VARARGS },
	 { (char *)"SRCH_DATE_MinusNhours", _wrap_SRCH_DATE_MinusNhours, METH_VARARGS },
	 { (char *)"SRCH_DATE_MinusNdays", _wrap_SRCH_DATE_MinusNdays, METH_VARARGS },
	 { (char *)"SRCH_DATE_MinusNweeks", _wrap_SRCH_DATE_MinusNweeks, METH_VARARGS },
	 { (char *)"SRCH_DATE_MinusNmonths", _wrap_SRCH_DATE_MinusNmonths, METH_VARARGS },
	 { (char *)"SRCH_DATE_MinusNyears", _wrap_SRCH_DATE_MinusNyears, METH_VARARGS },
	 { (char *)"SRCH_DATE_Tommorrow", _wrap_SRCH_DATE_Tommorrow, METH_VARARGS },
	 { (char *)"SRCH_DATE_Yesterday", _wrap_SRCH_DATE_Yesterday, METH_VARARGS },
	 { (char *)"SRCH_DATE_NextWeek", _wrap_SRCH_DATE_NextWeek, METH_VARARGS },
	 { (char *)"SRCH_DATE_LastWeek", _wrap_SRCH_DATE_LastWeek, METH_VARARGS },
	 { (char *)"SRCH_DATE_NextMonth", _wrap_SRCH_DATE_NextMonth, METH_VARARGS },
	 { (char *)"SRCH_DATE_LastMonth", _wrap_SRCH_DATE_LastMonth, METH_VARARGS },
	 { (char *)"SRCH_DATE_NextYear", _wrap_SRCH_DATE_NextYear, METH_VARARGS },
	 { (char *)"SRCH_DATE_LastYear", _wrap_SRCH_DATE_LastYear, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetValue", _wrap_SRCH_DATE_GetValue, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsYearDate", _wrap_SRCH_DATE_IsYearDate, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsMonthDate", _wrap_SRCH_DATE_IsMonthDate, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsDayDate", _wrap_SRCH_DATE_IsDayDate, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsBogusDate", _wrap_SRCH_DATE_IsBogusDate, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsValidDate", _wrap_SRCH_DATE_IsValidDate, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsLeapYear", _wrap_SRCH_DATE_IsLeapYear, METH_VARARGS },
	 { (char *)"SRCH_DATE_Ok", _wrap_SRCH_DATE_Ok, METH_VARARGS },
	 { (char *)"SRCH_DATE_TrimToMonth", _wrap_SRCH_DATE_TrimToMonth, METH_VARARGS },
	 { (char *)"SRCH_DATE_TrimToYear", _wrap_SRCH_DATE_TrimToYear, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetToYearStart", _wrap_SRCH_DATE_SetToYearStart, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetToYearEnd", _wrap_SRCH_DATE_SetToYearEnd, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetToMonthStart", _wrap_SRCH_DATE_SetToMonthStart, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetToMonthEnd", _wrap_SRCH_DATE_SetToMonthEnd, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetToDayStart", _wrap_SRCH_DATE_SetToDayStart, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetToDayEnd", _wrap_SRCH_DATE_SetToDayEnd, METH_VARARGS },
	 { (char *)"SRCH_DATE_PromoteToMonthStart", _wrap_SRCH_DATE_PromoteToMonthStart, METH_VARARGS },
	 { (char *)"SRCH_DATE_PromoteToMonthEnd", _wrap_SRCH_DATE_PromoteToMonthEnd, METH_VARARGS },
	 { (char *)"SRCH_DATE_PromoteToDayStart", _wrap_SRCH_DATE_PromoteToDayStart, METH_VARARGS },
	 { (char *)"SRCH_DATE_PromoteToDayEnd", _wrap_SRCH_DATE_PromoteToDayEnd, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetTodaysDate", _wrap_SRCH_DATE_GetTodaysDate, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetNow", _wrap_SRCH_DATE_SetNow, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetYear", _wrap_SRCH_DATE_SetYear, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetMonth", _wrap_SRCH_DATE_SetMonth, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetDay", _wrap_SRCH_DATE_SetDay, METH_VARARGS },
	 { (char *)"SRCH_DATE_Year", _wrap_SRCH_DATE_Year, METH_VARARGS },
	 { (char *)"SRCH_DATE_Month", _wrap_SRCH_DATE_Month, METH_VARARGS },
	 { (char *)"SRCH_DATE_Day", _wrap_SRCH_DATE_Day, METH_VARARGS },
	 { (char *)"SRCH_DATE_DayOfWeek", _wrap_SRCH_DATE_DayOfWeek, METH_VARARGS },
	 { (char *)"SRCH_DATE_DayOfYear", _wrap_SRCH_DATE_DayOfYear, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetFirstDayOfMonth", _wrap_SRCH_DATE_GetFirstDayOfMonth, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetWeekOfMonth", _wrap_SRCH_DATE_GetWeekOfMonth, METH_VARARGS },
	 { (char *)"SRCH_DATE_WeekOfYear", _wrap_SRCH_DATE_WeekOfYear, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetDaysInMonth", _wrap_SRCH_DATE_GetDaysInMonth, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetJulianDate", _wrap_SRCH_DATE_GetJulianDate, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetTimeSeconds", _wrap_SRCH_DATE_GetTimeSeconds, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetTimeOfFile", _wrap_SRCH_DATE_SetTimeOfFile, METH_VARARGS },
	 { (char *)"SRCH_DATE_SetTimeOfFileCreation", _wrap_SRCH_DATE_SetTimeOfFileCreation, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetTimeOfFile", _wrap_SRCH_DATE_GetTimeOfFile, METH_VARARGS },
	 { (char *)"SRCH_DATE_GetTimeOfFileCreation", _wrap_SRCH_DATE_GetTimeOfFileCreation, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsBefore", _wrap_SRCH_DATE_IsBefore, METH_VARARGS },
	 { (char *)"SRCH_DATE_Equals", _wrap_SRCH_DATE_Equals, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsDuring", _wrap_SRCH_DATE_IsDuring, METH_VARARGS },
	 { (char *)"SRCH_DATE_IsAfter", _wrap_SRCH_DATE_IsAfter, METH_VARARGS },
	 { (char *)"SRCH_DATE_ISOdate", _wrap_SRCH_DATE_ISOdate, METH_VARARGS },
	 { (char *)"SRCH_DATE_RFCdate", _wrap_SRCH_DATE_RFCdate, METH_VARARGS },
	 { (char *)"SRCH_DATE_ANSIdate", _wrap_SRCH_DATE_ANSIdate, METH_VARARGS },
	 { (char *)"SRCH_DATE_LCdate", _wrap_SRCH_DATE_LCdate, METH_VARARGS },
	 { (char *)"SRCH_DATE_Strftime", _wrap_SRCH_DATE_Strftime, METH_VARARGS },
	 { (char *)"SRCH_DATE___cmp__", _wrap_SRCH_DATE___cmp__, METH_VARARGS },
	 { (char *)"delete_SRCH_DATE", _wrap_delete_SRCH_DATE, METH_VARARGS },
	 { (char *)"SRCH_DATE_swigregister", SRCH_DATE_swigregister, METH_VARARGS },
	 { (char *)"new_DATERANGE", _wrap_new_DATERANGE, METH_VARARGS },
	 { (char *)"DATERANGE_GetStart", _wrap_DATERANGE_GetStart, METH_VARARGS },
	 { (char *)"DATERANGE_GetEnd", _wrap_DATERANGE_GetEnd, METH_VARARGS },
	 { (char *)"DATERANGE_SetStart", _wrap_DATERANGE_SetStart, METH_VARARGS },
	 { (char *)"DATERANGE_SetEnd", _wrap_DATERANGE_SetEnd, METH_VARARGS },
	 { (char *)"DATERANGE_Ok", _wrap_DATERANGE_Ok, METH_VARARGS },
	 { (char *)"DATERANGE_Defined", _wrap_DATERANGE_Defined, METH_VARARGS },
	 { (char *)"DATERANGE_Contains", _wrap_DATERANGE_Contains, METH_VARARGS },
	 { (char *)"DATERANGE_ISO", _wrap_DATERANGE_ISO, METH_VARARGS },
	 { (char *)"DATERANGE_RFC", _wrap_DATERANGE_RFC, METH_VARARGS },
	 { (char *)"DATERANGE_Strftime", _wrap_DATERANGE_Strftime, METH_VARARGS },
	 { (char *)"DATERANGE_Write", _wrap_DATERANGE_Write, METH_VARARGS },
	 { (char *)"DATERANGE_Read", _wrap_DATERANGE_Read, METH_VARARGS },
	 { (char *)"delete_DATERANGE", _wrap_delete_DATERANGE, METH_VARARGS },
	 { (char *)"DATERANGE_asTuple", _wrap_DATERANGE_asTuple, METH_VARARGS },
	 { (char *)"DATERANGE_Duration", _wrap_DATERANGE_Duration, METH_VARARGS },
	 { (char *)"DATERANGE_swigregister", DATERANGE_swigregister, METH_VARARGS },
	 { (char *)"new_SCANOBJ", _wrap_new_SCANOBJ, METH_VARARGS },
	 { (char *)"SCANOBJ_Frequency", _wrap_SCANOBJ_Frequency, METH_VARARGS },
	 { (char *)"SCANOBJ_Term", _wrap_SCANOBJ_Term, METH_VARARGS },
	 { (char *)"delete_SCANOBJ", _wrap_delete_SCANOBJ, METH_VARARGS },
	 { (char *)"SCANOBJ_asTuple", _wrap_SCANOBJ_asTuple, METH_VARARGS },
	 { (char *)"SCANOBJ_swigregister", SCANOBJ_swigregister, METH_VARARGS },
	 { (char *)"new_SCANLIST", _wrap_new_SCANLIST, METH_VARARGS },
	 { (char *)"SCANLIST_Reverse", _wrap_SCANLIST_Reverse, METH_VARARGS },
	 { (char *)"SCANLIST_IsEmpty", _wrap_SCANLIST_IsEmpty, METH_VARARGS },
	 { (char *)"SCANLIST_GetTotalEntries", _wrap_SCANLIST_GetTotalEntries, METH_VARARGS },
	 { (char *)"SCANLIST_GetEntry", _wrap_SCANLIST_GetEntry, METH_VARARGS },
	 { (char *)"delete_SCANLIST", _wrap_delete_SCANLIST, METH_VARARGS },
	 { (char *)"SCANLIST_Get", _wrap_SCANLIST_Get, METH_VARARGS },
	 { (char *)"SCANLIST___getitem__", _wrap_SCANLIST___getitem__, METH_VARARGS },
	 { (char *)"SCANLIST_swigregister", SCANLIST_swigregister, METH_VARARGS },
	 { (char *)"new_DOCTYPE_ID", _wrap_new_DOCTYPE_ID, METH_VARARGS },
	 { (char *)"DOCTYPE_ID_DocumentType", _wrap_DOCTYPE_ID_DocumentType, METH_VARARGS },
	 { (char *)"DOCTYPE_ID_Set", _wrap_DOCTYPE_ID_Set, METH_VARARGS },
	 { (char *)"DOCTYPE_ID_Get", _wrap_DOCTYPE_ID_Get, METH_VARARGS },
	 { (char *)"DOCTYPE_ID_c_str", _wrap_DOCTYPE_ID_c_str, METH_VARARGS },
	 { (char *)"DOCTYPE_ID_IsDefined", _wrap_DOCTYPE_ID_IsDefined, METH_VARARGS },
	 { (char *)"DOCTYPE_ID_Equals", _wrap_DOCTYPE_ID_Equals, METH_VARARGS },
	 { (char *)"delete_DOCTYPE_ID", _wrap_delete_DOCTYPE_ID, METH_VARARGS },
	 { (char *)"DOCTYPE_ID_swigregister", DOCTYPE_ID_swigregister, METH_VARARGS },
	 { (char *)"new_DOC_ID", _wrap_new_DOC_ID, METH_VARARGS },
	 { (char *)"DOC_ID_Equals", _wrap_DOC_ID_Equals, METH_VARARGS },
	 { (char *)"DOC_ID_Compare", _wrap_DOC_ID_Compare, METH_VARARGS },
	 { (char *)"DOC_ID_GlobalKey", _wrap_DOC_ID_GlobalKey, METH_VARARGS },
	 { (char *)"delete_DOC_ID", _wrap_delete_DOC_ID, METH_VARARGS },
	 { (char *)"DOC_ID_swigregister", DOC_ID_swigregister, METH_VARARGS },
	 { (char *)"new_RECORD", _wrap_new_RECORD, METH_VARARGS },
	 { (char *)"RECORD_SetKey", _wrap_RECORD_SetKey, METH_VARARGS },
	 { (char *)"RECORD_GetKey", _wrap_RECORD_GetKey, METH_VARARGS },
	 { (char *)"RECORD_SetPathName", _wrap_RECORD_SetPathName, METH_VARARGS },
	 { (char *)"RECORD_GetPathName", _wrap_RECORD_GetPathName, METH_VARARGS },
	 { (char *)"RECORD_SetFileName", _wrap_RECORD_SetFileName, METH_VARARGS },
	 { (char *)"RECORD_GetFileName", _wrap_RECORD_GetFileName, METH_VARARGS },
	 { (char *)"RECORD_SetFullFileName", _wrap_RECORD_SetFullFileName, METH_VARARGS },
	 { (char *)"RECORD_GetFullFileName", _wrap_RECORD_GetFullFileName, METH_VARARGS },
	 { (char *)"RECORD_SetRecordStart", _wrap_RECORD_SetRecordStart, METH_VARARGS },
	 { (char *)"RECORD_GetRecordStart", _wrap_RECORD_GetRecordStart, METH_VARARGS },
	 { (char *)"RECORD_SetRecordEnd", _wrap_RECORD_SetRecordEnd, METH_VARARGS },
	 { (char *)"RECORD_GetRecordEnd", _wrap_RECORD_GetRecordEnd, METH_VARARGS },
	 { (char *)"RECORD_SetDocumentType", _wrap_RECORD_SetDocumentType, METH_VARARGS },
	 { (char *)"RECORD_GetDocumentType", _wrap_RECORD_GetDocumentType, METH_VARARGS },
	 { (char *)"RECORD_GetLocale", _wrap_RECORD_GetLocale, METH_VARARGS },
	 { (char *)"RECORD_SetLocale", _wrap_RECORD_SetLocale, METH_VARARGS },
	 { (char *)"RECORD_SetLanguage", _wrap_RECORD_SetLanguage, METH_VARARGS },
	 { (char *)"RECORD_SetCharset", _wrap_RECORD_SetCharset, METH_VARARGS },
	 { (char *)"RECORD_GetDate", _wrap_RECORD_GetDate, METH_VARARGS },
	 { (char *)"RECORD_SetDate", _wrap_RECORD_SetDate, METH_VARARGS },
	 { (char *)"RECORD_SetDateModified", _wrap_RECORD_SetDateModified, METH_VARARGS },
	 { (char *)"RECORD_GetDateModified", _wrap_RECORD_GetDateModified, METH_VARARGS },
	 { (char *)"RECORD_SetDateCreated", _wrap_RECORD_SetDateCreated, METH_VARARGS },
	 { (char *)"RECORD_GetDateCreated", _wrap_RECORD_GetDateCreated, METH_VARARGS },
	 { (char *)"RECORD_GetPriority", _wrap_RECORD_GetPriority, METH_VARARGS },
	 { (char *)"RECORD_SetPriority", _wrap_RECORD_SetPriority, METH_VARARGS },
	 { (char *)"RECORD_GetCategory", _wrap_RECORD_GetCategory, METH_VARARGS },
	 { (char *)"RECORD_SetCategory", _wrap_RECORD_SetCategory, METH_VARARGS },
	 { (char *)"RECORD___len__", _wrap_RECORD___len__, METH_VARARGS },
	 { (char *)"delete_RECORD", _wrap_delete_RECORD, METH_VARARGS },
	 { (char *)"RECORD_swigregister", RECORD_swigregister, METH_VARARGS },
	 { (char *)"new_FCACHE", _wrap_new_FCACHE, METH_VARARGS },
	 { (char *)"FCACHE_Ok", _wrap_FCACHE_Ok, METH_VARARGS },
	 { (char *)"FCACHE_ValidateInField", _wrap_FCACHE_ValidateInField, METH_VARARGS },
	 { (char *)"FCACHE_GetTotal", _wrap_FCACHE_GetTotal, METH_VARARGS },
	 { (char *)"FCACHE_SetFieldName", _wrap_FCACHE_SetFieldName, METH_VARARGS },
	 { (char *)"FCACHE_GetFieldName", _wrap_FCACHE_GetFieldName, METH_VARARGS },
	 { (char *)"delete_FCACHE", _wrap_delete_FCACHE, METH_VARARGS },
	 { (char *)"FCACHE_swigregister", FCACHE_swigregister, METH_VARARGS },
	 { (char *)"new_IDB", _wrap_new_IDB, METH_VARARGS },
	 { (char *)"IDB_SetCommonWordsThreshold", _wrap_IDB_SetCommonWordsThreshold, METH_VARARGS },
	 { (char *)"IDB_SetLocale", _wrap_IDB_SetLocale, METH_VARARGS },
	 { (char *)"IDB_IsDbCompatible", _wrap_IDB_IsDbCompatible, METH_VARARGS },
	 { (char *)"IDB_IsEmpty", _wrap_IDB_IsEmpty, METH_VARARGS },
	 { (char *)"IDB_Ok", _wrap_IDB_Ok, METH_VARARGS },
	 { (char *)"IDB_SetMergeStatus", _wrap_IDB_SetMergeStatus, METH_VARARGS },
	 { (char *)"IDB_SetDbState", _wrap_IDB_SetDbState, METH_VARARGS },
	 { (char *)"IDB_GetDbState", _wrap_IDB_GetDbState, METH_VARARGS },
	 { (char *)"IDB_SetDefaultDbSearchCutoff", _wrap_IDB_SetDefaultDbSearchCutoff, METH_VARARGS },
	 { (char *)"IDB_SetDbSearchCutoff", _wrap_IDB_SetDbSearchCutoff, METH_VARARGS },
	 { (char *)"IDB_GetDbSearchCutoff", _wrap_IDB_GetDbSearchCutoff, METH_VARARGS },
	 { (char *)"IDB_SetDbSearchFuel", _wrap_IDB_SetDbSearchFuel, METH_VARARGS },
	 { (char *)"IDB_SetDbSearchCacheSize", _wrap_IDB_SetDbSearchCacheSize, METH_VARARGS },
	 { (char *)"IDB_SetDefaultPriorityFactor", _wrap_IDB_SetDefaultPriorityFactor, METH_VARARGS },
	 { (char *)"IDB_SetPriorityFactor", _wrap_IDB_SetPriorityFactor, METH_VARARGS },
	 { (char *)"IDB_GetPriorityFactor", _wrap_IDB_GetPriorityFactor, METH_VARARGS },
	 { (char *)"IDB_SetDbSisLimit", _wrap_IDB_SetDbSisLimit, METH_VARARGS },
	 { (char *)"IDB_SetTitle", _wrap_IDB_SetTitle, METH_VARARGS },
	 { (char *)"IDB_GetTitle", _wrap_IDB_GetTitle, METH_VARARGS },
	 { (char *)"IDB_SetComments", _wrap_IDB_SetComments, METH_VARARGS },
	 { (char *)"IDB_GetComments", _wrap_IDB_GetComments, METH_VARARGS },
	 { (char *)"IDB_SetCopyright", _wrap_IDB_SetCopyright, METH_VARARGS },
	 { (char *)"IDB_GetCopyright", _wrap_IDB_GetCopyright, METH_VARARGS },
	 { (char *)"IDB_SetMaintainer", _wrap_IDB_SetMaintainer, METH_VARARGS },
	 { (char *)"IDB_GetMaintainer", _wrap_IDB_GetMaintainer, METH_VARARGS },
	 { (char *)"IDB_SetGlobalDoctype", _wrap_IDB_SetGlobalDoctype, METH_VARARGS },
	 { (char *)"IDB_SetIndexingMemory", _wrap_IDB_SetIndexingMemory, METH_VARARGS },
	 { (char *)"IDB_GetIndexingMemory", _wrap_IDB_GetIndexingMemory, METH_VARARGS },
	 { (char *)"IDB_SetStoplist", _wrap_IDB_SetStoplist, METH_VARARGS },
	 { (char *)"IDB_SetGlobalStoplist", _wrap_IDB_SetGlobalStoplist, METH_VARARGS },
	 { (char *)"IDB_GetGlobalStoplist", _wrap_IDB_GetGlobalStoplist, METH_VARARGS },
	 { (char *)"IDB_GetTotalWords", _wrap_IDB_GetTotalWords, METH_VARARGS },
	 { (char *)"IDB_GetTotalUniqueWords", _wrap_IDB_GetTotalUniqueWords, METH_VARARGS },
	 { (char *)"IDB_GetTotalRecords", _wrap_IDB_GetTotalRecords, METH_VARARGS },
	 { (char *)"IDB_GetTotalDocumentsDeleted", _wrap_IDB_GetTotalDocumentsDeleted, METH_VARARGS },
	 { (char *)"IDB_GetFieldCache", _wrap_IDB_GetFieldCache, METH_VARARGS },
	 { (char *)"IDB_GetPeerFc", _wrap_IDB_GetPeerFc, METH_VARARGS },
	 { (char *)"IDB_GetNodeTree", _wrap_IDB_GetNodeTree, METH_VARARGS },
	 { (char *)"IDB_KillCache", _wrap_IDB_KillCache, METH_VARARGS },
	 { (char *)"IDB_FillHeadlineCache", _wrap_IDB_FillHeadlineCache, METH_VARARGS },
	 { (char *)"IDB_IsSystemFile", _wrap_IDB_IsSystemFile, METH_VARARGS },
	 { (char *)"IDB_SetServerName", _wrap_IDB_SetServerName, METH_VARARGS },
	 { (char *)"IDB_GetServerName", _wrap_IDB_GetServerName, METH_VARARGS },
	 { (char *)"IDB_MergeIndexFiles", _wrap_IDB_MergeIndexFiles, METH_VARARGS },
	 { (char *)"IDB_CollapseIndexFiles", _wrap_IDB_CollapseIndexFiles, METH_VARARGS },
	 { (char *)"IDB_KillAll", _wrap_IDB_KillAll, METH_VARARGS },
	 { (char *)"IDB_GetVersionID", _wrap_IDB_GetVersionID, METH_VARARGS },
	 { (char *)"IDB_AddRecord", _wrap_IDB_AddRecord, METH_VARARGS },
	 { (char *)"IDB_Index", _wrap_IDB_Index, METH_VARARGS },
	 { (char *)"IDB_AppendToIndex", _wrap_IDB_AppendToIndex, METH_VARARGS },
	 { (char *)"IDB_AppendFileToIndex", _wrap_IDB_AppendFileToIndex, METH_VARARGS },
	 { (char *)"IDB_IsStopWord", _wrap_IDB_IsStopWord, METH_VARARGS },
	 { (char *)"IDB_MdtLookupKey", _wrap_IDB_MdtLookupKey, METH_VARARGS },
	 { (char *)"IDB_GetDocumentDeleted", _wrap_IDB_GetDocumentDeleted, METH_VARARGS },
	 { (char *)"IDB_DeleteByIndex", _wrap_IDB_DeleteByIndex, METH_VARARGS },
	 { (char *)"IDB_DeleteByKey", _wrap_IDB_DeleteByKey, METH_VARARGS },
	 { (char *)"IDB_UndeleteByIndex", _wrap_IDB_UndeleteByIndex, METH_VARARGS },
	 { (char *)"IDB_UndeleteByKey", _wrap_IDB_UndeleteByKey, METH_VARARGS },
	 { (char *)"IDB_SetOverride", _wrap_IDB_SetOverride, METH_VARARGS },
	 { (char *)"IDB_GetOverride", _wrap_IDB_GetOverride, METH_VARARGS },
	 { (char *)"IDB_CleanupDb", _wrap_IDB_CleanupDb, METH_VARARGS },
	 { (char *)"IDB_GetLocks", _wrap_IDB_GetLocks, METH_VARARGS },
	 { (char *)"IDB_Scan", _wrap_IDB_Scan, METH_VARARGS },
	 { (char *)"IDB_ScanGlob", _wrap_IDB_ScanGlob, METH_VARARGS },
	 { (char *)"IDB_BeginRsetPresent", _wrap_IDB_BeginRsetPresent, METH_VARARGS },
	 { (char *)"IDB_EndRsetPresent", _wrap_IDB_EndRsetPresent, METH_VARARGS },
	 { (char *)"IDB_BeforeSearching", _wrap_IDB_BeforeSearching, METH_VARARGS },
	 { (char *)"IDB_AfterSearching", _wrap_IDB_AfterSearching, METH_VARARGS },
	 { (char *)"IDB_BeforeIndexing", _wrap_IDB_BeforeIndexing, METH_VARARGS },
	 { (char *)"IDB_AfterIndexing", _wrap_IDB_AfterIndexing, METH_VARARGS },
	 { (char *)"IDB_Search", _wrap_IDB_Search, METH_VARARGS },
	 { (char *)"IDB_Headline", _wrap_IDB_Headline, METH_VARARGS },
	 { (char *)"IDB_Summary", _wrap_IDB_Summary, METH_VARARGS },
	 { (char *)"IDB_Context", _wrap_IDB_Context, METH_VARARGS },
	 { (char *)"IDB_NthContext", _wrap_IDB_NthContext, METH_VARARGS },
	 { (char *)"IDB_URL", _wrap_IDB_URL, METH_VARARGS },
	 { (char *)"IDB_HighlightedRecord", _wrap_IDB_HighlightedRecord, METH_VARARGS },
	 { (char *)"IDB_DocHighlight", _wrap_IDB_DocHighlight, METH_VARARGS },
	 { (char *)"IDB_GetFieldData", _wrap_IDB_GetFieldData, METH_VARARGS },
	 { (char *)"IDB_GetFieldContents", _wrap_IDB_GetFieldContents, METH_VARARGS },
	 { (char *)"IDB_Present", _wrap_IDB_Present, METH_VARARGS },
	 { (char *)"IDB_DocPresent", _wrap_IDB_DocPresent, METH_VARARGS },
	 { (char *)"IDB_KeyLookup", _wrap_IDB_KeyLookup, METH_VARARGS },
	 { (char *)"IDB_GetFields", _wrap_IDB_GetFields, METH_VARARGS },
	 { (char *)"delete_IDB", _wrap_delete_IDB, METH_VARARGS },
	 { (char *)"IDB_swigregister", IDB_swigregister, METH_VARARGS },
	 { (char *)"new_IDBC", _wrap_new_IDBC, METH_VARARGS },
	 { (char *)"IDBC_AddRecord", _wrap_IDBC_AddRecord, METH_VARARGS },
	 { (char *)"delete_IDBC", _wrap_delete_IDBC, METH_VARARGS },
	 { (char *)"IDBC_swigregister", IDBC_swigregister, METH_VARARGS },
	 { (char *)"new_VIDB", _wrap_new_VIDB, METH_VARARGS },
	 { (char *)"delete_VIDB", _wrap_delete_VIDB, METH_VARARGS },
	 { (char *)"VIDB_getself", _wrap_VIDB_getself, METH_VARARGS },
	 { (char *)"VIDB_GetIDB", _wrap_VIDB_GetIDB, METH_VARARGS },
	 { (char *)"VIDB_GetIDBCount", _wrap_VIDB_GetIDBCount, METH_VARARGS },
	 { (char *)"VIDB_IsDbVirtual", _wrap_VIDB_IsDbVirtual, METH_VARARGS },
	 { (char *)"VIDB_GetMainMdt", _wrap_VIDB_GetMainMdt, METH_VARARGS },
	 { (char *)"VIDB_GetFieldCache", _wrap_VIDB_GetFieldCache, METH_VARARGS },
	 { (char *)"VIDB_GetDocTypeOptions", _wrap_VIDB_GetDocTypeOptions, METH_VARARGS },
	 { (char *)"VIDB_GetDbFileStem", _wrap_VIDB_GetDbFileStem, METH_VARARGS },
	 { (char *)"VIDB_XMLHitTable", _wrap_VIDB_XMLHitTable, METH_VARARGS },
	 { (char *)"VIDB_XMLNodeTree", _wrap_VIDB_XMLNodeTree, METH_VARARGS },
	 { (char *)"VIDB_SetPriorityFactor", _wrap_VIDB_SetPriorityFactor, METH_VARARGS },
	 { (char *)"VIDB_SetDbSearchCutoff", _wrap_VIDB_SetDbSearchCutoff, METH_VARARGS },
	 { (char *)"VIDB_GetDbSearchCutoff", _wrap_VIDB_GetDbSearchCutoff, METH_VARARGS },
	 { (char *)"VIDB_SetDbSearchFuel", _wrap_VIDB_SetDbSearchFuel, METH_VARARGS },
	 { (char *)"VIDB_SetDbSearchCacheSize", _wrap_VIDB_SetDbSearchCacheSize, METH_VARARGS },
	 { (char *)"VIDB_BeforeSearching", _wrap_VIDB_BeforeSearching, METH_VARARGS },
	 { (char *)"VIDB_SetDebugMode", _wrap_VIDB_SetDebugMode, METH_VARARGS },
	 { (char *)"VIDB_GetErrorCode", _wrap_VIDB_GetErrorCode, METH_VARARGS },
	 { (char *)"VIDB_GetTotalWords", _wrap_VIDB_GetTotalWords, METH_VARARGS },
	 { (char *)"VIDB_GetTotalUniqueWords", _wrap_VIDB_GetTotalUniqueWords, METH_VARARGS },
	 { (char *)"VIDB_GetTotalRecords", _wrap_VIDB_GetTotalRecords, METH_VARARGS },
	 { (char *)"VIDB_GetTotalDocumentsDeleted", _wrap_VIDB_GetTotalDocumentsDeleted, METH_VARARGS },
	 { (char *)"VIDB_GetTotalDatabases", _wrap_VIDB_GetTotalDatabases, METH_VARARGS },
	 { (char *)"VIDB_IsDbCompatible", _wrap_VIDB_IsDbCompatible, METH_VARARGS },
	 { (char *)"VIDB_IsEmpty", _wrap_VIDB_IsEmpty, METH_VARARGS },
	 { (char *)"VIDB_Ok", _wrap_VIDB_Ok, METH_VARARGS },
	 { (char *)"VIDB_SetCommonWordsThreshold", _wrap_VIDB_SetCommonWordsThreshold, METH_VARARGS },
	 { (char *)"VIDB_SetStoplist", _wrap_VIDB_SetStoplist, METH_VARARGS },
	 { (char *)"VIDB_IsStopWord", _wrap_VIDB_IsStopWord, METH_VARARGS },
	 { (char *)"VIDB_GetTitle", _wrap_VIDB_GetTitle, METH_VARARGS },
	 { (char *)"VIDB_GetComments", _wrap_VIDB_GetComments, METH_VARARGS },
	 { (char *)"VIDB_GetMaintainer", _wrap_VIDB_GetMaintainer, METH_VARARGS },
	 { (char *)"VIDB_Search", _wrap_VIDB_Search, METH_VARARGS },
	 { (char *)"VIDB_SearchWords", _wrap_VIDB_SearchWords, METH_VARARGS },
	 { (char *)"VIDB_SearchRpn", _wrap_VIDB_SearchRpn, METH_VARARGS },
	 { (char *)"VIDB_SearchInfix", _wrap_VIDB_SearchInfix, METH_VARARGS },
	 { (char *)"VIDB_VSearch", _wrap_VIDB_VSearch, METH_VARARGS },
	 { (char *)"VIDB_VSearchWords", _wrap_VIDB_VSearchWords, METH_VARARGS },
	 { (char *)"VIDB_VSearchRpn", _wrap_VIDB_VSearchRpn, METH_VARARGS },
	 { (char *)"VIDB_VSearchInfix", _wrap_VIDB_VSearchInfix, METH_VARARGS },
	 { (char *)"VIDB_Scan", _wrap_VIDB_Scan, METH_VARARGS },
	 { (char *)"VIDB_ScanGlob", _wrap_VIDB_ScanGlob, METH_VARARGS },
	 { (char *)"VIDB_BeginRsetPresent", _wrap_VIDB_BeginRsetPresent, METH_VARARGS },
	 { (char *)"VIDB_Headline", _wrap_VIDB_Headline, METH_VARARGS },
	 { (char *)"VIDB_Summary", _wrap_VIDB_Summary, METH_VARARGS },
	 { (char *)"VIDB_Context", _wrap_VIDB_Context, METH_VARARGS },
	 { (char *)"VIDB_NthContext", _wrap_VIDB_NthContext, METH_VARARGS },
	 { (char *)"VIDB_URL", _wrap_VIDB_URL, METH_VARARGS },
	 { (char *)"VIDB_HighlightedRecord", _wrap_VIDB_HighlightedRecord, METH_VARARGS },
	 { (char *)"VIDB_DocHighlight", _wrap_VIDB_DocHighlight, METH_VARARGS },
	 { (char *)"VIDB_GetFieldData", _wrap_VIDB_GetFieldData, METH_VARARGS },
	 { (char *)"VIDB_GetFieldContents", _wrap_VIDB_GetFieldContents, METH_VARARGS },
	 { (char *)"VIDB_Present", _wrap_VIDB_Present, METH_VARARGS },
	 { (char *)"VIDB_DocPresent", _wrap_VIDB_DocPresent, METH_VARARGS },
	 { (char *)"VIDB_EndRsetPresent", _wrap_VIDB_EndRsetPresent, METH_VARARGS },
	 { (char *)"VIDB_GetGlobalDocType", _wrap_VIDB_GetGlobalDocType, METH_VARARGS },
	 { (char *)"VIDB_KeyLookup", _wrap_VIDB_KeyLookup, METH_VARARGS },
	 { (char *)"VIDB_SetDateRange", _wrap_VIDB_SetDateRange, METH_VARARGS },
	 { (char *)"VIDB_ProfileGetString", _wrap_VIDB_ProfileGetString, METH_VARARGS },
	 { (char *)"VIDB_FirstKey", _wrap_VIDB_FirstKey, METH_VARARGS },
	 { (char *)"VIDB_LastKey", _wrap_VIDB_LastKey, METH_VARARGS },
	 { (char *)"VIDB_NextKey", _wrap_VIDB_NextKey, METH_VARARGS },
	 { (char *)"VIDB_PrevKey", _wrap_VIDB_PrevKey, METH_VARARGS },
	 { (char *)"VIDB_GetDocumentInfo", _wrap_VIDB_GetDocumentInfo, METH_VARARGS },
	 { (char *)"VIDB_DateCreated", _wrap_VIDB_DateCreated, METH_VARARGS },
	 { (char *)"VIDB_DateLastModified", _wrap_VIDB_DateLastModified, METH_VARARGS },
	 { (char *)"VIDB_GetAllDocTypes", _wrap_VIDB_GetAllDocTypes, METH_VARARGS },
	 { (char *)"VIDB_ValidateDocType", _wrap_VIDB_ValidateDocType, METH_VARARGS },
	 { (char *)"VIDB_GetVersionID", _wrap_VIDB_GetVersionID, METH_VARARGS },
	 { (char *)"VIDB_GetLocks", _wrap_VIDB_GetLocks, METH_VARARGS },
	 { (char *)"VIDB_GetFields", _wrap_VIDB_GetFields, METH_VARARGS },
	 { (char *)"VIDB_swigregister", VIDB_swigregister, METH_VARARGS },
	 { (char *)"new_LANGUAGE", _wrap_new_LANGUAGE, METH_VARARGS },
	 { (char *)"LANGUAGE_Name", _wrap_LANGUAGE_Name, METH_VARARGS },
	 { (char *)"LANGUAGE_Code", _wrap_LANGUAGE_Code, METH_VARARGS },
	 { (char *)"delete_LANGUAGE", _wrap_delete_LANGUAGE, METH_VARARGS },
	 { (char *)"LANGUAGE_swigregister", LANGUAGE_swigregister, METH_VARARGS },
	 { (char *)"new_CHARSET", _wrap_new_CHARSET, METH_VARARGS },
	 { (char *)"CHARSET_Ok", _wrap_CHARSET_Ok, METH_VARARGS },
	 { (char *)"CHARSET_Name", _wrap_CHARSET_Name, METH_VARARGS },
	 { (char *)"CHARSET_HtmlCat", _wrap_CHARSET_HtmlCat, METH_VARARGS },
	 { (char *)"CHARSET_ToLower", _wrap_CHARSET_ToLower, METH_VARARGS },
	 { (char *)"CHARSET_ToUpper", _wrap_CHARSET_ToUpper, METH_VARARGS },
	 { (char *)"CHARSET_ib_isalpha", _wrap_CHARSET_ib_isalpha, METH_VARARGS },
	 { (char *)"CHARSET_ib_isupper", _wrap_CHARSET_ib_isupper, METH_VARARGS },
	 { (char *)"CHARSET_ib_islower", _wrap_CHARSET_ib_islower, METH_VARARGS },
	 { (char *)"CHARSET_ib_isdigit", _wrap_CHARSET_ib_isdigit, METH_VARARGS },
	 { (char *)"CHARSET_ib_isxdigit", _wrap_CHARSET_ib_isxdigit, METH_VARARGS },
	 { (char *)"CHARSET_ib_isalnum", _wrap_CHARSET_ib_isalnum, METH_VARARGS },
	 { (char *)"CHARSET_ib_isspace", _wrap_CHARSET_ib_isspace, METH_VARARGS },
	 { (char *)"CHARSET_ib_ispunct", _wrap_CHARSET_ib_ispunct, METH_VARARGS },
	 { (char *)"CHARSET_ib_isprint", _wrap_CHARSET_ib_isprint, METH_VARARGS },
	 { (char *)"CHARSET_ib_isgraph", _wrap_CHARSET_ib_isgraph, METH_VARARGS },
	 { (char *)"CHARSET_ib_iscntrl", _wrap_CHARSET_ib_iscntrl, METH_VARARGS },
	 { (char *)"CHARSET_ib_iswhite", _wrap_CHARSET_ib_iswhite, METH_VARARGS },
	 { (char *)"CHARSET_ib_isascii", _wrap_CHARSET_ib_isascii, METH_VARARGS },
	 { (char *)"CHARSET_ib_islatin1", _wrap_CHARSET_ib_islatin1, METH_VARARGS },
	 { (char *)"CHARSET_ib_toupper", _wrap_CHARSET_ib_toupper, METH_VARARGS },
	 { (char *)"CHARSET_ib_tolower", _wrap_CHARSET_ib_tolower, METH_VARARGS },
	 { (char *)"CHARSET_ib_toascii", _wrap_CHARSET_ib_toascii, METH_VARARGS },
	 { (char *)"CHARSET_isTermChr", _wrap_CHARSET_isTermChr, METH_VARARGS },
	 { (char *)"CHARSET_isWordSep", _wrap_CHARSET_isWordSep, METH_VARARGS },
	 { (char *)"CHARSET_isTermWhite", _wrap_CHARSET_isTermWhite, METH_VARARGS },
	 { (char *)"CHARSET_UCS", _wrap_CHARSET_UCS, METH_VARARGS },
	 { (char *)"delete_CHARSET", _wrap_delete_CHARSET, METH_VARARGS },
	 { (char *)"CHARSET_swigregister", CHARSET_swigregister, METH_VARARGS },
	 { (char *)"new_LOCALE", _wrap_new_LOCALE, METH_VARARGS },
	 { (char *)"delete_LOCALE", _wrap_delete_LOCALE, METH_VARARGS },
	 { (char *)"LOCALE_SetLanguage", _wrap_LOCALE_SetLanguage, METH_VARARGS },
	 { (char *)"LOCALE_SetCharset", _wrap_LOCALE_SetCharset, METH_VARARGS },
	 { (char *)"LOCALE_GetLanguageCode", _wrap_LOCALE_GetLanguageCode, METH_VARARGS },
	 { (char *)"LOCALE_GetLanguageName", _wrap_LOCALE_GetLanguageName, METH_VARARGS },
	 { (char *)"LOCALE_GetCharsetCode", _wrap_LOCALE_GetCharsetCode, METH_VARARGS },
	 { (char *)"LOCALE_GetCharsetName", _wrap_LOCALE_GetCharsetName, METH_VARARGS },
	 { (char *)"LOCALE_Charset", _wrap_LOCALE_Charset, METH_VARARGS },
	 { (char *)"LOCALE_Language", _wrap_LOCALE_Language, METH_VARARGS },
	 { (char *)"LOCALE_Name", _wrap_LOCALE_Name, METH_VARARGS },
	 { (char *)"LOCALE_Id", _wrap_LOCALE_Id, METH_VARARGS },
	 { (char *)"LOCALE_swigregister", LOCALE_swigregister, METH_VARARGS },
	 { (char *)"ResolveConfigPath", _wrap_ResolveConfigPath, METH_VARARGS },
	 { (char *)"ResolveBinPath", _wrap_ResolveBinPath, METH_VARARGS },
	 { (char *)"ResolveHtdocPath", _wrap_ResolveHtdocPath, METH_VARARGS },
	 { (char *)"ExpandFileSpec", _wrap_ExpandFileSpec, METH_VARARGS },
	 { (char *)"set_syslog", _wrap_set_syslog, METH_VARARGS },
	 { (char *)"log_init", _wrap_log_init, METH_VARARGS },
	 { (char *)"log_message", _wrap_log_message, METH_VARARGS },
	 { (char *)"__IB_GetFreeMemory", _wrap___IB_GetFreeMemory, METH_VARARGS },
	 { (char *)"__IB_GetTotalMemory", _wrap___IB_GetTotalMemory, METH_VARARGS },
	 { (char *)"__IB_Hostid", _wrap___IB_Hostid, METH_VARARGS },
	 { (char *)"__IB_SerialID", _wrap___IB_SerialID, METH_VARARGS },
	 { (char *)"__IB_SendDebugMessage", _wrap___IB_SendDebugMessage, METH_VARARGS },
	 { (char *)"__IB_SendInfoMessage", _wrap___IB_SendInfoMessage, METH_VARARGS },
	 { (char *)"__IB_SendNoticeMessage", _wrap___IB_SendNoticeMessage, METH_VARARGS },
	 { (char *)"__IB_SendWarningMessage", _wrap___IB_SendWarningMessage, METH_VARARGS },
	 { (char *)"__IB_SendErrorMessage", _wrap___IB_SendErrorMessage, METH_VARARGS },
	 { (char *)"__IB_SendErrnoMessage", _wrap___IB_SendErrnoMessage, METH_VARARGS },
	 { (char *)"__IB_SendFatalMessage", _wrap___IB_SendFatalMessage, METH_VARARGS },
	 { (char *)"__IB_SendPanicMessage", _wrap___IB_SendPanicMessage, METH_VARARGS },
	 { (char *)"new___IB", _wrap_new___IB, METH_VARARGS },
	 { (char *)"delete___IB", _wrap_delete___IB, METH_VARARGS },
	 { (char *)"__IB_swigregister", __IB_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_IDBTo_p_IDBOBJ(void *x) {
    return (void *)((IDBOBJ *)  ((IDB *) x));
}
static void *_p_IDBCTo_p_IDBOBJ(void *x) {
    return (void *)((IDBOBJ *) (IDB *) ((IDBC *) x));
}
static void *_p_VIDBTo_p_IDBOBJ(void *x) {
    return (void *)((IDBOBJ *)  ((VIDB *) x));
}
static void *_p_IDBCTo_p_IDB(void *x) {
    return (void *)((IDB *)  ((IDBC *) x));
}
static swig_type_info _swigt__p_SCANLIST[] = {{"_p_SCANLIST", 0, "SCANLIST *", 0},{"_p_SCANLIST"},{0}};
static swig_type_info _swigt__p_SRCH_DATE[] = {{"_p_SRCH_DATE", 0, "SRCH_DATE *", 0},{"_p_SRCH_DATE"},{0}};
static swig_type_info _swigt__p_MDTREC[] = {{"_p_MDTREC", 0, "MDTREC *", 0},{"_p_MDTREC"},{0}};
static swig_type_info _swigt__p_FCACHE[] = {{"_p_FCACHE", 0, "FCACHE *", 0},{"_p_FCACHE"},{0}};
static swig_type_info _swigt__p_INFIX2RPN[] = {{"_p_INFIX2RPN", 0, "INFIX2RPN *", 0},{"_p_INFIX2RPN"},{0}};
static swig_type_info _swigt__p_NODETREE[] = {{"_p_NODETREE", 0, "NODETREE *", 0},{"_p_NODETREE"},{0}};
static swig_type_info _swigt__p_STRING[] = {{"_p_STRING", 0, "STRING *", 0},{"_p_STRING"},{0}};
static swig_type_info _swigt__p_ArraySTRING[] = {{"_p_ArraySTRING", 0, "ArraySTRING *", 0},{"_p_ArraySTRING"},{0}};
static swig_type_info _swigt__p_LANGUAGE[] = {{"_p_LANGUAGE", 0, "LANGUAGE *", 0},{"_p_LANGUAGE"},{0}};
static swig_type_info _swigt__p_DATERANGE[] = {{"_p_DATERANGE", 0, "DATERANGE *", 0},{"_p_DATERANGE"},{0}};
static swig_type_info _swigt__p_IDBOBJ[] = {{"_p_IDBOBJ", 0, "IDBOBJ *", 0},{"_p_IDBC", _p_IDBCTo_p_IDBOBJ},{"_p_VIDB", _p_VIDBTo_p_IDBOBJ},{"_p_IDB", _p_IDBTo_p_IDBOBJ},{"_p_IDBOBJ"},{0}};
static swig_type_info _swigt__p_RECORD[] = {{"_p_RECORD", 0, "RECORD *", 0},{"_p_RECORD"},{0}};
static swig_type_info _swigt__p_RSET[] = {{"_p_RSET", 0, "RSET *", 0},{"_p_RSET"},{0}};
static swig_type_info _swigt__p_LOCALE[] = {{"_p_LOCALE", 0, "LOCALE *", 0},{"_p_LOCALE"},{0}};
static swig_type_info _swigt__p___IB[] = {{"_p___IB", 0, "__IB *", 0},{"_p___IB"},{0}};
static swig_type_info _swigt__p_INDEX_ID[] = {{"_p_INDEX_ID", 0, "INDEX_ID *", 0},{"_p_INDEX_ID"},{0}};
static swig_type_info _swigt__p_RESULT[] = {{"_p_RESULT", 0, "RESULT *", 0},{"_p_RESULT"},{0}};
static swig_type_info _swigt__p_CHARSET[] = {{"_p_CHARSET", 0, "CHARSET *", 0},{"_p_CHARSET"},{0}};
static swig_type_info _swigt__p_IDBC[] = {{"_p_IDBC", 0, "IDBC *", 0},{"_p_IDBC"},{0}};
static swig_type_info _swigt__p_SQUERY[] = {{"_p_SQUERY", 0, "SQUERY *", 0},{"_p_SQUERY"},{0}};
static swig_type_info _swigt__p_TREENODELIST[] = {{"_p_TREENODELIST", 0, "TREENODELIST *", 0},{"_p_TREENODELIST"},{0}};
static swig_type_info _swigt__p_IDB[] = {{"_p_IDB", 0, "IDB *", 0},{"_p_IDBC", _p_IDBCTo_p_IDB},{"_p_IDB"},{0}};
static swig_type_info _swigt__p_SIZE_T[] = {{"_p_SIZE_T", 0, "SIZE_T *", 0},{"_p_SIZE_T"},{0}};
static swig_type_info _swigt__p_DOC_ID[] = {{"_p_DOC_ID", 0, "DOC_ID *", 0},{"_p_DOC_ID"},{0}};
static swig_type_info _swigt__p_VIDB[] = {{"_p_VIDB", 0, "VIDB *", 0},{"_p_VIDB"},{0}};
static swig_type_info _swigt__p_GDT_BOOLEAN[] = {{"_p_GDT_BOOLEAN", 0, "GDT_BOOLEAN *", 0},{"_p_GDT_BOOLEAN"},{0}};
static swig_type_info _swigt__p_INT[] = {{"_p_INT", 0, "INT *", 0},{"_p_INT"},{0}};
static swig_type_info _swigt__p_TREENODE[] = {{"_p_TREENODE", 0, "TREENODE *", 0},{"_p_TREENODE"},{0}};
static swig_type_info _swigt__p_MDT[] = {{"_p_MDT", 0, "MDT *", 0},{"_p_MDT"},{0}};
static swig_type_info _swigt__p_SCANOBJ[] = {{"_p_SCANOBJ", 0, "SCANOBJ *", 0},{"_p_SCANOBJ"},{0}};
static swig_type_info _swigt__p_STRLIST[] = {{"_p_STRLIST", 0, "STRLIST *", 0},{"_p_STRLIST"},{0}};
static swig_type_info _swigt__p_unsigned_long_long[] = {{"_p_unsigned_long_long", 0, "unsigned long long *", 0},{"_p_unsigned_long_long"},{0}};
static swig_type_info _swigt__p_IRSET[] = {{"_p_IRSET", 0, "IRSET *", 0},{"_p_IRSET"},{0}};
static swig_type_info _swigt__p_FC[] = {{"_p_FC", 0, "FC *", 0},{"_p_FC"},{0}};
static swig_type_info _swigt__p_DOCTYPE_ID[] = {{"_p_DOCTYPE_ID", 0, "DOCTYPE_ID *", 0},{"_p_DOCTYPE_ID"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_SCANLIST, 
_swigt__p_SRCH_DATE, 
_swigt__p_MDTREC, 
_swigt__p_FCACHE, 
_swigt__p_INFIX2RPN, 
_swigt__p_NODETREE, 
_swigt__p_STRING, 
_swigt__p_ArraySTRING, 
_swigt__p_LANGUAGE, 
_swigt__p_DATERANGE, 
_swigt__p_IDBOBJ, 
_swigt__p_RECORD, 
_swigt__p_RSET, 
_swigt__p_LOCALE, 
_swigt__p___IB, 
_swigt__p_INDEX_ID, 
_swigt__p_RESULT, 
_swigt__p_CHARSET, 
_swigt__p_IDBC, 
_swigt__p_SQUERY, 
_swigt__p_TREENODELIST, 
_swigt__p_IDB, 
_swigt__p_SIZE_T, 
_swigt__p_DOC_ID, 
_swigt__p_VIDB, 
_swigt__p_GDT_BOOLEAN, 
_swigt__p_INT, 
_swigt__p_TREENODE, 
_swigt__p_MDT, 
_swigt__p_SCANOBJ, 
_swigt__p_STRLIST, 
_swigt__p_unsigned_long_long, 
_swigt__p_IRSET, 
_swigt__p_FC, 
_swigt__p_DOCTYPE_ID, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{ SWIG_PY_INT,     (char *)"GDT_FALSE", (long) 0, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"false", (long) 0, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"GDT_TRUE", (long) 1, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"true", (long) 1, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Unsorted", (long) Unsorted, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ByDate", (long) ByDate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ByReverseDate", (long) ByReverseDate, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ByScore", (long) ByScore, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ByAdjScore", (long) ByAdjScore, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ByAuxCount", (long) ByAuxCount, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ByKey", (long) ByKey, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ByIndex", (long) ByIndex, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"ByCategory", (long) ByCategory, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"Unnormalized", (long) Unnormalized, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"NoNormalization", (long) NoNormalization, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"CosineNormalization", (long) CosineNormalization, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"MaxNormalization", (long) MaxNormalization, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LogNormalization", (long) LogNormalization, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"BytesNormalization", (long) BytesNormalization, 0, 0, 0},
{ SWIG_PY_STRING,  (char*)"ELEMENT_Full", 0, 0, (void *)"F", 0},
{ SWIG_PY_STRING,  (char*)"ELEMENT_Brief", 0, 0, (void *)"B", 0},
{ SWIG_PY_STRING,  (char*)"ELEMENT_Short", 0, 0, (void *)"S", 0},
{ SWIG_PY_STRING,  (char*)"ELEMENT_G", 0, 0, (void *)"G", 0},
{ SWIG_PY_STRING,  (char*)"ELEMENT_Raw", 0, 0, (void *)"R", 0},
{ SWIG_PY_STRING,  (char*)"ELEMENT_Location", 0, 0, (void *)"L", 0},
{ SWIG_PY_STRING,  (char*)"ELEMENT_Metadata", 0, 0, (void *)"M", 0},
{ SWIG_PY_STRING,  (char*)"RECORDSYNTAX_Sutrs", 0, 0, (void *)"1.2.840.10003.5.101", 0},
{ SWIG_PY_STRING,  (char*)"RECORDSYNTAX_Usmarc", 0, 0, (void *)"1.2.840.10003.5.10", 0},
{ SWIG_PY_STRING,  (char*)"RECORDSYNTAX_Html", 0, 0, (void *)"1.2.840.10003.5.108", 0},
{ SWIG_PY_STRING,  (char*)"RECORDSYNTAX_Sgml", 0, 0, (void *)"1.2.840.10003.5.1000.81.1", 0},
{ SWIG_PY_STRING,  (char*)"RECORDSYNTAX_Xml", 0, 0, (void *)"1.2.840.10003.5.1000.81.2", 0},
{ SWIG_PY_STRING,  (char*)"RECORDSYNTAX_Raw", 0, 0, (void *)"1.2.840.10003.5.1000", 0},
{ SWIG_PY_STRING,  (char*)"RECORDSYNTAX_DVBHtml", 0, 0, (void *)"1.2.840.10003.5.1000.34.2", 0},
{ SWIG_PY_STRING,  (char*)"copyright", 0, 0, (void *)"Copyright 1999-2000 Edward C. Zimmermann and Basis Systeme netzwerk, Munich Germany.", 0},
{ SWIG_PY_STRING,  (char*)"version", 0, 0, (void *)"%I%", 0},
{ SWIG_PY_INT,     (char *)"iNothing", (long) iNothing, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"iOptimize", (long) iOptimize, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"iMerge", (long) iMerge, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"iCollapse", (long) iCollapse, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"iIncremental", (long) iIncremental, 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_PANIC", (long) (1<<0), 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_FATAL", (long) (1<<1), 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_ERROR", (long) (1<<2), 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_ERRNO", (long) (1<<3), 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_WARN", (long) (1<<4), 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_NOTICE", (long) (1<<5), 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_INFO", (long) (1<<6), 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_DEBUG", (long) (1<<7), 0, 0, 0},
{ SWIG_PY_INT,     (char *)"LOG_ALL", (long) 0xffff, 0, 0, 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_STDERR", 0, 0, (void *)"<stderr>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_STDOUT", 0, 0, (void *)"<stdout>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_SYSLOG", 0, 0, (void *)"<syslog>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_LOCAL0", 0, 0, (void *)"<syslog0>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_LOCAL1", 0, 0, (void *)"<syslog1>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_LOCAL2", 0, 0, (void *)"<syslog2>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_LOCAL3", 0, 0, (void *)"<syslog3>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_LOCAL4", 0, 0, (void *)"<syslog4>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_LOCAL5", 0, 0, (void *)"<syslog5>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_LOCAL6", 0, 0, (void *)"<syslog6>", 0},
{ SWIG_PY_STRING,  (char*)"DEVICE_LOCAL7", 0, 0, (void *)"<syslog7>", 0},
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"DbStateInvalid",_wrap_DbStateInvalid_get, _wrap_DbStateInvalid_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DbStateReady",_wrap_DbStateReady_get, _wrap_DbStateReady_set);
    SWIG_addvarlink(SWIG_globals,(char*)"DbStateBusy",_wrap_DbStateBusy_get, _wrap_DbStateBusy_set);
    
    __Register_IB_Application(SWIG_name, stdout);
    if (DebugFlag) logf (LOG_DEBUG, "%s completed!", "init");
    
}

