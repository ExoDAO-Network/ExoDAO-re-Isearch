# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('PyIB', [dirname(__file__)])
        except ImportError:
            import PyIB
            return PyIB
        if fp is not None:
            try:
                _mod = imp.load_module('PyIB', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    PyIB = swig_import_helper()
    del swig_import_helper
else:
    import PyIB
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


GDT_FALSE = PyIB.GDT_FALSE
GDT_TRUE = PyIB.GDT_TRUE
Unsorted = PyIB.Unsorted
ByDate = PyIB.ByDate
ByReverseDate = PyIB.ByReverseDate
ByScore = PyIB.ByScore
ByAdjScore = PyIB.ByAdjScore
ByAuxCount = PyIB.ByAuxCount
ByHits = PyIB.ByHits
ByReverseHits = PyIB.ByReverseHits
ByKey = PyIB.ByKey
ByIndex = PyIB.ByIndex
ByCategory = PyIB.ByCategory
ByNewsrank = PyIB.ByNewsrank
ByFunction = PyIB.ByFunction
ByPrivate = PyIB.ByPrivate
ByPrivateLocal1 = PyIB.ByPrivateLocal1
ByPrivateLocal2 = PyIB.ByPrivateLocal2
ByPrivateLocal3 = PyIB.ByPrivateLocal3
ByExtIndex = PyIB.ByExtIndex
ByExtIndex1 = PyIB.ByExtIndex1
ByExtIndex2 = PyIB.ByExtIndex2
ByExtIndex3 = PyIB.ByExtIndex3
ByExtIndex4 = PyIB.ByExtIndex4
ByExtIndex5 = PyIB.ByExtIndex5
ByExtIndex6 = PyIB.ByExtIndex6
ByExtIndex7 = PyIB.ByExtIndex7
ByExtIndex8 = PyIB.ByExtIndex8
ByExtIndex9 = PyIB.ByExtIndex9
ByExtIndex10 = PyIB.ByExtIndex10
ByExtIndex11 = PyIB.ByExtIndex11
ByExtIndex12 = PyIB.ByExtIndex12
OperatorERR = PyIB.OperatorERR
OperatorNoop = PyIB.OperatorNoop
OperatorNOT = PyIB.OperatorNOT
OperatorWithin = PyIB.OperatorWithin
OperatorXWithin = PyIB.OperatorXWithin
OperatorInside = PyIB.OperatorInside
OperatorInclusive = PyIB.OperatorInclusive
OperatorSibling = PyIB.OperatorSibling
OperatorNotWithin = PyIB.OperatorNotWithin
OperatorReduce = PyIB.OperatorReduce
OperatorHitCount = PyIB.OperatorHitCount
OperatorTrim = PyIB.OperatorTrim
OperatorWithinFile = PyIB.OperatorWithinFile
OperatorWithinFileExtension = PyIB.OperatorWithinFileExtension
OperatorWithinDoctype = PyIB.OperatorWithinDoctype
OperatorWithKey = PyIB.OperatorWithKey
OperatorSortBy = PyIB.OperatorSortBy
OperatorBoostScore = PyIB.OperatorBoostScore
OperatorOr = PyIB.OperatorOr
OperatorAnd = PyIB.OperatorAnd
OperatorAndNot = PyIB.OperatorAndNot
OperatorXor = PyIB.OperatorXor
OperatorXnor = PyIB.OperatorXnor
OperatorNotAnd = PyIB.OperatorNotAnd
OperatorNor = PyIB.OperatorNor
OperatorNand = PyIB.OperatorNand
OperatorLT = PyIB.OperatorLT
OperatorLTE = PyIB.OperatorLTE
OperatorGT = PyIB.OperatorGT
OperatorGTE = PyIB.OperatorGTE
OperatorJoin = PyIB.OperatorJoin
OperatorJoinL = PyIB.OperatorJoinL
OperatorJoinR = PyIB.OperatorJoinR
OperatorProximity = PyIB.OperatorProximity
OperatorBefore = PyIB.OperatorBefore
OperatorAfter = PyIB.OperatorAfter
OperatorAdj = PyIB.OperatorAdj
OperatorFollows = PyIB.OperatorFollows
OperatorPrecedes = PyIB.OperatorPrecedes
OperatorNear = PyIB.OperatorNear
OperatorFar = PyIB.OperatorFar
OperatorNeighbor = PyIB.OperatorNeighbor
OperatorAndWithin = PyIB.OperatorAndWithin
OperatorOrWithin = PyIB.OperatorOrWithin
OperatorBeforeWithin = PyIB.OperatorBeforeWithin
OperatorAfterWithin = PyIB.OperatorAfterWithin
OperatorPeer = PyIB.OperatorPeer
OperatorBeforePeer = PyIB.OperatorBeforePeer
OperatorAfterPeer = PyIB.OperatorAfterPeer
OperatorXPeer = PyIB.OperatorXPeer
OperatorKey = PyIB.OperatorKey
OperatorFile = PyIB.OperatorFile
Unnormalized = PyIB.Unnormalized
NoNormalization = PyIB.NoNormalization
CosineNormalization = PyIB.CosineNormalization
MaxNormalization = PyIB.MaxNormalization
LogNormalization = PyIB.LogNormalization
BytesNormalization = PyIB.BytesNormalization
preCosineMetricNormalization = PyIB.preCosineMetricNormalization
CosineMetricNormalization = PyIB.CosineMetricNormalization
UndefinedNormalization = PyIB.UndefinedNormalization
ELEMENT_Full = PyIB.ELEMENT_Full
ELEMENT_Brief = PyIB.ELEMENT_Brief
ELEMENT_Short = PyIB.ELEMENT_Short
ELEMENT_G = PyIB.ELEMENT_G
ELEMENT_Raw = PyIB.ELEMENT_Raw
ELEMENT_Location = PyIB.ELEMENT_Location
ELEMENT_Metadata = PyIB.ELEMENT_Metadata
RECORDSYNTAX_Sutrs = PyIB.RECORDSYNTAX_Sutrs
RECORDSYNTAX_Usmarc = PyIB.RECORDSYNTAX_Usmarc
RECORDSYNTAX_Html = PyIB.RECORDSYNTAX_Html
RECORDSYNTAX_Sgml = PyIB.RECORDSYNTAX_Sgml
RECORDSYNTAX_Xml = PyIB.RECORDSYNTAX_Xml
RECORDSYNTAX_Raw = PyIB.RECORDSYNTAX_Raw
RECORDSYNTAX_DVBHtml = PyIB.RECORDSYNTAX_DVBHtml
copyright = PyIB.copyright
version = PyIB.version
class ArraySTRING(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_ArraySTRING(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_ArraySTRING
    __del__ = lambda self : None;
    def Empty(self): return PyIB.ArraySTRING_Empty(self)
    def Clear(self): return PyIB.ArraySTRING_Clear(self)
    def Count(self): return PyIB.ArraySTRING_Count(self)
    def IsEmpty(self): return PyIB.ArraySTRING_IsEmpty(self)
    def Item(self, *args): return PyIB.ArraySTRING_Item(self, *args)
    def GetEntry(self, *args): return PyIB.ArraySTRING_GetEntry(self, *args)
    def __getitem__(self, *args): return PyIB.ArraySTRING___getitem__(self, *args)
    def SetEntry(self, *args): return PyIB.ArraySTRING_SetEntry(self, *args)
    def Add(self, *args): return PyIB.ArraySTRING_Add(self, *args)
    def Insert(self, *args): return PyIB.ArraySTRING_Insert(self, *args)
    def Replace(self, *args): return PyIB.ArraySTRING_Replace(self, *args)
    def Remove(self, *args): return PyIB.ArraySTRING_Remove(self, *args)
    def getself(self): return PyIB.ArraySTRING_getself(self)
    def asTuple(self): return PyIB.ArraySTRING_asTuple(self)
    def Join(self, *args): return PyIB.ArraySTRING_Join(self, *args)
ArraySTRING_swigregister = PyIB.ArraySTRING_swigregister
ArraySTRING_swigregister(ArraySTRING)

class IDB_STATS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = PyIB.new_IDB_STATS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_IDB_STATS
    __del__ = lambda self : None;
    def SetHits(self, *args): return PyIB.IDB_STATS_SetHits(self, *args)
    def SetTotal(self, *args): return PyIB.IDB_STATS_SetTotal(self, *args)
    def GetTotal(self): return PyIB.IDB_STATS_GetTotal(self)
    def GetHits(self): return PyIB.IDB_STATS_GetHits(self)
    def Clear(self): return PyIB.IDB_STATS_Clear(self)
    def SetName(self, *args): return PyIB.IDB_STATS_SetName(self, *args)
    def GetName(self): return PyIB.IDB_STATS_GetName(self)
IDB_STATS_swigregister = PyIB.IDB_STATS_swigregister
IDB_STATS_swigregister(IDB_STATS)

class VIDB_STATS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = PyIB.new_VIDB_STATS()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_VIDB_STATS
    __del__ = lambda self : None;
    def Clear(self): return PyIB.VIDB_STATS_Clear(self)
    def SetTotal(self, *args): return PyIB.VIDB_STATS_SetTotal(self, *args)
    def SetHits(self, *args): return PyIB.VIDB_STATS_SetHits(self, *args)
    def SetName(self, *args): return PyIB.VIDB_STATS_SetName(self, *args)
VIDB_STATS_swigregister = PyIB.VIDB_STATS_swigregister
VIDB_STATS_swigregister(VIDB_STATS)

class IDBOBJ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = PyIB.new_IDBOBJ()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_IDBOBJ
    __del__ = lambda self : None;
    def getUseRelativePaths(self): return PyIB.IDBOBJ_getUseRelativePaths(self)
    def setUseRelativePaths(self, val=1): return PyIB.IDBOBJ_setUseRelativePaths(self, val)
    def RelativizePathname(self, *args): return PyIB.IDBOBJ_RelativizePathname(self, *args)
    def ResolvePathname(self, *args): return PyIB.IDBOBJ_ResolvePathname(self, *args)
IDBOBJ_swigregister = PyIB.IDBOBJ_swigregister
IDBOBJ_swigregister(IDBOBJ)

class INDEX_ID(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_INDEX_ID(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_INDEX_ID
    __del__ = lambda self : None;
    def GetIndex(self): return PyIB.INDEX_ID_GetIndex(self)
    def SetIndex(self, *args): return PyIB.INDEX_ID_SetIndex(self, *args)
    def SetMdtIndex(self, *args): return PyIB.INDEX_ID_SetMdtIndex(self, *args)
    def GetMdtIndex(self): return PyIB.INDEX_ID_GetMdtIndex(self)
    def SetVirtualIndex(self, *args): return PyIB.INDEX_ID_SetVirtualIndex(self, *args)
    def GetVirtualIndex(self): return PyIB.INDEX_ID_GetVirtualIndex(self)
    def Equals(self, *args): return PyIB.INDEX_ID_Equals(self, *args)
    def Compare(self, *args): return PyIB.INDEX_ID_Compare(self, *args)
INDEX_ID_swigregister = PyIB.INDEX_ID_swigregister
INDEX_ID_swigregister(INDEX_ID)

class DOCTYPE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DOCTYPE(*args)
        try: self.this.append(this)
        except: self.this = this
    def ParseDate(self, *args): return PyIB.DOCTYPE_ParseDate(self, *args)
    def ParseDateRange(self, *args): return PyIB.DOCTYPE_ParseDateRange(self, *args)
    __swig_destroy__ = PyIB.delete_DOCTYPE
    __del__ = lambda self : None;
DOCTYPE_swigregister = PyIB.DOCTYPE_swigregister
DOCTYPE_swigregister(DOCTYPE)

class DTREG(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DTREG(*args)
        try: self.this.append(this)
        except: self.this = this
    def PluginExists(self, *args): return PyIB.DTREG_PluginExists(self, *args)
    def AddPluginPath(self, *args): return PyIB.DTREG_AddPluginPath(self, *args)
    def GetDocTypePtr(self, *args): return PyIB.DTREG_GetDocTypePtr(self, *args)
    def ValidateDocType(self, *args): return PyIB.DTREG_ValidateDocType(self, *args)
    def GetDocTypeList(self): return PyIB.DTREG_GetDocTypeList(self)
    def Version(self): return PyIB.DTREG_Version(self)
    __swig_destroy__ = PyIB.delete_DTREG
    __del__ = lambda self : None;
DTREG_swigregister = PyIB.DTREG_swigregister
DTREG_swigregister(DTREG)

class MDTREC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, MdtPtr=None): 
        this = PyIB.new_MDTREC(MdtPtr)
        try: self.this.append(this)
        except: self.this = this
    def SetCategory(self, *args): return PyIB.MDTREC_SetCategory(self, *args)
    def GetCategory(self): return PyIB.MDTREC_GetCategory(self)
    def SetPriority(self, *args): return PyIB.MDTREC_SetPriority(self, *args)
    def GetPriority(self): return PyIB.MDTREC_GetPriority(self)
    def SetKey(self, *args): return PyIB.MDTREC_SetKey(self, *args)
    def GetKey(self): return PyIB.MDTREC_GetKey(self)
    def SetDocumentType(self, *args): return PyIB.MDTREC_SetDocumentType(self, *args)
    def GetDocumentType(self): return PyIB.MDTREC_GetDocumentType(self)
    def SetPath(self, *args): return PyIB.MDTREC_SetPath(self, *args)
    def GetPath(self): return PyIB.MDTREC_GetPath(self)
    def SetFileName(self, *args): return PyIB.MDTREC_SetFileName(self, *args)
    def GetFileName(self): return PyIB.MDTREC_GetFileName(self)
    def SetFullFileName(self, *args): return PyIB.MDTREC_SetFullFileName(self, *args)
    def GetFullFileName(self): return PyIB.MDTREC_GetFullFileName(self)
    def SetGlobalFileStart(self, *args): return PyIB.MDTREC_SetGlobalFileStart(self, *args)
    def GetGlobalFileStart(self): return PyIB.MDTREC_GetGlobalFileStart(self)
    def SetLocalRecordStart(self, *args): return PyIB.MDTREC_SetLocalRecordStart(self, *args)
    def GetLocalRecordStart(self): return PyIB.MDTREC_GetLocalRecordStart(self)
    def SetLocalRecordEnd(self, *args): return PyIB.MDTREC_SetLocalRecordEnd(self, *args)
    def GetLocalRecordEnd(self): return PyIB.MDTREC_GetLocalRecordEnd(self)
    def SetLocale(self, *args): return PyIB.MDTREC_SetLocale(self, *args)
    def GetLocale(self): return PyIB.MDTREC_GetLocale(self)
    def SetDate(self, *args): return PyIB.MDTREC_SetDate(self, *args)
    def GetDate(self): return PyIB.MDTREC_GetDate(self)
    def SetDateModified(self, *args): return PyIB.MDTREC_SetDateModified(self, *args)
    def GetDateModified(self): return PyIB.MDTREC_GetDateModified(self)
    def SetDateCreated(self, *args): return PyIB.MDTREC_SetDateCreated(self, *args)
    def GetDateCreated(self): return PyIB.MDTREC_GetDateCreated(self)
    def SetDateExpires(self, *args): return PyIB.MDTREC_SetDateExpires(self, *args)
    def GetDateExpires(self): return PyIB.MDTREC_GetDateExpires(self)
    def TTL(self, *args): return PyIB.MDTREC_TTL(self, *args)
    def SetDeleted(self, *args): return PyIB.MDTREC_SetDeleted(self, *args)
    def GetDeleted(self): return PyIB.MDTREC_GetDeleted(self)
    def FlipBytes(self): return PyIB.MDTREC_FlipBytes(self)
    def Dump(self): return PyIB.MDTREC_Dump(self)
    __swig_destroy__ = PyIB.delete_MDTREC
    __del__ = lambda self : None;
MDTREC_swigregister = PyIB.MDTREC_swigregister
MDTREC_swigregister(MDTREC)

class MDT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_MDT(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetFileStem(self): return PyIB.MDT_GetFileStem(self)
    def SetEntry(self, *args): return PyIB.MDT_SetEntry(self, *args)
    def LookupByKey(self, *args): return PyIB.MDT_LookupByKey(self, *args)
    def GetEntry(self, *args): return PyIB.MDT_GetEntry(self, *args)
    def Delete(self, *args): return PyIB.MDT_Delete(self, *args)
    def UnDelete(self, *args): return PyIB.MDT_UnDelete(self, *args)
    def IsDeleted(self, *args): return PyIB.MDT_IsDeleted(self, *args)
    def GetTotalEntries(self): return PyIB.MDT_GetTotalEntries(self)
    def GetTotalDeleted(self): return PyIB.MDT_GetTotalDeleted(self)
    def GetChanged(self): return PyIB.MDT_GetChanged(self)
    def RemoveDeleted(self): return PyIB.MDT_RemoveDeleted(self)
    def Ok(self): return PyIB.MDT_Ok(self)
    __swig_destroy__ = PyIB.delete_MDT
    __del__ = lambda self : None;
MDT_swigregister = PyIB.MDT_swigregister
MDT_swigregister(MDT)

class FC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_FC(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(self, *args): return PyIB.FC_Write(self, *args)
    def Read(self, *args): return PyIB.FC_Read(self, *args)
    def SetFieldStart(self, *args): return PyIB.FC_SetFieldStart(self, *args)
    def SetFieldEnd(self, *args): return PyIB.FC_SetFieldEnd(self, *args)
    def GetFieldStart(self): return PyIB.FC_GetFieldStart(self)
    def GetFieldEnd(self): return PyIB.FC_GetFieldEnd(self)
    def GetLength(self): return PyIB.FC_GetLength(self)
    def Compare(self, *args): return PyIB.FC_Compare(self, *args)
    def Contains(self, *args): return PyIB.FC_Contains(self, *args)
    def asTuple(self): return PyIB.FC_asTuple(self)
    def FlipBytes(self): return PyIB.FC_FlipBytes(self)
    __swig_destroy__ = PyIB.delete_FC
    __del__ = lambda self : None;
FC_swigregister = PyIB.FC_swigregister
FC_swigregister(FC)

class TREENODE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_TREENODE(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_TREENODE
    __del__ = lambda self : None;
    def Name(self): return PyIB.TREENODE_Name(self)
    def Fc(self): return PyIB.TREENODE_Fc(self)
TREENODE_swigregister = PyIB.TREENODE_swigregister
TREENODE_swigregister(TREENODE)

class NODETREE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_NODETREE(*args)
        try: self.this.append(this)
        except: self.this = this
    def AddEntry(self, *args): return PyIB.NODETREE_AddEntry(self, *args)
    def Clear(self): return PyIB.NODETREE_Clear(self)
    def Reverse(self): return PyIB.NODETREE_Reverse(self)
    def Sort(self): return PyIB.NODETREE_Sort(self)
    def IsSorted(self): return PyIB.NODETREE_IsSorted(self)
    def IsEmpty(self): return PyIB.NODETREE_IsEmpty(self)
    def GetEntry(self, *args): return PyIB.NODETREE_GetEntry(self, *args)
    def XMLNodeTree(self, value=""): return PyIB.NODETREE_XMLNodeTree(self, value)
    __swig_destroy__ = PyIB.delete_NODETREE
    __del__ = lambda self : None;
NODETREE_swigregister = PyIB.NODETREE_swigregister
NODETREE_swigregister(NODETREE)

class RESULT(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_RESULT(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(self, *args): return PyIB.RESULT_Write(self, *args)
    def Read(self, *args): return PyIB.RESULT_Read(self, *args)
    def SetIndex(self, *args): return PyIB.RESULT_SetIndex(self, *args)
    def GetIndex(self): return PyIB.RESULT_GetIndex(self)
    def SetMdtIndex(self, *args): return PyIB.RESULT_SetMdtIndex(self, *args)
    def GetMdtIndex(self): return PyIB.RESULT_GetMdtIndex(self)
    def SetVirtualIndex(self, *args): return PyIB.RESULT_SetVirtualIndex(self, *args)
    def GetVirtualIndex(self): return PyIB.RESULT_GetVirtualIndex(self)
    def GetCategory(self): return PyIB.RESULT_GetCategory(self)
    def SetCategory(self, *args): return PyIB.RESULT_SetCategory(self, *args)
    def SetKey(self, *args): return PyIB.RESULT_SetKey(self, *args)
    def GetKey(self): return PyIB.RESULT_GetKey(self)
    def GetGlobalKey(self): return PyIB.RESULT_GetGlobalKey(self)
    def GetLanguageCode(self): return PyIB.RESULT_GetLanguageCode(self)
    def GetCharsetCode(self): return PyIB.RESULT_GetCharsetCode(self)
    def GetLanguageName(self): return PyIB.RESULT_GetLanguageName(self)
    def GetCharsetName(self): return PyIB.RESULT_GetCharsetName(self)
    def GetFullFileName(self): return PyIB.RESULT_GetFullFileName(self)
    def GetPath(self): return PyIB.RESULT_GetPath(self)
    def GetFileName(self): return PyIB.RESULT_GetFileName(self)
    def GetDoctype(self): return PyIB.RESULT_GetDoctype(self)
    def GetRecordStart(self): return PyIB.RESULT_GetRecordStart(self)
    def GetRecordEnd(self): return PyIB.RESULT_GetRecordEnd(self)
    def GetLength(self): return PyIB.RESULT_GetLength(self)
    def GetRecordSize(self): return PyIB.RESULT_GetRecordSize(self)
    def GetScore(self): return PyIB.RESULT_GetScore(self)
    def GetAuxCount(self): return PyIB.RESULT_GetAuxCount(self)
    def GetHitTotal(self): return PyIB.RESULT_GetHitTotal(self)
    def GetDate(self): return PyIB.RESULT_GetDate(self)
    def GetDateModified(self): return PyIB.RESULT_GetDateModified(self)
    def GetDateCreated(self): return PyIB.RESULT_GetDateCreated(self)
    def GetHitTable(self): return PyIB.RESULT_GetHitTable(self)
    def GetRefcount_(self): return PyIB.RESULT_GetRefcount_(self)
    def XMLHitTable(self): return PyIB.RESULT_XMLHitTable(self)
    __swig_destroy__ = PyIB.delete_RESULT
    __del__ = lambda self : None;
RESULT_swigregister = PyIB.RESULT_swigregister
RESULT_swigregister(RESULT)

class IRSET(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_IRSET(*args)
        try: self.this.append(this)
        except: self.this = this
    def getself(self): return PyIB.IRSET_getself(self)
    def Write(self, *args): return PyIB.IRSET_Write(self, *args)
    def Read(self, *args): return PyIB.IRSET_Read(self, *args)
    def LoadTable(self, *args): return PyIB.IRSET_LoadTable(self, *args)
    def SaveTable(self, *args): return PyIB.IRSET_SaveTable(self, *args)
    def SaveSearch(self, *args): return PyIB.IRSET_SaveSearch(self, *args)
    def LoadSearch(self, *args): return PyIB.IRSET_LoadSearch(self, *args)
    def GetRset(self, Total=0): return PyIB.IRSET_GetRset(self, Total)
    def Fill(self, *args): return PyIB.IRSET_Fill(self, *args)
    def GetTotalEntries(self): return PyIB.IRSET_GetTotalEntries(self)
    def GetHitTotal(self): return PyIB.IRSET_GetHitTotal(self)
    def Join(self, *args): return PyIB.IRSET_Join(self, *args)
    def Or(self, *args): return PyIB.IRSET_Or(self, *args)
    def Nor(self, *args): return PyIB.IRSET_Nor(self, *args)
    def And(self, *args): return PyIB.IRSET_And(self, *args)
    def Nand(self, *args): return PyIB.IRSET_Nand(self, *args)
    def AndNot(self, *args): return PyIB.IRSET_AndNot(self, *args)
    def Xor(self, *args): return PyIB.IRSET_Xor(self, *args)
    def Near(self, *args): return PyIB.IRSET_Near(self, *args)
    def Far(self, *args): return PyIB.IRSET_Far(self, *args)
    def After(self, *args): return PyIB.IRSET_After(self, *args)
    def Before(self, *args): return PyIB.IRSET_Before(self, *args)
    def Adj(self, *args): return PyIB.IRSET_Adj(self, *args)
    def Follows(self, *args): return PyIB.IRSET_Follows(self, *args)
    def Precedes(self, *args): return PyIB.IRSET_Precedes(self, *args)
    def Neighbor(self, *args): return PyIB.IRSET_Neighbor(self, *args)
    def Peer(self, *args): return PyIB.IRSET_Peer(self, *args)
    def BeforePeer(self, *args): return PyIB.IRSET_BeforePeer(self, *args)
    def AfterPeer(self, *args): return PyIB.IRSET_AfterPeer(self, *args)
    def XPeer(self, *args): return PyIB.IRSET_XPeer(self, *args)
    def Within(self, *args): return PyIB.IRSET_Within(self, *args)
    def BeforeWithin(self, *args): return PyIB.IRSET_BeforeWithin(self, *args)
    def AfterWithin(self, *args): return PyIB.IRSET_AfterWithin(self, *args)
    def XWithin(self, *args): return PyIB.IRSET_XWithin(self, *args)
    def Inside(self, *args): return PyIB.IRSET_Inside(self, *args)
    def Inclusive(self, *args): return PyIB.IRSET_Inclusive(self, *args)
    def WithinXChars(self, *args): return PyIB.IRSET_WithinXChars(self, *args)
    def WithinXChars_Before(self, *args): return PyIB.IRSET_WithinXChars_Before(self, *args)
    def WithinXChars_After(self, *args): return PyIB.IRSET_WithinXChars_After(self, *args)
    def WithinXPercent(self, *args): return PyIB.IRSET_WithinXPercent(self, *args)
    def WithinXPercent_Before(self, *args): return PyIB.IRSET_WithinXPercent_Before(self, *args)
    def WithinXPercent_After(self, *args): return PyIB.IRSET_WithinXPercent_After(self, *args)
    def WithinFile(self, *args): return PyIB.IRSET_WithinFile(self, *args)
    def WithinDoctype(self, *args): return PyIB.IRSET_WithinDoctype(self, *args)
    def WithKey(self, *args): return PyIB.IRSET_WithKey(self, *args)
    def Not(self): return PyIB.IRSET_Not(self)
    def Sibling(self): return PyIB.IRSET_Sibling(self)
    def Reduce(self, Value=0): return PyIB.IRSET_Reduce(self, Value)
    def Trim(self, Value=0): return PyIB.IRSET_Trim(self, Value)
    def HitCount(self, Value=0): return PyIB.IRSET_HitCount(self, Value)
    def BoostScore(self, Weight=1.0): return PyIB.IRSET_BoostScore(self, Weight)
    def ComputeScores(self, *args): return PyIB.IRSET_ComputeScores(self, *args)
    def SortBy(self, *args): return PyIB.IRSET_SortBy(self, *args)
    def GetMaxScore(self): return PyIB.IRSET_GetMaxScore(self)
    def GetMinScore(self): return PyIB.IRSET_GetMinScore(self)
    def setPrivateSortUserData(self, *args): return PyIB.IRSET_setPrivateSortUserData(self, *args)
    def getPrivateSortUserData(self): return PyIB.IRSET_getPrivateSortUserData(self)
    def installSortFunction(self, *args): return PyIB.IRSET_installSortFunction(self, *args)
    __swig_destroy__ = PyIB.delete_IRSET
    __del__ = lambda self : None;
IRSET_swigregister = PyIB.IRSET_swigregister
IRSET_swigregister(IRSET)

class RSET(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, Reserve=0): 
        this = PyIB.new_RSET(Reserve)
        try: self.this.append(this)
        except: self.this = this
    def getself(self): return PyIB.RSET_getself(self)
    def Write(self, *args): return PyIB.RSET_Write(self, *args)
    def Read(self, *args): return PyIB.RSET_Read(self, *args)
    def Cat(self, *args): return PyIB.RSET_Cat(self, *args)
    def LoadTable(self, *args): return PyIB.RSET_LoadTable(self, *args)
    def SaveTable(self, *args): return PyIB.RSET_SaveTable(self, *args)
    def GetMaxScore(self): return PyIB.RSET_GetMaxScore(self)
    def GetMinScore(self): return PyIB.RSET_GetMinScore(self)
    def FilterDateRange(self, *args): return PyIB.RSET_FilterDateRange(self, *args)
    def GetEntry(self, *args): return PyIB.RSET_GetEntry(self, *args)
    def GetScaledScore(self, *args): return PyIB.RSET_GetScaledScore(self, *args)
    def GetHitTotal(self): return PyIB.RSET_GetHitTotal(self)
    def Find(self, *args): return PyIB.RSET_Find(self, *args)
    def GetTotalEntries(self): return PyIB.RSET_GetTotalEntries(self)
    def SortBy(self, *args): return PyIB.RSET_SortBy(self, *args)
    def SortByCategoryMagnetism(self, *args): return PyIB.RSET_SortByCategoryMagnetism(self, *args)
    def Reduce(self, *args): return PyIB.RSET_Reduce(self, *args)
    def DropByTerms(self, *args): return PyIB.RSET_DropByTerms(self, *args)
    def DropByScore(self, *args): return PyIB.RSET_DropByScore(self, *args)
    def __getitem__(self, *args): return PyIB.RSET___getitem__(self, *args)
    __swig_destroy__ = PyIB.delete_RSET
    __del__ = lambda self : None;
RSET_swigregister = PyIB.RSET_swigregister
RSET_swigregister(RSET)

class INFIX2RPN(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = PyIB.new_INFIX2RPN()
        try: self.this.append(this)
        except: self.this = this
    def Parse(self, *args): return PyIB.INFIX2RPN_Parse(self, *args)
    def InputParsedOK(self): return PyIB.INFIX2RPN_InputParsedOK(self)
    def GetErrorMessage(self): return PyIB.INFIX2RPN_GetErrorMessage(self)
    __swig_destroy__ = PyIB.delete_INFIX2RPN
    __del__ = lambda self : None;
INFIX2RPN_swigregister = PyIB.INFIX2RPN_swigregister
INFIX2RPN_swigregister(INFIX2RPN)

class THESAURUS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_THESAURUS(*args)
        try: self.this.append(this)
        except: self.this = this
    def Compile(self, *args): return PyIB.THESAURUS_Compile(self, *args)
    def SetFileName(self, *args): return PyIB.THESAURUS_SetFileName(self, *args)
    __swig_destroy__ = PyIB.delete_THESAURUS
    __del__ = lambda self : None;
THESAURUS_swigregister = PyIB.THESAURUS_swigregister
THESAURUS_swigregister(THESAURUS)

class OPERATOR(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = PyIB.new_OPERATOR()
        try: self.this.append(this)
        except: self.this = this
    def GetOpType(self): return PyIB.OPERATOR_GetOpType(self)
    def SetOperatorType(self, *args): return PyIB.OPERATOR_SetOperatorType(self, *args)
    def GetOperatorType(self): return PyIB.OPERATOR_GetOperatorType(self)
    def SetOperatorMetric(self, *args): return PyIB.OPERATOR_SetOperatorMetric(self, *args)
    def GetOperatorMetric(self): return PyIB.OPERATOR_GetOperatorMetric(self)
    def SetOperatorString(self, *args): return PyIB.OPERATOR_SetOperatorString(self, *args)
    def GetOperatorString(self): return PyIB.OPERATOR_GetOperatorString(self)
    __swig_destroy__ = PyIB.delete_OPERATOR
    __del__ = lambda self : None;
OPERATOR_swigregister = PyIB.OPERATOR_swigregister
OPERATOR_swigregister(OPERATOR)

QueryAutodetect = PyIB.QueryAutodetect
QueryRPN = PyIB.QueryRPN
QueryInfix = PyIB.QueryInfix
QueryRelevantId = PyIB.QueryRelevantId
class SQUERY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = PyIB.new_SQUERY(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(self, *args): return PyIB.SQUERY_Write(self, *args)
    def Read(self, *args): return PyIB.SQUERY_Read(self, *args)
    def __repr__(self): return PyIB.SQUERY___repr__(self)
    def GetTotalTerms(self): return PyIB.SQUERY_GetTotalTerms(self)
    def SetOperator(self, *args): return PyIB.SQUERY_SetOperator(self, *args)
    def SetOperatorAndWithin(self, *args): return PyIB.SQUERY_SetOperatorAndWithin(self, *args)
    def SetOperatorNear(self): return PyIB.SQUERY_SetOperatorNear(self)
    def SetOperatorPeer(self): return PyIB.SQUERY_SetOperatorPeer(self)
    def SetAttributes(self, *args): return PyIB.SQUERY_SetAttributes(self, *args)
    def isPlainQuery(self): return PyIB.SQUERY_isPlainQuery(self)
    def isOpQuery(self, *args): return PyIB.SQUERY_isOpQuery(self, *args)
    def SetRelevantTerm(self, *args): return PyIB.SQUERY_SetRelevantTerm(self, *args)
    def SetInfixTerm(self, *args): return PyIB.SQUERY_SetInfixTerm(self, *args)
    def SetRpnTerm(self, *args): return PyIB.SQUERY_SetRpnTerm(self, *args)
    def SetQueryTerm(self, *args): return PyIB.SQUERY_SetQueryTerm(self, *args)
    def SetQueryTermUTF(self, *args): return PyIB.SQUERY_SetQueryTermUTF(self, *args)
    def SetWordsAnd(self, *args): return PyIB.SQUERY_SetWordsAnd(self, *args)
    def SetWords(self, *args): return PyIB.SQUERY_SetWords(self, *args)
    def SetFreeFormWords(self, *args): return PyIB.SQUERY_SetFreeFormWords(self, *args)
    def SetFreeFormWordsPhonetic(self, *args): return PyIB.SQUERY_SetFreeFormWordsPhonetic(self, *args)
    def LastErrorMessage(self): return PyIB.SQUERY_LastErrorMessage(self)
    def GetRpnTerm(self): return PyIB.SQUERY_GetRpnTerm(self)
    def Cat(self, *args): return PyIB.SQUERY_Cat(self, *args)
    def OpenThesaurus(self, *args): return PyIB.SQUERY_OpenThesaurus(self, *args)
    def CloseThesaurus(self): return PyIB.SQUERY_CloseThesaurus(self)
    def ExpandQuery(self): return PyIB.SQUERY_ExpandQuery(self)
    __swig_destroy__ = PyIB.delete_SQUERY
    __del__ = lambda self : None;
SQUERY_swigregister = PyIB.SQUERY_swigregister
SQUERY_swigregister(SQUERY)

class QUERY(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_QUERY(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetSQUERY(self, *args): return PyIB.QUERY_SetSQUERY(self, *args)
    def GetSQUERY(self): return PyIB.QUERY_GetSQUERY(self)
    def SetNormalizationMethod(self, *args): return PyIB.QUERY_SetNormalizationMethod(self, *args)
    def GetNormalizationMethod(self): return PyIB.QUERY_GetNormalizationMethod(self)
    def SetSortBy(self, *args): return PyIB.QUERY_SetSortBy(self, *args)
    def GetSortBy(self): return PyIB.QUERY_GetSortBy(self)
    def GetMaximumResults(self): return PyIB.QUERY_GetMaximumResults(self)
    def SetMaximumResults(self, *args): return PyIB.QUERY_SetMaximumResults(self, *args)
    def Write(self, *args): return PyIB.QUERY_Write(self, *args)
    def Read(self, *args): return PyIB.QUERY_Read(self, *args)
    def asTuple(self): return PyIB.QUERY_asTuple(self)
    __swig_destroy__ = PyIB.delete_QUERY
    __del__ = lambda self : None;
QUERY_swigregister = PyIB.QUERY_swigregister
QUERY_swigregister(QUERY)

class SRCH_DATE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args): 
        this = PyIB.new_SRCH_DATE(*args)
        try: self.this.append(this)
        except: self.this = this
    def Write(self, *args): return PyIB.SRCH_DATE_Write(self, *args)
    def Read(self, *args): return PyIB.SRCH_DATE_Read(self, *args)
    def __repr__(self): return PyIB.SRCH_DATE___repr__(self)
    def Plus(self, *args): return PyIB.SRCH_DATE_Plus(self, *args)
    def Minus(self, *args): return PyIB.SRCH_DATE_Minus(self, *args)
    def PlusNseconds(self, *args): return PyIB.SRCH_DATE_PlusNseconds(self, *args)
    def PlusNminutes(self, *args): return PyIB.SRCH_DATE_PlusNminutes(self, *args)
    def PlusNhours(self, *args): return PyIB.SRCH_DATE_PlusNhours(self, *args)
    def PlusNdays(self, *args): return PyIB.SRCH_DATE_PlusNdays(self, *args)
    def PlusNweeks(self, *args): return PyIB.SRCH_DATE_PlusNweeks(self, *args)
    def PlusNmonths(self, *args): return PyIB.SRCH_DATE_PlusNmonths(self, *args)
    def PlusNyears(self, *args): return PyIB.SRCH_DATE_PlusNyears(self, *args)
    def MinusNseconds(self, *args): return PyIB.SRCH_DATE_MinusNseconds(self, *args)
    def MinusNminutes(self, *args): return PyIB.SRCH_DATE_MinusNminutes(self, *args)
    def MinusNhours(self, *args): return PyIB.SRCH_DATE_MinusNhours(self, *args)
    def MinusNdays(self, *args): return PyIB.SRCH_DATE_MinusNdays(self, *args)
    def MinusNweeks(self, *args): return PyIB.SRCH_DATE_MinusNweeks(self, *args)
    def MinusNmonths(self, *args): return PyIB.SRCH_DATE_MinusNmonths(self, *args)
    def MinusNyears(self, *args): return PyIB.SRCH_DATE_MinusNyears(self, *args)
    def Tommorrow(self): return PyIB.SRCH_DATE_Tommorrow(self)
    def Yesterday(self): return PyIB.SRCH_DATE_Yesterday(self)
    def NextWeek(self): return PyIB.SRCH_DATE_NextWeek(self)
    def LastWeek(self): return PyIB.SRCH_DATE_LastWeek(self)
    def NextMonth(self): return PyIB.SRCH_DATE_NextMonth(self)
    def LastMonth(self): return PyIB.SRCH_DATE_LastMonth(self)
    def NextYear(self): return PyIB.SRCH_DATE_NextYear(self)
    def LastYear(self): return PyIB.SRCH_DATE_LastYear(self)
    def GetValue(self): return PyIB.SRCH_DATE_GetValue(self)
    def IsYearDate(self): return PyIB.SRCH_DATE_IsYearDate(self)
    def IsMonthDate(self): return PyIB.SRCH_DATE_IsMonthDate(self)
    def IsDayDate(self): return PyIB.SRCH_DATE_IsDayDate(self)
    def IsBogusDate(self): return PyIB.SRCH_DATE_IsBogusDate(self)
    def IsValidDate(self): return PyIB.SRCH_DATE_IsValidDate(self)
    def IsLeapYear(self): return PyIB.SRCH_DATE_IsLeapYear(self)
    def Ok(self): return PyIB.SRCH_DATE_Ok(self)
    def TrimToMonth(self): return PyIB.SRCH_DATE_TrimToMonth(self)
    def TrimToYear(self): return PyIB.SRCH_DATE_TrimToYear(self)
    def SetToYearStart(self): return PyIB.SRCH_DATE_SetToYearStart(self)
    def SetToYearEnd(self): return PyIB.SRCH_DATE_SetToYearEnd(self)
    def SetToMonthStart(self): return PyIB.SRCH_DATE_SetToMonthStart(self)
    def SetToMonthEnd(self): return PyIB.SRCH_DATE_SetToMonthEnd(self)
    def SetToDayStart(self): return PyIB.SRCH_DATE_SetToDayStart(self)
    def SetToDayEnd(self): return PyIB.SRCH_DATE_SetToDayEnd(self)
    def PromoteToMonthStart(self): return PyIB.SRCH_DATE_PromoteToMonthStart(self)
    def PromoteToMonthEnd(self): return PyIB.SRCH_DATE_PromoteToMonthEnd(self)
    def PromoteToDayStart(self): return PyIB.SRCH_DATE_PromoteToDayStart(self)
    def PromoteToDayEnd(self): return PyIB.SRCH_DATE_PromoteToDayEnd(self)
    def GetTodaysDate(self): return PyIB.SRCH_DATE_GetTodaysDate(self)
    def SetNow(self): return PyIB.SRCH_DATE_SetNow(self)
    def SetYear(self, *args): return PyIB.SRCH_DATE_SetYear(self, *args)
    def SetMonth(self, *args): return PyIB.SRCH_DATE_SetMonth(self, *args)
    def SetDay(self, *args): return PyIB.SRCH_DATE_SetDay(self, *args)
    def Year(self): return PyIB.SRCH_DATE_Year(self)
    def Month(self): return PyIB.SRCH_DATE_Month(self)
    def Day(self): return PyIB.SRCH_DATE_Day(self)
    def DayOfWeek(self): return PyIB.SRCH_DATE_DayOfWeek(self)
    def DayOfYear(self): return PyIB.SRCH_DATE_DayOfYear(self)
    def GetFirstDayOfMonth(self): return PyIB.SRCH_DATE_GetFirstDayOfMonth(self)
    def GetWeekOfMonth(self): return PyIB.SRCH_DATE_GetWeekOfMonth(self)
    def WeekOfYear(self): return PyIB.SRCH_DATE_WeekOfYear(self)
    def GetDaysInMonth(self): return PyIB.SRCH_DATE_GetDaysInMonth(self)
    def GetJulianDate(self): return PyIB.SRCH_DATE_GetJulianDate(self)
    def GetTimeSeconds(self): return PyIB.SRCH_DATE_GetTimeSeconds(self)
    def SetTimeOfFile(self, *args): return PyIB.SRCH_DATE_SetTimeOfFile(self, *args)
    def SetTimeOfFileCreation(self, *args): return PyIB.SRCH_DATE_SetTimeOfFileCreation(self, *args)
    def GetTimeOfFile(self, *args): return PyIB.SRCH_DATE_GetTimeOfFile(self, *args)
    def GetTimeOfFileCreation(self, *args): return PyIB.SRCH_DATE_GetTimeOfFileCreation(self, *args)
    def IsBefore(self, *args): return PyIB.SRCH_DATE_IsBefore(self, *args)
    def Equals(self, *args): return PyIB.SRCH_DATE_Equals(self, *args)
    def IsDuring(self, *args): return PyIB.SRCH_DATE_IsDuring(self, *args)
    def IsAfter(self, *args): return PyIB.SRCH_DATE_IsAfter(self, *args)
    def ISOdate(self): return PyIB.SRCH_DATE_ISOdate(self)
    def RFCdate(self): return PyIB.SRCH_DATE_RFCdate(self)
    def ANSIdate(self): return PyIB.SRCH_DATE_ANSIdate(self)
    def LCdate(self): return PyIB.SRCH_DATE_LCdate(self)
    def Strftime(self, *args): return PyIB.SRCH_DATE_Strftime(self, *args)
    def __cmp__(self, *args): return PyIB.SRCH_DATE___cmp__(self, *args)
    __swig_destroy__ = PyIB.delete_SRCH_DATE
    __del__ = lambda self : None;
SRCH_DATE_swigregister = PyIB.SRCH_DATE_swigregister
SRCH_DATE_swigregister(SRCH_DATE)

class DATERANGE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DATERANGE(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetStart(self): return PyIB.DATERANGE_GetStart(self)
    def GetEnd(self): return PyIB.DATERANGE_GetEnd(self)
    def SetStart(self, *args): return PyIB.DATERANGE_SetStart(self, *args)
    def SetEnd(self, *args): return PyIB.DATERANGE_SetEnd(self, *args)
    def Ok(self): return PyIB.DATERANGE_Ok(self)
    def Defined(self): return PyIB.DATERANGE_Defined(self)
    def Contains(self, *args): return PyIB.DATERANGE_Contains(self, *args)
    def ISO(self): return PyIB.DATERANGE_ISO(self)
    def RFC(self): return PyIB.DATERANGE_RFC(self)
    def Strftime(self, *args): return PyIB.DATERANGE_Strftime(self, *args)
    def Write(self, *args): return PyIB.DATERANGE_Write(self, *args)
    def Read(self, *args): return PyIB.DATERANGE_Read(self, *args)
    __swig_destroy__ = PyIB.delete_DATERANGE
    __del__ = lambda self : None;
    def asTuple(self): return PyIB.DATERANGE_asTuple(self)
    def Duration(self): return PyIB.DATERANGE_Duration(self)
DATERANGE_swigregister = PyIB.DATERANGE_swigregister
DATERANGE_swigregister(DATERANGE)

class SCANOBJ(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_SCANOBJ(*args)
        try: self.this.append(this)
        except: self.this = this
    def Frequency(self): return PyIB.SCANOBJ_Frequency(self)
    def Term(self): return PyIB.SCANOBJ_Term(self)
    __swig_destroy__ = PyIB.delete_SCANOBJ
    __del__ = lambda self : None;
    def asTuple(self): return PyIB.SCANOBJ_asTuple(self)
SCANOBJ_swigregister = PyIB.SCANOBJ_swigregister
SCANOBJ_swigregister(SCANOBJ)

class SCANLIST(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_SCANLIST(*args)
        try: self.this.append(this)
        except: self.this = this
    def Reverse(self): return PyIB.SCANLIST_Reverse(self)
    def IsEmpty(self): return PyIB.SCANLIST_IsEmpty(self)
    def GetTotalEntries(self): return PyIB.SCANLIST_GetTotalEntries(self)
    def GetEntry(self, *args): return PyIB.SCANLIST_GetEntry(self, *args)
    __swig_destroy__ = PyIB.delete_SCANLIST
    __del__ = lambda self : None;
    def Get(self): return PyIB.SCANLIST_Get(self)
    def __getitem__(self, *args): return PyIB.SCANLIST___getitem__(self, *args)
SCANLIST_swigregister = PyIB.SCANLIST_swigregister
SCANLIST_swigregister(SCANLIST)

class DOCTYPE_ID(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DOCTYPE_ID(*args)
        try: self.this.append(this)
        except: self.this = this
    def DocumentType(self): return PyIB.DOCTYPE_ID_DocumentType(self)
    def Set(self, *args): return PyIB.DOCTYPE_ID_Set(self, *args)
    def Get(self): return PyIB.DOCTYPE_ID_Get(self)
    def c_str(self): return PyIB.DOCTYPE_ID_c_str(self)
    def IsDefined(self): return PyIB.DOCTYPE_ID_IsDefined(self)
    def Equals(self, *args): return PyIB.DOCTYPE_ID_Equals(self, *args)
    __swig_destroy__ = PyIB.delete_DOCTYPE_ID
    __del__ = lambda self : None;
DOCTYPE_ID_swigregister = PyIB.DOCTYPE_ID_swigregister
DOCTYPE_ID_swigregister(DOCTYPE_ID)

class DOC_ID(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_DOC_ID(*args)
        try: self.this.append(this)
        except: self.this = this
    def Equals(self, *args): return PyIB.DOC_ID_Equals(self, *args)
    def Compare(self, *args): return PyIB.DOC_ID_Compare(self, *args)
    def GlobalKey(self): return PyIB.DOC_ID_GlobalKey(self)
    __swig_destroy__ = PyIB.delete_DOC_ID
    __del__ = lambda self : None;
DOC_ID_swigregister = PyIB.DOC_ID_swigregister
DOC_ID_swigregister(DOC_ID)

class RECORD(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_RECORD(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetKey(self, *args): return PyIB.RECORD_SetKey(self, *args)
    def GetKey(self): return PyIB.RECORD_GetKey(self)
    def SetPath(self, *args): return PyIB.RECORD_SetPath(self, *args)
    def GetPath(self): return PyIB.RECORD_GetPath(self)
    def SetFileName(self, *args): return PyIB.RECORD_SetFileName(self, *args)
    def GetFileName(self): return PyIB.RECORD_GetFileName(self)
    def SetFullFileName(self, *args): return PyIB.RECORD_SetFullFileName(self, *args)
    def GetFullFileName(self): return PyIB.RECORD_GetFullFileName(self)
    def SetRecordStart(self, *args): return PyIB.RECORD_SetRecordStart(self, *args)
    def GetRecordStart(self): return PyIB.RECORD_GetRecordStart(self)
    def SetRecordEnd(self, *args): return PyIB.RECORD_SetRecordEnd(self, *args)
    def GetRecordEnd(self): return PyIB.RECORD_GetRecordEnd(self)
    def SetDocumentType(self, *args): return PyIB.RECORD_SetDocumentType(self, *args)
    def GetDocumentType(self): return PyIB.RECORD_GetDocumentType(self)
    def GetLocale(self): return PyIB.RECORD_GetLocale(self)
    def SetLocale(self, *args): return PyIB.RECORD_SetLocale(self, *args)
    def SetLanguage(self, *args): return PyIB.RECORD_SetLanguage(self, *args)
    def SetCharset(self, *args): return PyIB.RECORD_SetCharset(self, *args)
    def GetDate(self): return PyIB.RECORD_GetDate(self)
    def SetDate(self, *args): return PyIB.RECORD_SetDate(self, *args)
    def SetDateModified(self, *args): return PyIB.RECORD_SetDateModified(self, *args)
    def GetDateModified(self): return PyIB.RECORD_GetDateModified(self)
    def SetDateCreated(self, *args): return PyIB.RECORD_SetDateCreated(self, *args)
    def GetDateCreated(self): return PyIB.RECORD_GetDateCreated(self)
    def GetPriority(self): return PyIB.RECORD_GetPriority(self)
    def SetPriority(self, *args): return PyIB.RECORD_SetPriority(self, *args)
    def GetCategory(self): return PyIB.RECORD_GetCategory(self)
    def SetCategory(self, *args): return PyIB.RECORD_SetCategory(self, *args)
    def __len__(self): return PyIB.RECORD___len__(self)
    def SetDateExpires(self, *args): return PyIB.RECORD_SetDateExpires(self, *args)
    def GetDateExpires(self): return PyIB.RECORD_GetDateExpires(self)
    def TTL(self, *args): return PyIB.RECORD_TTL(self, *args)
    __swig_destroy__ = PyIB.delete_RECORD
    __del__ = lambda self : None;
RECORD_swigregister = PyIB.RECORD_swigregister
RECORD_swigregister(RECORD)

class FCACHE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_FCACHE(*args)
        try: self.this.append(this)
        except: self.this = this
    def Ok(self): return PyIB.FCACHE_Ok(self)
    def ValidateInField(self, *args): return PyIB.FCACHE_ValidateInField(self, *args)
    def GetTotal(self): return PyIB.FCACHE_GetTotal(self)
    def SetFieldName(self, *args): return PyIB.FCACHE_SetFieldName(self, *args)
    def GetFieldName(self): return PyIB.FCACHE_GetFieldName(self)
    __swig_destroy__ = PyIB.delete_FCACHE
    __del__ = lambda self : None;
FCACHE_swigregister = PyIB.FCACHE_swigregister
FCACHE_swigregister(FCACHE)

iNothing = PyIB.iNothing
iOptimize = PyIB.iOptimize
iMerge = PyIB.iMerge
iCollapse = PyIB.iCollapse
iIncremental = PyIB.iIncremental
class IDB(IDBOBJ):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_IDB(*args)
        try: self.this.append(this)
        except: self.this = this
    def Open(self, *args): return PyIB.IDB_Open(self, *args)
    def Close(self): return PyIB.IDB_Close(self)
    def SetDebugMode(self, *args): return PyIB.IDB_SetDebugMode(self, *args)
    def FirstKey(self): return PyIB.IDB_FirstKey(self)
    def LastKey(self): return PyIB.IDB_LastKey(self)
    def NextKey(self, *args): return PyIB.IDB_NextKey(self, *args)
    def PrevKey(self, *args): return PyIB.IDB_PrevKey(self, *args)
    def SetVolume(self, *args): return PyIB.IDB_SetVolume(self, *args)
    def GetVolume(self): return PyIB.IDB_GetVolume(self)
    def SetFindConcatWords(self, Set=1): return PyIB.IDB_SetFindConcatWords(self, Set)
    def GetFindConcatWords(self): return PyIB.IDB_GetFindConcatWords(self)
    def SetSegment(self, *args): return PyIB.IDB_SetSegment(self, *args)
    def GetSegmentName(self): return PyIB.IDB_GetSegmentName(self)
    def Segment(self, *args): return PyIB.IDB_Segment(self, *args)
    def setUseRelativePaths(self, *args): return PyIB.IDB_setUseRelativePaths(self, *args)
    def SetWorkingDirectory(self, *args): return PyIB.IDB_SetWorkingDirectory(self, *args)
    def ClearWorkingDirectoryEntry(self): return PyIB.IDB_ClearWorkingDirectoryEntry(self)
    def SetErrorCode(self, *args): return PyIB.IDB_SetErrorCode(self, *args)
    def GetErrorCode(self): return PyIB.IDB_GetErrorCode(self)
    def ErrorMessage(self, *args): return PyIB.IDB_ErrorMessage(self, *args)
    def UsePersistantCache(self): return PyIB.IDB_UsePersistantCache(self)
    def PersistantCacheName(self): return PyIB.IDB_PersistantCacheName(self)
    def GetMainFpt(self): return PyIB.IDB_GetMainFpt(self)
    def setAutoDeleteExpired(self, *args): return PyIB.IDB_setAutoDeleteExpired(self, *args)
    def FieldExists(self, *args): return PyIB.IDB_FieldExists(self, *args)
    def GetFieldDefinitionList(self): return PyIB.IDB_GetFieldDefinitionList(self)
    def GetDocumentInfo(self, *args): return PyIB.IDB_GetDocumentInfo(self, *args)
    def GetAllDocTypes(self): return PyIB.IDB_GetAllDocTypes(self)
    def GetMainMdt(self): return PyIB.IDB_GetMainMdt(self)
    def DateCreated(self): return PyIB.IDB_DateCreated(self)
    def DateLastModified(self): return PyIB.IDB_DateLastModified(self)
    def SetCommonWordsThreshold(self, *args): return PyIB.IDB_SetCommonWordsThreshold(self, *args)
    def CreateCentroid(self): return PyIB.IDB_CreateCentroid(self)
    def SetLocale(self, LocaleName=None): return PyIB.IDB_SetLocale(self, LocaleName)
    def IsDbCompatible(self): return PyIB.IDB_IsDbCompatible(self)
    def IsEmpty(self): return PyIB.IDB_IsEmpty(self)
    def Ok(self): return PyIB.IDB_Ok(self)
    def ffGC(self): return PyIB.IDB_ffGC(self)
    def SetMergeStatus(self, *args): return PyIB.IDB_SetMergeStatus(self, *args)
    def SetDbState(self, *args): return PyIB.IDB_SetDbState(self, *args)
    def GetDbState(self): return PyIB.IDB_GetDbState(self)
    def SetIndexBoostFactor(self, *args): return PyIB.IDB_SetIndexBoostFactor(self, *args)
    def GetIndexBoostFactor(self): return PyIB.IDB_GetIndexBoostFactor(self)
    def SetFreshnessBoostFactor(self, *args): return PyIB.IDB_SetFreshnessBoostFactor(self, *args)
    def GetFreshnessBoostFactor(self): return PyIB.IDB_GetFreshnessBoostFactor(self)
    def SetLongevityBoostFattor(self, *args): return PyIB.IDB_SetLongevityBoostFattor(self, *args)
    def GetLongevityBoostFactor(self): return PyIB.IDB_GetLongevityBoostFactor(self)
    def SetFreshnessBaseDateLine(self, *args): return PyIB.IDB_SetFreshnessBaseDateLine(self, *args)
    def GetFreshnessBaseDateLine(self): return PyIB.IDB_GetFreshnessBaseDateLine(self)
    def SetDefaultDbSearchCutoff(self, *args): return PyIB.IDB_SetDefaultDbSearchCutoff(self, *args)
    def SetDbSearchCutoff(self, *args): return PyIB.IDB_SetDbSearchCutoff(self, *args)
    def GetDbSearchCutoff(self): return PyIB.IDB_GetDbSearchCutoff(self)
    def SetDbSearchFuel(self, *args): return PyIB.IDB_SetDbSearchFuel(self, *args)
    def SetDbSearchCacheSize(self, *args): return PyIB.IDB_SetDbSearchCacheSize(self, *args)
    def SetDefaultPriorityFactor(self, *args): return PyIB.IDB_SetDefaultPriorityFactor(self, *args)
    def SetPriorityFactor(self, *args): return PyIB.IDB_SetPriorityFactor(self, *args)
    def GetPriorityFactor(self): return PyIB.IDB_GetPriorityFactor(self)
    def SetDbSisLimit(self, *args): return PyIB.IDB_SetDbSisLimit(self, *args)
    def SetTitle(self, *args): return PyIB.IDB_SetTitle(self, *args)
    def GetTitle(self): return PyIB.IDB_GetTitle(self)
    def SetComments(self, *args): return PyIB.IDB_SetComments(self, *args)
    def GetComments(self): return PyIB.IDB_GetComments(self)
    def SetCopyright(self, *args): return PyIB.IDB_SetCopyright(self, *args)
    def GetCopyright(self): return PyIB.IDB_GetCopyright(self)
    def SetMaintainer(self, *args): return PyIB.IDB_SetMaintainer(self, *args)
    def GetMaintainer(self): return PyIB.IDB_GetMaintainer(self)
    def SetGlobalDoctype(self, *args): return PyIB.IDB_SetGlobalDoctype(self, *args)
    def SetIndexingMemory(self, *args): return PyIB.IDB_SetIndexingMemory(self, *args)
    def GetIndexingMemory(self): return PyIB.IDB_GetIndexingMemory(self)
    def SetStoplist(self, *args): return PyIB.IDB_SetStoplist(self, *args)
    def SetGlobalStoplist(self, *args): return PyIB.IDB_SetGlobalStoplist(self, *args)
    def GetGlobalStoplist(self): return PyIB.IDB_GetGlobalStoplist(self)
    def GetTotalWords(self): return PyIB.IDB_GetTotalWords(self)
    def GetTotalUniqueWords(self): return PyIB.IDB_GetTotalUniqueWords(self)
    def GetTotalRecords(self): return PyIB.IDB_GetTotalRecords(self)
    def GetTotalDocumentsDeleted(self): return PyIB.IDB_GetTotalDocumentsDeleted(self)
    def GetFieldCache(self): return PyIB.IDB_GetFieldCache(self)
    def GetPeerFc(self, *args): return PyIB.IDB_GetPeerFc(self, *args)
    def GetFieldName(self, *args): return PyIB.IDB_GetFieldName(self, *args)
    def GetPeerNode(self, *args): return PyIB.IDB_GetPeerNode(self, *args)
    def GetPeerContent(self, *args): return PyIB.IDB_GetPeerContent(self, *args)
    def GetPeerContentXMLFragement(self, *args): return PyIB.IDB_GetPeerContentXMLFragement(self, *args)
    def GetNodeTree(self, *args): return PyIB.IDB_GetNodeTree(self, *args)
    def KillCache(self): return PyIB.IDB_KillCache(self)
    def FillHeadlineCache(self, *args): return PyIB.IDB_FillHeadlineCache(self, *args)
    def IsSystemFile(self, *args): return PyIB.IDB_IsSystemFile(self, *args)
    def SetServerName(self, *args): return PyIB.IDB_SetServerName(self, *args)
    def GetServerName(self): return PyIB.IDB_GetServerName(self)
    def MergeIndexFiles(self): return PyIB.IDB_MergeIndexFiles(self)
    def CollapseIndexFiles(self): return PyIB.IDB_CollapseIndexFiles(self)
    def DeleteExpired(self, *args): return PyIB.IDB_DeleteExpired(self, *args)
    def KillAll(self): return PyIB.IDB_KillAll(self)
    def GetVersionID(self): return PyIB.IDB_GetVersionID(self)
    def ParseRecords(self, *args): return PyIB.IDB_ParseRecords(self, *args)
    def Index(self, newIndex=0): return PyIB.IDB_Index(self, newIndex)
    def Index1(self): return PyIB.IDB_Index1(self)
    def Index2(self): return PyIB.IDB_Index2(self)
    def AddRecord(self, *args): return PyIB.IDB_AddRecord(self, *args)
    def AppendToIndex(self, *args): return PyIB.IDB_AppendToIndex(self, *args)
    def AppendFileToIndex(self, *args): return PyIB.IDB_AppendFileToIndex(self, *args)
    def IsStopWord(self, *args): return PyIB.IDB_IsStopWord(self, *args)
    def MdtLookupKey(self, *args): return PyIB.IDB_MdtLookupKey(self, *args)
    def GetDocumentDeleted(self, *args): return PyIB.IDB_GetDocumentDeleted(self, *args)
    def DeleteByIndex(self, *args): return PyIB.IDB_DeleteByIndex(self, *args)
    def DeleteByKey(self, *args): return PyIB.IDB_DeleteByKey(self, *args)
    def UndeleteByIndex(self, *args): return PyIB.IDB_UndeleteByIndex(self, *args)
    def UndeleteByKey(self, *args): return PyIB.IDB_UndeleteByKey(self, *args)
    def SetOverride(self, *args): return PyIB.IDB_SetOverride(self, *args)
    def GetOverride(self): return PyIB.IDB_GetOverride(self)
    def CleanupDb(self): return PyIB.IDB_CleanupDb(self)
    def GetLocks(self): return PyIB.IDB_GetLocks(self)
    def Scan(self, *args): return PyIB.IDB_Scan(self, *args)
    def ScanGlob(self, *args): return PyIB.IDB_ScanGlob(self, *args)
    def ScanSearch(self, *args): return PyIB.IDB_ScanSearch(self, *args)
    def BeginRsetPresent(self, *args): return PyIB.IDB_BeginRsetPresent(self, *args)
    def EndRsetPresent(self, *args): return PyIB.IDB_EndRsetPresent(self, *args)
    def BeforeSearching(self, *args): return PyIB.IDB_BeforeSearching(self, *args)
    def AfterSearching(self, *args): return PyIB.IDB_AfterSearching(self, *args)
    def BeforeIndexing(self): return PyIB.IDB_BeforeIndexing(self)
    def AfterIndexing(self): return PyIB.IDB_AfterIndexing(self)
    def Search(self, *args): return PyIB.IDB_Search(self, *args)
    def SearchSmart(self, *args): return PyIB.IDB_SearchSmart(self, *args)
    def VSearch(self, *args): return PyIB.IDB_VSearch(self, *args)
    def VSearchSmart(self, *args): return PyIB.IDB_VSearchSmart(self, *args)
    def Headline(self, *args): return PyIB.IDB_Headline(self, *args)
    def Summary(self, *args): return PyIB.IDB_Summary(self, *args)
    def Context(self, *args): return PyIB.IDB_Context(self, *args)
    def NthContext(self, *args): return PyIB.IDB_NthContext(self, *args)
    def URL(self, *args): return PyIB.IDB_URL(self, *args)
    def HighlightedRecord(self, *args): return PyIB.IDB_HighlightedRecord(self, *args)
    def DocHighlight(self, *args): return PyIB.IDB_DocHighlight(self, *args)
    def GetFieldData(self, *args): return PyIB.IDB_GetFieldData(self, *args)
    def GetFieldContents(self, *args): return PyIB.IDB_GetFieldContents(self, *args)
    def Present(self, *args): return PyIB.IDB_Present(self, *args)
    def DocPresent(self, *args): return PyIB.IDB_DocPresent(self, *args)
    def GetXMLHighlightRecordFormat(self, *args): return PyIB.IDB_GetXMLHighlightRecordFormat(self, *args)
    def GetNodeOffsetCount(self, *args): return PyIB.IDB_GetNodeOffsetCount(self, *args)
    def GetDescendentsFCT(self, *args): return PyIB.IDB_GetDescendentsFCT(self, *args)
    def GetAncestorFc(self, *args): return PyIB.IDB_GetAncestorFc(self, *args)
    def GetAncestorContent(self, *args): return PyIB.IDB_GetAncestorContent(self, *args)
    def GetDescendentsContent(self, *args): return PyIB.IDB_GetDescendentsContent(self, *args)
    def KeyLookup(self, *args): return PyIB.IDB_KeyLookup(self, *args)
    def KeyExists(self, *args): return PyIB.IDB_KeyExists(self, *args)
    def GetFields(self, result=None): return PyIB.IDB_GetFields(self, result)
    __swig_destroy__ = PyIB.delete_IDB
    __del__ = lambda self : None;
IDB_swigregister = PyIB.IDB_swigregister
IDB_swigregister(IDB)
cvar = PyIB.cvar
DbStateInvalid = cvar.DbStateInvalid
DbStateReady = cvar.DbStateReady
DbStateBusy = cvar.DbStateBusy

class VIDB(IDBOBJ):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_VIDB(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_VIDB
    __del__ = lambda self : None;
    def getself(self): return PyIB.VIDB_getself(self)
    def GetIDB(self, idx=1): return PyIB.VIDB_GetIDB(self, idx)
    def GetIDBCount(self): return PyIB.VIDB_GetIDBCount(self)
    def IsDbVirtual(self): return PyIB.VIDB_IsDbVirtual(self)
    def GetMainMdt(self, *args): return PyIB.VIDB_GetMainMdt(self, *args)
    def GetFieldCache(self, *args): return PyIB.VIDB_GetFieldCache(self, *args)
    def GetDocTypeOptions(self): return PyIB.VIDB_GetDocTypeOptions(self)
    def GetDbFileStem(self, Idx=0): return PyIB.VIDB_GetDbFileStem(self, Idx)
    def XMLHitTable(self, *args): return PyIB.VIDB_XMLHitTable(self, *args)
    def XMLNodeTree(self, *args): return PyIB.VIDB_XMLNodeTree(self, *args)
    def SetPriorityFactor(self, *args): return PyIB.VIDB_SetPriorityFactor(self, *args)
    def SetDbSearchCutoff(self, *args): return PyIB.VIDB_SetDbSearchCutoff(self, *args)
    def GetDbSearchCutoff(self): return PyIB.VIDB_GetDbSearchCutoff(self)
    def SetDbSearchFuel(self, *args): return PyIB.VIDB_SetDbSearchFuel(self, *args)
    def SetDbSearchCacheSize(self, *args): return PyIB.VIDB_SetDbSearchCacheSize(self, *args)
    def BeforeSearching(self, *args): return PyIB.VIDB_BeforeSearching(self, *args)
    def SetDebugMode(self, *args): return PyIB.VIDB_SetDebugMode(self, *args)
    def GetErrorCode(self, Idx=0): return PyIB.VIDB_GetErrorCode(self, Idx)
    def ErrorMessage(self, Idx=0): return PyIB.VIDB_ErrorMessage(self, Idx)
    def GetTotalWords(self, Idx=0): return PyIB.VIDB_GetTotalWords(self, Idx)
    def GetTotalUniqueWords(self, Idx=0): return PyIB.VIDB_GetTotalUniqueWords(self, Idx)
    def GetTotalRecords(self, Idx=0): return PyIB.VIDB_GetTotalRecords(self, Idx)
    def GetTotalDocumentsDeleted(self, Idx=0): return PyIB.VIDB_GetTotalDocumentsDeleted(self, Idx)
    def GetTotalDatabases(self): return PyIB.VIDB_GetTotalDatabases(self)
    def IsDbCompatible(self): return PyIB.VIDB_IsDbCompatible(self)
    def IsEmpty(self): return PyIB.VIDB_IsEmpty(self)
    def Ok(self): return PyIB.VIDB_Ok(self)
    def SetCommonWordsThreshold(self, *args): return PyIB.VIDB_SetCommonWordsThreshold(self, *args)
    def SetStoplist(self, *args): return PyIB.VIDB_SetStoplist(self, *args)
    def IsStopWord(self, *args): return PyIB.VIDB_IsStopWord(self, *args)
    def GetTitle(self, Idx=0): return PyIB.VIDB_GetTitle(self, Idx)
    def GetComments(self, Idx=0): return PyIB.VIDB_GetComments(self, Idx)
    def GetMaintainer(self, Idx=0): return PyIB.VIDB_GetMaintainer(self, Idx)
    def SearchSmart(self, *args): return PyIB.VIDB_SearchSmart(self, *args)
    def Search(self, *args): return PyIB.VIDB_Search(self, *args)
    def VSearch(self, *args): return PyIB.VIDB_VSearch(self, *args)
    def VSearchSmart(self, *args): return PyIB.VIDB_VSearchSmart(self, *args)
    def Scan(self, *args): return PyIB.VIDB_Scan(self, *args)
    def ScanGlob(self, *args): return PyIB.VIDB_ScanGlob(self, *args)
    def ScanSearch(self, *args): return PyIB.VIDB_ScanSearch(self, *args)
    def BeginRsetPresent(self, *args): return PyIB.VIDB_BeginRsetPresent(self, *args)
    def GetAncestorContent(self, *args): return PyIB.VIDB_GetAncestorContent(self, *args)
    def Headline(self, *args): return PyIB.VIDB_Headline(self, *args)
    def Summary(self, *args): return PyIB.VIDB_Summary(self, *args)
    def Context(self, *args): return PyIB.VIDB_Context(self, *args)
    def NthContext(self, *args): return PyIB.VIDB_NthContext(self, *args)
    def URL(self, *args): return PyIB.VIDB_URL(self, *args)
    def HighlightedRecord(self, *args): return PyIB.VIDB_HighlightedRecord(self, *args)
    def DocHighlight(self, *args): return PyIB.VIDB_DocHighlight(self, *args)
    def GetFieldData(self, *args): return PyIB.VIDB_GetFieldData(self, *args)
    def GetFieldContents(self, *args): return PyIB.VIDB_GetFieldContents(self, *args)
    def Present(self, *args): return PyIB.VIDB_Present(self, *args)
    def DocPresent(self, *args): return PyIB.VIDB_DocPresent(self, *args)
    def EndRsetPresent(self, *args): return PyIB.VIDB_EndRsetPresent(self, *args)
    def GetGlobalDocType(self): return PyIB.VIDB_GetGlobalDocType(self)
    def KeyLookup(self, *args): return PyIB.VIDB_KeyLookup(self, *args)
    def KeyExists(self, *args): return PyIB.VIDB_KeyExists(self, *args)
    def SetDateRange(self, *args): return PyIB.VIDB_SetDateRange(self, *args)
    def ProfileGetString(self, *args): return PyIB.VIDB_ProfileGetString(self, *args)
    def FirstKey(self): return PyIB.VIDB_FirstKey(self)
    def LastKey(self): return PyIB.VIDB_LastKey(self)
    def NextKey(self, *args): return PyIB.VIDB_NextKey(self, *args)
    def PrevKey(self, *args): return PyIB.VIDB_PrevKey(self, *args)
    def GetDocumentInfo(self, *args): return PyIB.VIDB_GetDocumentInfo(self, *args)
    def DateCreated(self): return PyIB.VIDB_DateCreated(self)
    def DateLastModified(self): return PyIB.VIDB_DateLastModified(self)
    def GetAllDocTypes(self): return PyIB.VIDB_GetAllDocTypes(self)
    def ValidateDocType(self, *args): return PyIB.VIDB_ValidateDocType(self, *args)
    def GetVersionID(self): return PyIB.VIDB_GetVersionID(self)
    def GetLocks(self): return PyIB.VIDB_GetLocks(self)
    def GetFields(self, result=None): return PyIB.VIDB_GetFields(self, result)
VIDB_swigregister = PyIB.VIDB_swigregister
VIDB_swigregister(VIDB)

class LANGUAGE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_LANGUAGE(*args)
        try: self.this.append(this)
        except: self.this = this
    def Name(self): return PyIB.LANGUAGE_Name(self)
    def Code(self): return PyIB.LANGUAGE_Code(self)
    __swig_destroy__ = PyIB.delete_LANGUAGE
    __del__ = lambda self : None;
LANGUAGE_swigregister = PyIB.LANGUAGE_swigregister
LANGUAGE_swigregister(LANGUAGE)

class CHARSET(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_CHARSET(*args)
        try: self.this.append(this)
        except: self.this = this
    def Ok(self): return PyIB.CHARSET_Ok(self)
    def Name(self): return PyIB.CHARSET_Name(self)
    def HtmlCat(self, *args): return PyIB.CHARSET_HtmlCat(self, *args)
    def ToLower(self, *args): return PyIB.CHARSET_ToLower(self, *args)
    def ToUpper(self, *args): return PyIB.CHARSET_ToUpper(self, *args)
    def ib_isalpha(self, *args): return PyIB.CHARSET_ib_isalpha(self, *args)
    def ib_isupper(self, *args): return PyIB.CHARSET_ib_isupper(self, *args)
    def ib_islower(self, *args): return PyIB.CHARSET_ib_islower(self, *args)
    def ib_isdigit(self, *args): return PyIB.CHARSET_ib_isdigit(self, *args)
    def ib_isxdigit(self, *args): return PyIB.CHARSET_ib_isxdigit(self, *args)
    def ib_isalnum(self, *args): return PyIB.CHARSET_ib_isalnum(self, *args)
    def ib_isspace(self, *args): return PyIB.CHARSET_ib_isspace(self, *args)
    def ib_ispunct(self, *args): return PyIB.CHARSET_ib_ispunct(self, *args)
    def ib_isprint(self, *args): return PyIB.CHARSET_ib_isprint(self, *args)
    def ib_isgraph(self, *args): return PyIB.CHARSET_ib_isgraph(self, *args)
    def ib_iscntrl(self, *args): return PyIB.CHARSET_ib_iscntrl(self, *args)
    def ib_iswhite(self, *args): return PyIB.CHARSET_ib_iswhite(self, *args)
    def ib_isascii(self, *args): return PyIB.CHARSET_ib_isascii(self, *args)
    def ib_islatin1(self, *args): return PyIB.CHARSET_ib_islatin1(self, *args)
    def ib_toupper(self, *args): return PyIB.CHARSET_ib_toupper(self, *args)
    def ib_tolower(self, *args): return PyIB.CHARSET_ib_tolower(self, *args)
    def ib_toascii(self, *args): return PyIB.CHARSET_ib_toascii(self, *args)
    def isTermChr(self, *args): return PyIB.CHARSET_isTermChr(self, *args)
    def isWordSep(self, *args): return PyIB.CHARSET_isWordSep(self, *args)
    def isTermWhite(self, *args): return PyIB.CHARSET_isTermWhite(self, *args)
    def UCS(self, *args): return PyIB.CHARSET_UCS(self, *args)
    __swig_destroy__ = PyIB.delete_CHARSET
    __del__ = lambda self : None;
CHARSET_swigregister = PyIB.CHARSET_swigregister
CHARSET_swigregister(CHARSET)

class LOCALE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = PyIB.new_LOCALE()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete_LOCALE
    __del__ = lambda self : None;
    def SetLanguage(self, *args): return PyIB.LOCALE_SetLanguage(self, *args)
    def SetCharset(self, *args): return PyIB.LOCALE_SetCharset(self, *args)
    def GetLanguageCode(self): return PyIB.LOCALE_GetLanguageCode(self)
    def GetLanguageName(self): return PyIB.LOCALE_GetLanguageName(self)
    def GetCharsetCode(self): return PyIB.LOCALE_GetCharsetCode(self)
    def GetCharsetName(self): return PyIB.LOCALE_GetCharsetName(self)
    def Charset(self): return PyIB.LOCALE_Charset(self)
    def Language(self): return PyIB.LOCALE_Language(self)
    def Name(self): return PyIB.LOCALE_Name(self)
    def Id(self): return PyIB.LOCALE_Id(self)
LOCALE_swigregister = PyIB.LOCALE_swigregister
LOCALE_swigregister(LOCALE)


def ResolveConfigPath(*args):
  return PyIB.ResolveConfigPath(*args)
ResolveConfigPath = PyIB.ResolveConfigPath

def ResolveBinPath(*args):
  return PyIB.ResolveBinPath(*args)
ResolveBinPath = PyIB.ResolveBinPath

def ExpandFileSpec(*args):
  return PyIB.ExpandFileSpec(*args)
ExpandFileSpec = PyIB.ExpandFileSpec
LOG_PANIC = PyIB.LOG_PANIC
LOG_FATAL = PyIB.LOG_FATAL
LOG_ERROR = PyIB.LOG_ERROR
LOG_ERRNO = PyIB.LOG_ERRNO
LOG_WARN = PyIB.LOG_WARN
LOG_NOTICE = PyIB.LOG_NOTICE
LOG_INFO = PyIB.LOG_INFO
LOG_DEBUG = PyIB.LOG_DEBUG
LOG_ALL = PyIB.LOG_ALL
DEVICE_STDERR = PyIB.DEVICE_STDERR
DEVICE_STDOUT = PyIB.DEVICE_STDOUT
DEVICE_SYSLOG = PyIB.DEVICE_SYSLOG
DEVICE_LOCAL0 = PyIB.DEVICE_LOCAL0
DEVICE_LOCAL1 = PyIB.DEVICE_LOCAL1
DEVICE_LOCAL2 = PyIB.DEVICE_LOCAL2
DEVICE_LOCAL3 = PyIB.DEVICE_LOCAL3
DEVICE_LOCAL4 = PyIB.DEVICE_LOCAL4
DEVICE_LOCAL5 = PyIB.DEVICE_LOCAL5
DEVICE_LOCAL6 = PyIB.DEVICE_LOCAL6
DEVICE_LOCAL7 = PyIB.DEVICE_LOCAL7

def set_syslog(*args):
  return PyIB.set_syslog(*args)
set_syslog = PyIB.set_syslog

def log_init(*args):
  return PyIB.log_init(*args)
log_init = PyIB.log_init

def log_message(*args):
  return PyIB.log_message(*args)
log_message = PyIB.log_message
class INODE(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = PyIB.new_INODE(*args)
        try: self.this.append(this)
        except: self.this = this
    def Clear(self): return PyIB.INODE_Clear(self)
    def Set(self, *args): return PyIB.INODE_Set(self, *args)
    def Key(self): return PyIB.INODE_Key(self)
    def isLinked(self): return PyIB.INODE_isLinked(self)
    def isDangling(self): return PyIB.INODE_isDangling(self)
    def inode(self): return PyIB.INODE_inode(self)
    def device(self): return PyIB.INODE_device(self)
    __swig_destroy__ = PyIB.delete_INODE
    __del__ = lambda self : None;
INODE_swigregister = PyIB.INODE_swigregister
INODE_swigregister(INODE)

class __IB(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def GetFreeMemory(self): return PyIB.__IB_GetFreeMemory(self)
    def GetTotalMemory(self): return PyIB.__IB_GetTotalMemory(self)
    def Hostid(self): return PyIB.__IB_Hostid(self)
    def SerialID(self): return PyIB.__IB_SerialID(self)
    def FileGlob(self, *args): return PyIB.__IB_FileGlob(self, *args)
    def Glob(self, *args): return PyIB.__IB_Glob(self, *args)
    def GetUserHome(self, *args): return PyIB.__IB_GetUserHome(self, *args)
    def DirectoryExists(self, *args): return PyIB.__IB_DirectoryExists(self, *args)
    def FileExists(self, *args): return PyIB.__IB_FileExists(self, *args)
    def ExeExists(self, *args): return PyIB.__IB_ExeExists(self, *args)
    def FileLink(self, *args): return PyIB.__IB_FileLink(self, *args)
    def SendDebugMessage(self, *args): return PyIB.__IB_SendDebugMessage(self, *args)
    def SendInfoMessage(self, *args): return PyIB.__IB_SendInfoMessage(self, *args)
    def SendNoticeMessage(self, *args): return PyIB.__IB_SendNoticeMessage(self, *args)
    def SendWarningMessage(self, *args): return PyIB.__IB_SendWarningMessage(self, *args)
    def SendErrorMessage(self, *args): return PyIB.__IB_SendErrorMessage(self, *args)
    def SendErrnoMessage(self, *args): return PyIB.__IB_SendErrnoMessage(self, *args)
    def SendFatalMessage(self, *args): return PyIB.__IB_SendFatalMessage(self, *args)
    def SendPanicMessage(self, *args): return PyIB.__IB_SendPanicMessage(self, *args)
    def __init__(self): 
        this = PyIB.new___IB()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = PyIB.delete___IB
    __del__ = lambda self : None;
__IB_swigregister = PyIB.__IB_swigregister
__IB_swigregister(__IB)



