/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public final class t_Operator {
  public final static t_Operator OperatorERR = new t_Operator("OperatorERR", IBJNI.OperatorERR_get());
  public final static t_Operator OperatorNoop = new t_Operator("OperatorNoop", IBJNI.OperatorNoop_get());
  public final static t_Operator OperatorNOT = new t_Operator("OperatorNOT");
  public final static t_Operator OperatorWithin = new t_Operator("OperatorWithin");
  public final static t_Operator OperatorXWithin = new t_Operator("OperatorXWithin");
  public final static t_Operator OperatorInside = new t_Operator("OperatorInside");
  public final static t_Operator OperatorNotWithin = new t_Operator("OperatorNotWithin");
  public final static t_Operator OperatorReduce = new t_Operator("OperatorReduce");
  public final static t_Operator OperatorHitCount = new t_Operator("OperatorHitCount");
  public final static t_Operator OperatorTrim = new t_Operator("OperatorTrim");
  public final static t_Operator OperatorWithinFile = new t_Operator("OperatorWithinFile");
  public final static t_Operator OperatorWithinFileExtension = new t_Operator("OperatorWithinFileExtension");
  public final static t_Operator OperatorWithinKey = new t_Operator("OperatorWithinKey");
  public final static t_Operator OperatorWithinDoctype = new t_Operator("OperatorWithinDoctype");
  public final static t_Operator OperatorSortBy = new t_Operator("OperatorSortBy");
  public final static t_Operator OperatorBoostScore = new t_Operator("OperatorBoostScore");
  public final static t_Operator OperatorOr = new t_Operator("OperatorOr");
  public final static t_Operator OperatorAnd = new t_Operator("OperatorAnd");
  public final static t_Operator OperatorAndNot = new t_Operator("OperatorAndNot");
  public final static t_Operator OperatorXor = new t_Operator("OperatorXor");
  public final static t_Operator OperatorXnor = new t_Operator("OperatorXnor");
  public final static t_Operator OperatorNotAnd = new t_Operator("OperatorNotAnd");
  public final static t_Operator OperatorNor = new t_Operator("OperatorNor");
  public final static t_Operator OperatorNand = new t_Operator("OperatorNand");
  public final static t_Operator OperatorLT = new t_Operator("OperatorLT");
  public final static t_Operator OperatorLTE = new t_Operator("OperatorLTE");
  public final static t_Operator OperatorGT = new t_Operator("OperatorGT");
  public final static t_Operator OperatorGTE = new t_Operator("OperatorGTE");
  public final static t_Operator OperatorJoin = new t_Operator("OperatorJoin");
  public final static t_Operator OperatorJoinL = new t_Operator("OperatorJoinL");
  public final static t_Operator OperatorJoinR = new t_Operator("OperatorJoinR");
  public final static t_Operator OperatorProximity = new t_Operator("OperatorProximity", IBJNI.OperatorProximity_get());
  public final static t_Operator OperatorBefore = new t_Operator("OperatorBefore");
  public final static t_Operator OperatorAfter = new t_Operator("OperatorAfter");
  public final static t_Operator OperatorAdj = new t_Operator("OperatorAdj");
  public final static t_Operator OperatorFollows = new t_Operator("OperatorFollows");
  public final static t_Operator OperatorPrecedes = new t_Operator("OperatorPrecedes");
  public final static t_Operator OperatorNear = new t_Operator("OperatorNear");
  public final static t_Operator OperatorFar = new t_Operator("OperatorFar");
  public final static t_Operator OperatorNeighbor = new t_Operator("OperatorNeighbor");
  public final static t_Operator OperatorAndWithin = new t_Operator("OperatorAndWithin");
  public final static t_Operator OperatorOrWithin = new t_Operator("OperatorOrWithin");
  public final static t_Operator OperatorBeforeWithin = new t_Operator("OperatorBeforeWithin");
  public final static t_Operator OperatorAfterWithin = new t_Operator("OperatorAfterWithin");
  public final static t_Operator OperatorPeer = new t_Operator("OperatorPeer");
  public final static t_Operator OperatorBeforePeer = new t_Operator("OperatorBeforePeer");
  public final static t_Operator OperatorAfterPeer = new t_Operator("OperatorAfterPeer");
  public final static t_Operator OperatorXPeer = new t_Operator("OperatorXPeer");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static t_Operator swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + t_Operator.class + " with value " + swigValue);
  }

  private t_Operator(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private t_Operator(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private t_Operator(String swigName, t_Operator swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static t_Operator[] swigValues = { OperatorERR, OperatorNoop, OperatorNOT, OperatorWithin, OperatorXWithin, OperatorInside, OperatorNotWithin, OperatorReduce, OperatorHitCount, OperatorTrim, OperatorWithinFile, OperatorWithinFileExtension, OperatorWithinKey, OperatorWithinDoctype, OperatorSortBy, OperatorBoostScore, OperatorOr, OperatorAnd, OperatorAndNot, OperatorXor, OperatorXnor, OperatorNotAnd, OperatorNor, OperatorNand, OperatorLT, OperatorLTE, OperatorGT, OperatorGTE, OperatorJoin, OperatorJoinL, OperatorJoinR, OperatorProximity, OperatorBefore, OperatorAfter, OperatorAdj, OperatorFollows, OperatorPrecedes, OperatorNear, OperatorFar, OperatorNeighbor, OperatorAndWithin, OperatorOrWithin, OperatorBeforeWithin, OperatorAfterWithin, OperatorPeer, OperatorBeforePeer, OperatorAfterPeer, OperatorXPeer };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

