/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

/* Add PyObject_Del for old Pythons */
#if PY_VERSION_HEX < 0x01060000
# define PyObject_Del(op) PyMem_DEL((op))
#endif
#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN int
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      register int i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    register Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      register int i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;
      if (data->delargs) {
	/* we need to create a temporary object to carry the destroy operation */
	PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
	res = SWIG_Python_CallFunctor(destroy, tmp);
	Py_DECREF(tmp);
      } else {
	PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
	PyObject *mself = PyCFunction_GET_SELF(destroy);
	res = ((*meth)(mself, v));
      }
      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"aquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,				    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
    0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,				    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
      /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version */
#endif
#ifdef COUNT_ALLOCS
      0,0,0,0                               /* tp_alloc -> tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = PyBaseObject_Type.tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError,
		    "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_ATTRLIST swig_types[0]
#define SWIGTYPE_p_ArraySTRING swig_types[1]
#define SWIGTYPE_p_CHARSET swig_types[2]
#define SWIGTYPE_p_DATERANGE swig_types[3]
#define SWIGTYPE_p_DOCTYPE swig_types[4]
#define SWIGTYPE_p_DOCTYPE_ID swig_types[5]
#define SWIGTYPE_p_DOC_ID swig_types[6]
#define SWIGTYPE_p_DTREG swig_types[7]
#define SWIGTYPE_p_FC swig_types[8]
#define SWIGTYPE_p_FCACHE swig_types[9]
#define SWIGTYPE_p_FILE swig_types[10]
#define SWIGTYPE_p_FPT swig_types[11]
#define SWIGTYPE_p_GDT_BOOLEAN swig_types[12]
#define SWIGTYPE_p_IDB swig_types[13]
#define SWIGTYPE_p_IDBOBJ swig_types[14]
#define SWIGTYPE_p_IDB_STATS swig_types[15]
#define SWIGTYPE_p_INDEX_ID swig_types[16]
#define SWIGTYPE_p_INFIX2RPN swig_types[17]
#define SWIGTYPE_p_INODE swig_types[18]
#define SWIGTYPE_p_INT swig_types[19]
#define SWIGTYPE_p_IRSET swig_types[20]
#define SWIGTYPE_p_LANGUAGE swig_types[21]
#define SWIGTYPE_p_LOCALE swig_types[22]
#define SWIGTYPE_p_MDT swig_types[23]
#define SWIGTYPE_p_MDTREC swig_types[24]
#define SWIGTYPE_p_NODETREE swig_types[25]
#define SWIGTYPE_p_OPERATOR swig_types[26]
#define SWIGTYPE_p_QUERY swig_types[27]
#define SWIGTYPE_p_RECORD swig_types[28]
#define SWIGTYPE_p_RESULT swig_types[29]
#define SWIGTYPE_p_RSET swig_types[30]
#define SWIGTYPE_p_SCANLIST swig_types[31]
#define SWIGTYPE_p_SCANOBJ swig_types[32]
#define SWIGTYPE_p_SQUERY swig_types[33]
#define SWIGTYPE_p_SRCH_DATE swig_types[34]
#define SWIGTYPE_p_STRING swig_types[35]
#define SWIGTYPE_p_STRLIST swig_types[36]
#define SWIGTYPE_p_SortBy swig_types[37]
#define SWIGTYPE_p_THESAURUS swig_types[38]
#define SWIGTYPE_p_TREENODE swig_types[39]
#define SWIGTYPE_p_TREENODELIST swig_types[40]
#define SWIGTYPE_p_VIDB swig_types[41]
#define SWIGTYPE_p_VIDB_STATS swig_types[42]
#define SWIGTYPE_p___IB swig_types[43]
#define SWIGTYPE_p_char swig_types[44]
#define SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int swig_types[45]
#define SWIGTYPE_p_t_OpType swig_types[46]
#define SWIGTYPE_p_t_Operator swig_types[47]
#define SWIGTYPE_p_unsigned_long_long swig_types[48]
#define SWIGTYPE_p_void swig_types[49]
static swig_type_info *swig_types[51];
static swig_module_info swig_module = {swig_types, 50, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodern' option"
#endif
#if (PY_VERSION_HEX <= 0x02020000)
# error "This python version requires swig to be run with the '-nomodernargs' option"
#endif

/*-----------------------------------------------
              @(target):= PyIB.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit_PyIB

#else
#  define SWIG_init    initPyIB

#endif
#define SWIG_name    "PyIB"

#define SWIGVERSION 0x020012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      Py_XINCREF(_obj);      
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        Py_XINCREF(_obj);
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      Py_XDECREF(_obj);
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#pragma ident  "%Z%%Y%%M%  %I% %G% %U% BSN"

static const int DebugFlag = 0;

#include "../src/common.hxx"
#include "../src/string.hxx"
#include "../src/vidb.hxx"
#include "../src/rset.hxx"
#include "../src/irset.hxx"
#include "../src/log.hxx"
#include "../src/infix2rpn.hxx"
#include "../src/operator.hxx"

//// Use cached IRSETs..
//#undef IRSET
//#undef PIRSET
//#define IRSET  _IRSET
//#define PIRSET P_IRSET
///

#ifdef SWIGPYTHON
#include "callbacks.hxx"
#endif

#ifdef SHI
 #define JNICALL
 #include "shi.i"
#endif

// #ifdef SWIGPYTHON
// #include "pyglue.cxx"
// #endif

static const ArraySTRING NulArraySTRING;

static const char rFileErrorMsg[] = "file type is required for read parameter";
static const char wFileErrorMsg[] = "file type is required for write parameter";
static const char keyErrorMsg[]   = "key not available";

#ifdef SWIGPYTHON

#define myWrite(f) { \
  FILE *fp = NULL; \
  if (PyString_Check(f)) { \
    if ((fp = fopen( PyString_AsString(f), "a+")) != NULL) \
      f = NULL; \
  } else if (f == NULL || f == Py_None || !PyFile_Check(f)) { \
    PyErr_SetString(PyExc_TypeError, wFileErrorMsg); \
    return NULL; \
  } else fp = PyFile_AsFile(f); \
  bool result = GDT_TRUE; \
  if (fp) self->Write(fp); \
  else result = GDT_FALSE; \
  if (f == NULL) fclose(fp); \
  return Py_BuildValue("i", (int)result); \
}

#define myRead(f) { \
  FILE *fp = NULL; \
  if (PyString_Check(f)) { \
    if ((fp = fopen( PyString_AsString(f), "rb")) != NULL) { \
      f = NULL; \
    } \
  } else if (f == NULL || f == Py_None || !PyFile_Check(f)) { \
    PyErr_SetString(PyExc_TypeError, rFileErrorMsg); \
    return NULL; \
  } else fp = PyFile_AsFile(f); \
  bool result = fp ? self->Read(fp) : GDT_FALSE; \
  if (f == NULL) fclose(fp); \
  return Py_BuildValue("i", (int)result); \
}
#endif

#ifdef SWIGPYTHON

PyObject* PyIB_dict;

#if 0

PyObje* PyIBConstructObject(void* ptr, char* className)
{
    char            buff[64];  // should always be big enough...
    char            swigptr[64];
    _swig_type_info ty;

    ty.name = buff;

    sprintf(buff, "_%s_p", className);
    SWIG_MakePtr(swigptr, ptr, &ty);

    sprintf(buff, "%sPtr", className);
    PyObject* classobj = PyDict_GetItemString(PyIB_dict, buff);
    if (! classobj) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    PyObject* arg = Py_BuildValue("(s)", swigptr);
    PyObject* obj = PyInstance_New(classobj, arg, NULL);
    Py_DECREF(arg);

    return obj;
}
#endif /* SWIGPYTHON */

PyIBCallbackHelper::PyIBCallbackHelper() {
    m_self = NULL;
    m_lastFound = NULL;
}


PyIBCallbackHelper::~PyIBCallbackHelper() {
#ifdef WXP_WITH_THREAD
    PyEval_RestoreThread(PyIBEventThreadState);
#endif

    Py_XDECREF(m_self);

#ifdef WXP_WITH_THREAD
    PyEval_SaveThread();
#endif
}

void PyIBCallbackHelper::setSelf(PyObject* self) {
    m_self = self;
    Py_INCREF(m_self);
}



bool PyIBCallbackHelper::findCallback(const char * name) {
    m_lastFound = NULL;
    if (m_self && PyObject_HasAttrString(m_self, (char *)name))
        m_lastFound = PyObject_GetAttrString(m_self, (char *)name);
    return m_lastFound != NULL;
}


int PyIBCallbackHelper::callCallback(PyObject* argTuple) {
    PyObject*   result;
    int         retval = GDT_FALSE;

    result = callCallbackObj(argTuple);
    if (result) {                       // Assumes an integer return type...
        retval = PyInt_AsLong(result);
        Py_DECREF(result);
        PyErr_Clear();                  // forget about it if it's not...
    }
#ifdef WXP_WITH_THREAD
    PyEval_SaveThread();
#endif
    return retval;
}

// Invoke the Python callable object, returning the raw PyObject return
// value.  Caller should DECREF the return value and also call PyEval_SaveThread.
PyObject* PyIBCallbackHelper::callCallbackObj(PyObject* argTuple) {
#ifdef WXP_WITH_THREAD
    PyEval_RestoreThread(PyIBEventThreadState);
#endif
    PyObject*   result;

    result = PyEval_CallObject(m_lastFound, argTuple);
    Py_DECREF(argTuple);
    if (!result) {
        PyErr_Print();
    }
    return result;
}
#endif

//----------------------------------------------------------------------



SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


//--------------- Python Helper Functions --------------------------------------

extern int*    int_LIST_helper(PyObject* source);
extern long*   long_LIST_helper(PyObject* source);
extern char**  string_LIST_helper(PyObject* source);
extern STRING* STRING_LIST_helper(PyObject* source);


extern ArraySTRING* ArraySTRING_FromPyList(PyObject *source);
extern STRINGS*  STRINGS_FromPyList(PyObject* source);
extern STRLIST*  STRLIST_FromPyList(PyObject* source);

extern PyObject* PyList_FromArraySTRING(const ArraySTRING& List);
extern PyObject* PyList_FromArraySTRING(const ArraySTRING *List);
extern PyObject* PyList_FromSTRLIST(const STRLIST& List);
extern PyObject* PyList_FromSTRLIST(const STRLIST& List, const int entries);
extern PyObject* PyList_FromSTRLIST(const STRLIST* ListPtr);
extern PyObject* PyList_FromSTRLIST(const STRLIST* ListPtr, const int entries);
extern PyObject* PyList_FromFCT(const FCT list);
extern PyObject* PyList_FromFCT(const FCT *Fct);


static char* StringErrorMsg = (char *)"string type is required for parameter";


#ifndef bool
# define bool GDT_BOOLEAN
#endif


//--------------- Helper Functions --------------------------------------

static const char err_nomem[] = "Unable to allocate temporary array";
static const char err_not_a_list[] = "Expected a list object.";

//----------------------------------------------------------------------
//----------------------------------------------------------------------
// Some helper functions for typemaps in my_typemaps.i
//

static inline PyObject *FCasTuple(const FC& Fc)
{
  PyObject* rv = PyTuple_New(2);
  PyTuple_SetItem(rv, 0, PyInt_FromLong(Fc.GetFieldStart()));
  PyTuple_SetItem(rv, 1, PyInt_FromLong(Fc.GetFieldEnd()));
  return rv;
}


PyObject* PyList_FromFCT(const FCT Fct)
{
  PyObject     *listPtr = PyList_New ( Fct.GetTotalEntries() );
  const FCLIST *fclist  = Fct.GetPtrFCLIST();
  int i = 0;
  for (const FCLIST *p = fclist->Next(); p != fclist; p = p->Next())
    PyList_SetItem(listPtr, i++,  FCasTuple(p->Value()) );
  return listPtr;
}

PyObject* PyList_FromFCT(const FCT *Fct)
{
  if (Fct)
    {
      PyObject     *listPtr = PyList_New ( Fct->GetTotalEntries() );
      const FCLIST *fclist  = Fct->GetPtrFCLIST();
      int i = 0;
      for (const FCLIST *p = fclist->Next(); p != fclist; p = p->Next())
    PyList_SetItem(listPtr, i++,  FCasTuple(p->Value()) );
      return listPtr;
    }
  PyErr_SetString(PyExc_TypeError, "Null pointer. Expected an FCT pointer.");
  return NULL;
}

PyObject * PyList_FromArraySTRING(const ArraySTRING& array)
{
  const size_t  count = array.Count();
  PyObject *listPtr = PyList_New ( count );
  for (size_t i=0; i < count; i++)
    PyList_SetItem(listPtr, i, PyString_FromString(array[i].c_str()) );
  return listPtr;
}

PyObject * PyList_FromArraySTRING(const ArraySTRING *array)
{
  if (array)
    {
      const size_t  count = array->Count();
      PyObject *listPtr = PyList_New ( count );
      for (size_t i=0; i < count; i++)
    PyList_SetItem(listPtr, i, PyString_FromString((*array)[i].c_str()) );
      return listPtr;
    }
  PyErr_SetString(PyExc_TypeError, "Null pointer. Expected an ArraySTRING pointer.");
  return NULL;
}


PyObject * PyList_FromSTRLIST(const STRLIST& List)
{
  return PyList_FromSTRLIST(&List);
}

PyObject * PyList_FromSTRLIST(const STRLIST& List, int entries)
{
  return PyList_FromSTRLIST(&List, entries);
}

PyObject * PyList_FromSTRLIST(const STRLIST *List)
{
  const size_t  count = List ? List->GetTotalEntries() : 0;
  PyObject *listPtr = PyList_New ( count );
  int i = 0;
  for (const STRLIST *p = List->Next(); p != List; p = p->Next())
    {
       PyList_SetItem(listPtr, i++, PyString_FromString(STRINGCAST(p->Value()).c_str()) );
    }
  return listPtr;
}

PyObject * PyList_FromSTRLIST(const STRLIST *List, int entries)
{
  const size_t  count = ((List && entries == 0) ? List->GetTotalEntries() : (List ? entries : 0));
  PyObject *listPtr = PyList_New ( count );
  int i = 0;
  if (List)
    {
      for (const STRLIST *p = List->Next(); p != List && i < count; p = p->Next())
    PyList_SetItem(listPtr, i++, PyString_FromString(STRINGCAST(p->Value()).c_str()) );
    }
  return listPtr;
}


int* int_LIST_helper(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
        return NULL;
    }
    int count = PyList_Size(source);
    int* temp = new int[count];
    if (! temp) {
        PyErr_SetString(PyExc_MemoryError, err_nomem);
        return NULL;
    }
    for (int x=0; x<count; x++) {
        PyObject* o = PyList_GetItem(source, x);
        if (! PyInt_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of integers.");
            return NULL;
        }
        temp[x] = PyInt_AsLong(o);
    }
    return temp;
}


long* long_LIST_helper(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
        return NULL;
    }
    int count = PyList_Size(source);
    long* temp = new long[count];
    if (! temp) {
        PyErr_SetString(PyExc_MemoryError, err_nomem);
        return NULL;
    }
    for (int x=0; x<count; x++) {
        PyObject* o = PyList_GetItem(source, x);
        if (! PyInt_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of long integers.");
            return NULL;
        }
        temp[x] = PyInt_AsLong(o);
    }
    return temp;
}


char** string_LIST_helper(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
        return NULL;
    }
    int count = PyList_Size(source);
    char** temp = new char*[count+1];
    if (! temp) {
        PyErr_SetString(PyExc_MemoryError, err_nomem);
        return NULL;
    }
    for (int x=0; x<count; x++) {
        PyObject* o = PyList_GetItem(source, x);
        if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of C-strings.");
            return NULL;
        }
        temp[x] = PyString_AsString(o);
    }
    temp[count] = (char *)NULL;
    return temp;
}


STRING* STRING_LIST_helper(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
        return NULL;
    }
    int count = PyList_Size(source);
    STRING* temp = new STRING[count+1];
    if (! temp) {
        PyErr_SetString(PyExc_MemoryError, err_nomem);
        return NULL;
    }
    int j = 0;
    for (int x=0; x<count; x++) {
    char *ptr;
        PyObject* o = PyList_GetItem(source, x);
        if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of C-strings.");
            return NULL;
        }
    if ((ptr = PyString_AsString(o)) != NULL && *ptr)
      temp[j++] = ptr;
    }
    temp[j] = NulString;
    return temp;
}




STRINGS *STRINGS_FromPyList(PyObject* source) {
    if (!PyList_Check(source)) {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
    } else {
    STRINGS *temp = new STRINGS();
    const int count = PyList_Size(source);
    for (int x=0; x<count; x++) {
      PyObject* o = PyList_GetItem(source, x);
      if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of strings.");
        delete temp;
            return NULL;
          }
          temp->AddEntry(  PyString_AsString(o) );
        }
    return temp;
    }
    return NULL;
}


ArraySTRING *ArraySTRING_FromPyList(PyObject* source) {
    if (!PyList_Check(source))
      {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
      }
    else
      {
    const int count = PyList_Size(source);
        ArraySTRING *temp = new ArraySTRING(count);
        for (int x=0; x<count; x++) {
          PyObject* o = PyList_GetItem(source, x);
          if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of strings.");
            delete temp;
            return NULL;
          }
          temp->Add(  PyString_AsString(o) );
        }
        return temp;
      }
    return NULL;
}


STRLIST *STRLIST_FromPyList(PyObject* source) {
    if (!PyList_Check(source))
      {
        PyErr_SetString(PyExc_TypeError, err_not_a_list);
      }
    else
      {
    STRLIST *temp = new STRLIST();
        const int count = PyList_Size(source);
        for (int x=0; x<count; x++) {
          PyObject* o = PyList_GetItem(source, x);
          if (! PyString_Check(o)) {
            PyErr_SetString(PyExc_TypeError, "Expected a list of strings.");
            delete temp;
        return NULL;
          }
          temp->AddEntry(  PyString_AsString(o) );
        }
    return temp;
      }
    return NULL;
}



SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
      return PyUnicode_FromStringAndSize(carray, static_cast< int >(size));
#else
      return PyString_FromStringAndSize(carray, static_cast< int >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
  } else if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_unsigned_SS_int  (unsigned int value)
{
  return PyInt_FromSize_t((size_t) value);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long (PyObject *obj, unsigned long *val) 
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    long v = PyInt_AsLong(obj);
    if (v >= 0) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      return SWIG_OverflowError;
    }
  } else
#endif
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
#if PY_VERSION_HEX >= 0x03000000
      {
        long v = PyLong_AsLong(obj);
        if (!PyErr_Occurred()) {
          if (v < 0) {
            return SWIG_OverflowError;
          }
        } else {
          PyErr_Clear();
        }
      }
#endif
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
	if (val) *val = (unsigned long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_int (PyObject * obj, unsigned int *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v > UINT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< unsigned int >(v);
    }
  }  
  return res;
}

SWIGINTERN STRING ArraySTRING___getitem__(ArraySTRING *self,int i){
    return self->GetEntry(i+1);
  }

SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
  if (PyUnicode_Check(obj))
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    PyBytes_AsStringAndSize(obj, &cstr, &len);
    if(alloc) *alloc = SWIG_NEWOBJ;
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	  {
	    *cptr = reinterpret_cast< char* >(memcpy((new char[len + 1]), cstr, sizeof(char)*(len + 1)));
	    *alloc = SWIG_NEWOBJ;
	  }
	else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
        #if PY_VERSION_HEX>=0x03000000
        assert(0); /* Should never reach here in Python 3 */
        #endif
	*cptr = SWIG_Python_str_AsChar(obj);
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}




SWIGINTERN ArraySTRING &ArraySTRING_getself(ArraySTRING *self){ return *self; }
SWIGINTERN PyObject *ArraySTRING_asTuple(ArraySTRING *self){
    unsigned  count = self->Count();
        PyObject* rv = PyTuple_New(count);
    for (int i=0; i< count; i++)
      PyTuple_SetItem(rv, i,  PyString_FromString(self->Item(i)));
        return rv;
    }
SWIGINTERN STRING ArraySTRING_Join(ArraySTRING *self,char const *seperator){
      STRING result;
      char quotes = '"';
      if (seperator == NULL) seperator = ",";
      else if (strchr(seperator, '"')) quotes = '\'';
      else if (strchr(seperator, '\'')) quotes = '"';
      // Make sure its OK..
      if (strchr(seperator, quotes)) quotes = '\0'; // Nope

      const unsigned  count = self->Count();
      for (unsigned i=0; i< count; i++)
    {
      // Add seperator
      if (i) result.Cat(seperator);
      bool quote = self->Item(i).Search(seperator);
      // Open quote
      if (quote && quotes) result.Cat(quotes);
      // Item
      result.Cat (self->Item(i));
      // Close quote
      if (quote && quotes) result.Cat(quotes);
    }
      return result;
    }

SWIGINTERNINLINE int
SWIG_AsVal_size_t (PyObject * obj, size_t *val)
{
  unsigned long v;
  int res = SWIG_AsVal_unsigned_SS_long (obj, val ? &v : 0);
  if (SWIG_IsOK(res) && val) *val = static_cast< size_t >(v);
  return res;
}


  #define SWIG_From_long   PyLong_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject *
SWIG_From_size_t  (size_t value)
{    
  return SWIG_From_unsigned_SS_long  (static_cast< unsigned long >(value));
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}

SWIGINTERN void INDEX_ID_SetIndex(INDEX_ID *self,long index){ *self = index; }

SWIGINTERN int
SWIG_AsVal_short (PyObject * obj, short *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < SHRT_MIN || v > SHRT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< short >(v);
    }
  }  
  return res;
}


SWIGINTERNINLINE PyObject *
SWIG_From_short  (short value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long (PyObject *obj, unsigned long long *val)
{
  int res = SWIG_TypeError;
  if (PyLong_Check(obj)) {
    unsigned long long v = PyLong_AsUnsignedLongLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  } else {
    unsigned long v;
    res = SWIG_AsVal_unsigned_SS_long (obj,&v);
    if (SWIG_IsOK(res)) {
      if (val) *val = v;
      return res;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    const double mant_max = 1LL << DBL_MANT_DIG;
    double d;
    res = SWIG_AsVal_double (obj,&d);
    if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
      if (val) *val = (unsigned long long)(d);
      return SWIG_AddCast(res);
    }
    res = SWIG_TypeError;
  }
#endif
  return res;
}


SWIGINTERNINLINE PyObject* 
SWIG_From_long_SS_long  (long long value)
{
  return ((value < LONG_MIN) || (value > LONG_MAX)) ?
    PyLong_FromLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long_SS_long  (unsigned long long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLongLong(value) : PyLong_FromLong(static_cast< long >(value)); 
}

SWIGINTERN PyObject *FC_Write(FC *self,PyObject *f){ myWrite(f);}
SWIGINTERN PyObject *FC_Read(FC *self,PyObject *f){ myRead(f); }
SWIGINTERN PyObject *FC_asTuple(FC *self){
    PyObject* rv = PyTuple_New(2);
    PyTuple_SetItem(rv, 0, PyInt_FromLong(self->GetFieldStart()));
    PyTuple_SetItem(rv, 1, PyInt_FromLong(self->GetFieldEnd()));
    return rv;
    }
SWIGINTERN PyObject *RESULT_Write(RESULT *self,PyObject *f){ myWrite(f); }
SWIGINTERN PyObject *RESULT_Read(RESULT *self,PyObject *f){ myRead(f);  }

  #define SWIG_From_double   PyFloat_FromDouble 

SWIGINTERN IRSET &IRSET_getself(IRSET *self){ return *self; }
SWIGINTERN PyObject *IRSET_Write(IRSET *self,PyObject *f){ myWrite(f); }
SWIGINTERN PyObject *IRSET_Read(IRSET *self,PyObject *f){ myRead(f);  }
SWIGINTERN bool IRSET_SaveSearch(IRSET *self,STRING const &FileName,QUERY const &Query){
      FILE *fp = FileName.Fopen("wb");
      if (fp)
        {
      STRING("#IB_SEARCH#").Write(fp); // Write Magic
      Query.Write(fp);
          self->Write(fp);
      SRCH_DATE("Now").Write(fp);
          fclose(fp);
      return 1;
        }
      return 0;
    }
SWIGINTERN QUERY *IRSET_LoadSearch(IRSET *self,STRING const &FileName){
      FILE *fp = FileName.Fopen("rb");
      if (fp)
    {
      STRING m;
      m.Read(fp);
      if (m == "#IB_SEARCH#")
        {
          QUERY *QueryPtr = new QUERY();
          QueryPtr->Read(fp);
          self->Read(fp);
          // Could now read a timestamp that we'll ignore
          fclose(fp);
          return QueryPtr;
        }
      fclose(fp);
    }
      return NULL; // No available IRSET
    }

/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float (PyObject * obj, float *val)
{
  double v;
  int res = SWIG_AsVal_double (obj, &v);
  if (SWIG_IsOK(res)) {
    if (SWIG_Float_Overflow_Check(v)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< float >(v);
    }
  }  
  return res;
}

SWIGINTERN RSET &RSET_getself(RSET *self){ return *self; }
SWIGINTERN PyObject *RSET_Write(RSET *self,PyObject *f){ myWrite(f); }
SWIGINTERN PyObject *RSET_Read(RSET *self,PyObject *f){ myRead(f);  }
SWIGINTERN RESULT RSET___getitem__(RSET *self,int i){ return self->GetEntry(i+1); }

SWIGINTERNINLINE PyObject *
SWIG_From_float  (float value)
{    
  return SWIG_From_double  (value);
}

SWIGINTERN PyObject *SQUERY_Write(SQUERY *self,PyObject *f){ myWrite(f); }
SWIGINTERN PyObject *SQUERY_Read(SQUERY *self,PyObject *f){ myRead(f);  }
SWIGINTERN STRING SQUERY___repr__(SQUERY *self){ return self->GetRpnTerm(); }
SWIGINTERN unsigned int SQUERY_SetWordsAnd__SWIG_0(SQUERY *self,STRING const NewTerm,int Weight=1){
    return self->SetWords(NewTerm, Weight,  OperatorAnd); }
SWIGINTERN PyObject *QUERY_Write(QUERY *self,PyObject *f){ myWrite(f); }
SWIGINTERN PyObject *QUERY_Read(QUERY *self,PyObject *f){ myRead(f);  }
SWIGINTERN PyObject *QUERY_asTuple(QUERY *self){
    PyObject* rv = PyTuple_New(4);
        PyTuple_SetItem(rv, 0,  PyString_FromString( self->GetSQUERY().GetRpnTerm()) );
        PyTuple_SetItem(rv, 1,  PyInt_FromLong(self->GetSortBy()) );
        PyTuple_SetItem(rv, 1,  PyInt_FromLong(self->GetNormalizationMethod()) );
        PyTuple_SetItem(rv, 2,  PyInt_FromLong(self->GetMaximumResults()) );
        return rv;
  }
SWIGINTERN PyObject *SRCH_DATE_Write(SRCH_DATE *self,PyObject *f){ myWrite(f); }
SWIGINTERN PyObject *SRCH_DATE_Read(SRCH_DATE *self,PyObject *f){ myRead(f);  }
SWIGINTERN STRING SRCH_DATE___repr__(SRCH_DATE *self){ return self->RFCdate(); }
SWIGINTERN STRING SRCH_DATE_Strftime(SRCH_DATE *self,char const *format){
      STRING result;
      if (!self->Strftime(format, &result))
        result.form("*** Error, bad Strftime format: %s", format);
      return result;
    }
SWIGINTERN int SRCH_DATE___cmp__(SRCH_DATE *self,SRCH_DATE const Other){
    return Compare(*self, Other);
    }
SWIGINTERN STRING DATERANGE_ISO(DATERANGE *self){ return (STRING)(*self); }
SWIGINTERN STRING DATERANGE_RFC(DATERANGE *self){
      STRING from, to;
      if (self->RFC(&from, &to))
    return STRING().form("%s To %s", from.c_str(), to.c_str());
      return NulString;
    }
SWIGINTERN STRING DATERANGE_Strftime__SWIG_0(DATERANGE *self,char const *fmt,char const *sep=NULL){
      STRING from, to;
      if (sep == NULL || *sep == '\0') sep = "-";
      if (fmt && self->Strftime(fmt, &from, &to))
        return STRING().form("%s%s%s", from.c_str(), sep, to.c_str());
      return NulString;
    }
SWIGINTERN PyObject *DATERANGE_Write(DATERANGE *self,PyObject *f){ myWrite(f); }
SWIGINTERN PyObject *DATERANGE_Read(DATERANGE *self,PyObject *f){ myRead(f);  }
SWIGINTERN PyObject *DATERANGE_asTuple(DATERANGE *self){
        PyObject* rv = PyTuple_New(2);
        PyTuple_SetItem(rv, 0,  PyString_FromString(self->GetStart().ISOdate()) );
        PyTuple_SetItem(rv, 1,  PyString_FromString(self->GetEnd().ISOdate()) );
        return rv;
    }
SWIGINTERN double DATERANGE_Duration(DATERANGE *self){
    return self->Ok() ? self->GetEnd().GetValue() - self->GetStart().GetValue() : 0.0;
    }
SWIGINTERN PyObject *SCANOBJ_asTuple(SCANOBJ *self){
        PyObject* rv = PyTuple_New(2);
        PyTuple_SetItem(rv, 0,  PyString_FromString(self->Term()) );
        PyTuple_SetItem(rv, 1,  PyInt_FromLong(self->Frequency()) );
        return rv;
    }
SWIGINTERN PyObject *SCANLIST_Get(SCANLIST *self){
        PyObject *listPtr = PyList_New ( self->GetTotalEntries() );
        int i = 0;
        const atomicSCANLIST *List = self->GetPtratomicSCANLIST() ;
        for (const atomicSCANLIST *p = List->Next(); p != List; p = p->Next())
	  {
	    register SCANOBJ t = p->Value();
            PyList_SetItem(listPtr, i++,  SCANOBJ_asTuple( &t ));
	  }
        return listPtr;
    }
SWIGINTERN PyObject *SCANLIST___getitem__(SCANLIST *self,int i){
       register SCANOBJ t = self->GetEntry(i+1);
       return SCANOBJ_asTuple( &t );
    }
SWIGINTERN int RECORD___len__(RECORD *self){
       return self->GetRecordEnd() - self->GetRecordStart();
    }
SWIGINTERN PyObject *IDB_GetFieldDefinitionList(IDB const *self){
    STRLIST list;
    self->GetFieldDefinitionList(&list);
    return PyList_FromSTRLIST( list );
  }
SWIGINTERN RECORD *IDB_GetDocumentInfo(IDB *self,int const Index){
     RECORD *pRecord = new RECORD();
     self->GetDocumentInfo(Index, pRecord);
     return pRecord;
  }
SWIGINTERN PyObject *IDB_GetAllDocTypes(IDB *self){
    return PyList_FromSTRLIST( self->GetAllDocTypes() );
  }
SWIGINTERN void IDB_SetDbState(IDB const *self,int DbState){
    enum DbState State = (enum DbState)DbState;
    self->SetDbState(State) ;
  }
SWIGINTERN STRING IDB_GetFieldName__SWIG_0(IDB *self,GPTYPE HitGp){
     STRING Value;
     self->GetPeerFc(HitGp, &Value);
     return Value;
  }
SWIGINTERN STRING IDB_GetFieldName__SWIG_1(IDB *self,FC HitFc){
    STRING Value;
    self->GetPeerFc (HitFc, &Value);
    return Value;
  }
SWIGINTERN bool IDB_AddRecord__SWIG_1(IDB *self,STRING const Filename){
      static DOCTYPE_ID DefaultDoctype ("AUTODETECT");
      RECORD Record (Filename);
      Record.SetDocumentType(DefaultDoctype);
      return self->AddRecord(Record);
    }
SWIGINTERN bool IDB_AppendToIndex(IDB *self,RECORD const Record){
      self->AddRecord(Record);
      return self->Index(0);
    }
SWIGINTERN bool IDB_AppendFileToIndex(IDB *self,STRING const Filename){
      static DOCTYPE_ID DefaultDoctype ("AUTODETECT");
      RECORD Record (Filename);
      Record.SetDocumentType(DefaultDoctype);
      return self->AddRecord(Record) && self->Index(0);
    }
SWIGINTERN PyObject *IDB_GetFieldData__SWIG_0(IDB *self,RESULT const *ResultPtr,char const *ESet,DOCTYPE_ID Doctype=0){
      STRLIST Strlist;
      if (Doctype == 0 && ResultPtr) Doctype =  ResultPtr->GetDocumentType ();
      if (ResultPtr &&
        self->GetFieldData (*ResultPtr, ESet, &Strlist, self->GetDocTypePtr ( Doctype ) ) )
        {
          return PyList_FromSTRLIST(Strlist);
        }
      return  PyList_New (0); // Zero list
    }
SWIGINTERN PyObject *IDB_GetFieldContents(IDB *self,RESULT const *ResultPtr,char const *ESet){
      STRLIST Strlist;
      if (ResultPtr && self->GetFieldData (*ResultPtr, ESet, &Strlist))
        {
          return PyList_FromSTRLIST(Strlist);
        }
      return  PyList_New (0); // Zero list
    }
SWIGINTERN PyObject *IDB_GetAncestorContent(IDB *self,RESULT &Result,char const *NodeName){
    STRLIST  Strlist;
    size_t   count;
    if ((count = self->GetAncestorContent (Result, NodeName, &Strlist)) > 0)
      return PyList_FromSTRLIST(Strlist, count);
    return PyList_New (0);
    }
SWIGINTERN PyObject *IDB_GetDescendentsContent(IDB *self,FC const HitFc,char const *NodeName){
        STRLIST  Strlist;
        size_t   count;
        if ((count = self->GetDescendentsContent (HitFc, NodeName, &Strlist)) > 0)
      return PyList_FromSTRLIST(Strlist, count);
        return PyList_New (0);
   }
SWIGINTERN RESULT *IDB_KeyLookup(IDB *self,STRING const Key){
    RESULT *result = new RESULT();
    if (self->KeyLookup(Key, result) == 0) {
      delete result;

//      PyErr_SetString(PyExc_RuntimeError,  keyErrorMsg);

      return NULL;
    }
    return result;
   }
SWIGINTERN bool IDB_KeyExists(IDB *self,STRING const Key){ return self->KeyLookup(Key, (RESULT *)NULL); }
SWIGINTERN PyObject *IDB_GetFields__SWIG_0(IDB *self,RESULT const *result=NULL){
    DFDT            Dfdt;
    DFD             Dfd;

    if (result) {
       self->GetRecordDfdt (*result, &Dfdt);
    } else {
      self->GetDfdt(&Dfdt);
    }
    const int       total = Dfdt.GetTotalEntries();
    PyObject *listPtr = PyList_New ( total );
    for (int i=0; i < total; i++) {
      Dfdt.GetEntry(i+1, &Dfd);
      PyList_SetItem(listPtr, i, PyString_FromString(STRINGCAST(Dfd.GetFieldName())));
    }
    return listPtr;
  }
SWIGINTERN VIDB &VIDB_getself(VIDB *self){ return *self; }
SWIGINTERN IDB *VIDB_GetIDB__SWIG_0(VIDB *self,unsigned int idx=1){ return (IDB *)self->GetIDB(idx); }
SWIGINTERN PyObject *VIDB_GetDocTypeOptions(VIDB *self){
    return PyList_FromSTRLIST( self->GetDocTypeOptions() );
   }
SWIGINTERN PyObject *VIDB_GetAncestorContent(VIDB *self,RESULT &Result,char const *NodeName){
        STRLIST  Strlist;
        size_t   count;
        if ((count = self->GetAncestorContent (Result, NodeName, &Strlist)) > 0)
      return PyList_FromSTRLIST(Strlist, count);
        return PyList_New (0);
    }
SWIGINTERN PyObject *VIDB_GetFieldData__SWIG_0(VIDB *self,RESULT const *ResultPtr,char const *ESet,DOCTYPE_ID Doctype=0){
      STRLIST Strlist;
      if (Doctype == 0 && ResultPtr) Doctype =  ResultPtr->GetDocumentType ();
      if (ResultPtr &&
        self->GetFieldData (*ResultPtr, ESet, &Strlist, self->GetDocTypePtr ( Doctype ) ))
        {
          return PyList_FromSTRLIST(Strlist);
        }
      return  PyList_New (0); // Zero list
    }
SWIGINTERN PyObject *VIDB_GetFieldContents(VIDB *self,RESULT const *ResultPtr,char const *ESet){
      STRLIST Strlist;
      if (ResultPtr && self->GetFieldData (*ResultPtr, ESet, &Strlist))
    {
      return PyList_FromSTRLIST(Strlist);
    }
      return  PyList_New (0); // Zero list
    }
SWIGINTERN RESULT *VIDB_KeyLookup(VIDB *self,STRING const Key){
      RESULT *result = new RESULT();
      if (self->KeyLookup(Key, result) == 0)
    {
      delete result;

//    PyErr_SetString(PyExc_RuntimeError,  keyErrorMsg);

      return NULL;
    }
      return result;
    }
SWIGINTERN bool VIDB_KeyExists(VIDB *self,STRING const Key){ return self->KeyLookup(Key, NULL); }
SWIGINTERN RECORD *VIDB_GetDocumentInfo__SWIG_0(VIDB *self,int Index){
    RECORD *pRecord = new RECORD();
    self->GetDocumentInfo(Index, pRecord);
    return pRecord;
  }
SWIGINTERN RECORD *VIDB_GetDocumentInfo__SWIG_1(VIDB *self,int Idx,int Index){
    RECORD *pRecord = new RECORD();
    self->GetDocumentInfo(Idx, Index, pRecord);
    return pRecord;
  }
SWIGINTERN PyObject *VIDB_GetAllDocTypes(VIDB *self){
    return PyList_FromSTRLIST( self->GetAllDocTypes() );
  }
SWIGINTERN PyObject *VIDB_GetFields__SWIG_0(VIDB *self,RESULT const *result=NULL){
    DFDT            Dfdt;
    DFD             Dfd;

    if (result) {
       self->GetRecordDfdt (*result, &Dfdt);
    } else
      self->GetDfdt(&Dfdt);
    const int       total = Dfdt.GetTotalEntries();
    PyObject *listPtr = PyList_New ( total );
    for (int i=0; i < total; i++) {
      Dfdt.GetEntry(i+1, &Dfd);
      PyList_SetItem(listPtr, i, PyString_FromString(STRINGCAST(Dfd.GetFieldName())));
    }
    return listPtr;
  }
SWIGINTERN char const *CHARSET_Name(CHARSET const *self){
      return (const char *)self;
    }

SWIGINTERN int
SWIG_AsCharArray(PyObject * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_char (PyObject * obj, char *val)
{    
  int res = SWIG_AsCharArray(obj, val, 1);
  if (!SWIG_IsOK(res)) {
    long v;
    res = SWIG_AddCast(SWIG_AsVal_long (obj, &v));
    if (SWIG_IsOK(res)) {
      if ((CHAR_MIN <= v) && (v <= CHAR_MAX)) {
	if (val) *val = static_cast< char >(v);
      } else {
	res = SWIG_OverflowError;
      }
    }
  }
  return res;
}

SWIGINTERN int CHARSET_UCS(CHARSET *self,char Ch){ return self->UCS((UCHR)Ch); }
SWIGINTERN STRING LOCALE_Name(LOCALE const *self){
      return self->LocaleName();
    }


class __IB {
 public:

  bool FileGlob(const STRING pattern, const STRING str) {
    return ::FileGlob(pattern.c_ustr(), str.c_ustr());
  }
  bool Glob(const STRING pattern, const STRING str, bool dot_special=0) {
    return ::Glob(pattern.c_ustr(), str.c_ustr(), dot_special);
  }

  int FileLink(const STRING Source, const STRING Dest) {
    return ::FileLink(Source, Dest);
  }
  STRING GetUserHome(const STRING user) {
    return ::GetUserHome(user);
  }
  bool DirectoryExists(const STRING Path) {
    return ::DirectoryExists(Path);
  }
  bool FileExists(const STRING Path) {
    return ::FileExists(Path);
  }
  bool ExeExists(const STRING Path) {
    return ExeExists(Path);
  }

  long GetFreeMemory()  { return ::_IB_GetFreeMemory();  }
  long GetTotalMemory() { return ::_IB_GetTotalMemory(); }
  long Hostid()         { return ::_IB_Hostid();         }
  long SerialID()       { return ::_IB_SerialID();       }

  void SendDebugMessage(const char *msg)   {  message_log (LOG_DEBUG, msg); }
  void SendInfoMessage(const char *msg)    {  message_log (LOG_INFO, msg);  }
  void SendNoticeMessage(const char *msg)  {  message_log (LOG_NOTICE, msg);}
  void SendWarningMessage(const char *msg) {  message_log (LOG_WARN, msg);  }
  void SendErrorMessage(const char *msg)   {  message_log (LOG_ERROR, msg); }
  void SendErrnoMessage(const char *msg)   {  message_log (LOG_ERRNO, msg); }
  void SendFatalMessage(const char *msg)   {  message_log (LOG_FATAL, msg); }
  void SendPanicMessage(const char *msg)   {  message_log (LOG_PANIC, msg); }

};

#ifdef __cplusplus
extern "C" {
#endif

#ident "%Z%%Y%IB  %I% %G% %U% BSN"

SWIGINTERN PyObject *_wrap_new_ArraySTRING__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (ArraySTRING *)new ArraySTRING();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArraySTRING, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArraySTRING__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  ArraySTRING *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_ArraySTRING",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_ArraySTRING" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (ArraySTRING *)new ArraySTRING(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArraySTRING, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArraySTRING__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ArraySTRING *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_ArraySTRING",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_ArraySTRING,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_ArraySTRING" "', argument " "1"" of type '" "ArraySTRING const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_ArraySTRING" "', argument " "1"" of type '" "ArraySTRING const""'");
    } else {
      ArraySTRING * temp = reinterpret_cast< ArraySTRING * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (ArraySTRING *)new ArraySTRING(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArraySTRING, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArraySTRING__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRLIST *arg1 = 0 ;
  PyObject * obj0 = 0 ;
  ArraySTRING *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_ArraySTRING",1,1,&obj0)) SWIG_fail;
  {
    STRLIST *l =  STRLIST_FromPyList(obj0);
    if (l == NULL) arg1 = (STRLIST *)&NulStrlist;
    else arg1 =  l;
    
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (ArraySTRING *)new ArraySTRING((STRLIST const &)*arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArraySTRING, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_ArraySTRING(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_ArraySTRING__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_ArraySTRING, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArraySTRING__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_STRLIST, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_ArraySTRING__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_ArraySTRING__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_ArraySTRING'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    ArraySTRING::ArraySTRING()\n"
    "    ArraySTRING::ArraySTRING(int)\n"
    "    ArraySTRING::ArraySTRING(ArraySTRING const)\n"
    "    ArraySTRING::ArraySTRING(STRLIST const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_ArraySTRING(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_ArraySTRING",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ArraySTRING" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Empty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Empty" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Empty();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Clear" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Clear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Count(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Count",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Count" "', argument " "1"" of type '" "ArraySTRING const *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((ArraySTRING const *)arg1)->Count();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_IsEmpty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_IsEmpty" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsEmpty();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Item(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Item",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Item" "', argument " "1"" of type '" "ArraySTRING const *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArraySTRING_Item" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((ArraySTRING const *)arg1)->Item(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_GetEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_GetEntry",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_GetEntry" "', argument " "1"" of type '" "ArraySTRING const *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArraySTRING_GetEntry" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((ArraySTRING const *)arg1)->GetEntry(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING___getitem__" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArraySTRING___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ArraySTRING___getitem__(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_SetEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_SetEntry",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_SetEntry" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArraySTRING_SetEntry" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "ArraySTRING_SetEntry" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetEntry(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Add",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Add" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArraySTRING_Add" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Add((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Insert(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Insert",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Insert" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArraySTRING_Insert" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ArraySTRING_Insert" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Insert((char const *)arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Replace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Replace",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Replace" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArraySTRING_Replace" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ArraySTRING_Replace" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Replace((char const *)arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Remove(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Remove",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Remove" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ArraySTRING_Remove" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Remove(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_getself(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  ArraySTRING *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_getself",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_getself" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (ArraySTRING *) &ArraySTRING_getself(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_ArraySTRING, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_asTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_asTuple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_asTuple" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)ArraySTRING_asTuple(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ArraySTRING_Join(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  ArraySTRING *arg1 = (ArraySTRING *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ArraySTRING_Join",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_ArraySTRING, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ArraySTRING_Join" "', argument " "1"" of type '" "ArraySTRING *""'"); 
  }
  arg1 = reinterpret_cast< ArraySTRING * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "ArraySTRING_Join" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ArraySTRING_Join(arg1,(char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *ArraySTRING_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_ArraySTRING, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IDB_STATS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDB_STATS *)new IDB_STATS();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDB_STATS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IDB_STATS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *arg1 = (IDB_STATS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_IDB_STATS",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB_STATS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IDB_STATS" "', argument " "1"" of type '" "IDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< IDB_STATS * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_STATS_SetHits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *arg1 = (IDB_STATS *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_STATS_SetHits",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_STATS_SetHits" "', argument " "1"" of type '" "IDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< IDB_STATS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_STATS_SetHits" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetHits(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_STATS_SetTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *arg1 = (IDB_STATS *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_STATS_SetTotal",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_STATS_SetTotal" "', argument " "1"" of type '" "IDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< IDB_STATS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_STATS_SetTotal" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetTotal(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_STATS_GetTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *arg1 = (IDB_STATS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_STATS_GetTotal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_STATS_GetTotal" "', argument " "1"" of type '" "IDB_STATS const *""'"); 
  }
  arg1 = reinterpret_cast< IDB_STATS * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB_STATS const *)arg1)->GetTotal();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_STATS_GetHits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *arg1 = (IDB_STATS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_STATS_GetHits",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_STATS_GetHits" "', argument " "1"" of type '" "IDB_STATS const *""'"); 
  }
  arg1 = reinterpret_cast< IDB_STATS * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB_STATS const *)arg1)->GetHits();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_STATS_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *arg1 = (IDB_STATS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_STATS_Clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_STATS_Clear" "', argument " "1"" of type '" "IDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< IDB_STATS * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Clear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_STATS_SetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *arg1 = (IDB_STATS *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_STATS_SetName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_STATS_SetName" "', argument " "1"" of type '" "IDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< IDB_STATS * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetName(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_STATS_GetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB_STATS *arg1 = (IDB_STATS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_STATS_GetName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_STATS_GetName" "', argument " "1"" of type '" "IDB_STATS const *""'"); 
  }
  arg1 = reinterpret_cast< IDB_STATS * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB_STATS const *)arg1)->GetName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IDB_STATS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IDB_STATS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VIDB_STATS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB_STATS *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (VIDB_STATS *)new VIDB_STATS();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIDB_STATS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_VIDB_STATS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB_STATS *arg1 = (VIDB_STATS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_VIDB_STATS",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB_STATS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VIDB_STATS" "', argument " "1"" of type '" "VIDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< VIDB_STATS * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_STATS_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB_STATS *arg1 = (VIDB_STATS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_STATS_Clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_STATS_Clear" "', argument " "1"" of type '" "VIDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< VIDB_STATS * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Clear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_STATS_SetTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB_STATS *arg1 = (VIDB_STATS *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_STATS_SetTotal",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_STATS_SetTotal" "', argument " "1"" of type '" "VIDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< VIDB_STATS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_STATS_SetTotal" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_STATS_SetTotal" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetTotal(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_STATS_SetHits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB_STATS *arg1 = (VIDB_STATS *) 0 ;
  size_t arg2 ;
  size_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  size_t val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_STATS_SetHits",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_STATS_SetHits" "', argument " "1"" of type '" "VIDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< VIDB_STATS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_STATS_SetHits" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  ecode3 = SWIG_AsVal_size_t(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_STATS_SetHits" "', argument " "3"" of type '" "size_t""'");
  } 
  arg3 = static_cast< size_t >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetHits(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_STATS_SetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB_STATS *arg1 = (VIDB_STATS *) 0 ;
  size_t arg2 ;
  STRING arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_STATS_SetName",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_STATS_SetName" "', argument " "1"" of type '" "VIDB_STATS *""'"); 
  }
  arg1 = reinterpret_cast< VIDB_STATS * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_STATS_SetName" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetName(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *VIDB_STATS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VIDB_STATS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IDBOBJ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDBOBJ *)new IDBOBJ();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDBOBJ, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IDBOBJ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_IDBOBJ",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IDBOBJ" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDBOBJ_getUseRelativePaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDBOBJ_getUseRelativePaths",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDBOBJ_getUseRelativePaths" "', argument " "1"" of type '" "IDBOBJ const *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((IDBOBJ const *)arg1)->getUseRelativePaths();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDBOBJ_setUseRelativePaths__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDBOBJ_setUseRelativePaths",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDBOBJ_setUseRelativePaths" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDBOBJ_setUseRelativePaths" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->setUseRelativePaths(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDBOBJ_setUseRelativePaths__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDBOBJ_setUseRelativePaths",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDBOBJ_setUseRelativePaths" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->setUseRelativePaths();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDBOBJ_setUseRelativePaths(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDBOBJ, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDBOBJ_setUseRelativePaths__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDBOBJ, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDBOBJ_setUseRelativePaths__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDBOBJ_setUseRelativePaths'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDBOBJ::setUseRelativePaths(bool)\n"
    "    IDBOBJ::setUseRelativePaths()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDBOBJ_RelativizePathname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDBOBJ_RelativizePathname",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDBOBJ_RelativizePathname" "', argument " "1"" of type '" "IDBOBJ const *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDBOBJ const *)arg1)->RelativizePathname(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDBOBJ_ResolvePathname(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDBOBJ_ResolvePathname",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDBOBJ_ResolvePathname" "', argument " "1"" of type '" "IDBOBJ const *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDBOBJ const *)arg1)->ResolvePathname(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IDBOBJ_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IDBOBJ, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_INDEX_ID__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (INDEX_ID *)new INDEX_ID();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_INDEX_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_INDEX_ID__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  INDEX_ID *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_INDEX_ID",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_INDEX_ID,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_INDEX_ID" "', argument " "1"" of type '" "INDEX_ID const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_INDEX_ID" "', argument " "1"" of type '" "INDEX_ID const""'");
    } else {
      INDEX_ID * temp = reinterpret_cast< INDEX_ID * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (INDEX_ID *)new INDEX_ID(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_INDEX_ID, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_INDEX_ID(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_INDEX_ID__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_INDEX_ID, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_INDEX_ID__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_INDEX_ID'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    INDEX_ID::INDEX_ID()\n"
    "    INDEX_ID::INDEX_ID(INDEX_ID const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_INDEX_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_INDEX_ID",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_INDEX_ID" "', argument " "1"" of type '" "INDEX_ID *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INDEX_ID_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INDEX_ID_GetIndex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INDEX_ID_GetIndex" "', argument " "1"" of type '" "INDEX_ID *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetIndex();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INDEX_ID_SetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"INDEX_ID_SetIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INDEX_ID_SetIndex" "', argument " "1"" of type '" "INDEX_ID *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INDEX_ID_SetIndex" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    INDEX_ID_SetIndex(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INDEX_ID_SetMdtIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"INDEX_ID_SetMdtIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INDEX_ID_SetMdtIndex" "', argument " "1"" of type '" "INDEX_ID *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INDEX_ID_SetMdtIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetMdtIndex(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INDEX_ID_GetMdtIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INDEX_ID_GetMdtIndex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INDEX_ID_GetMdtIndex" "', argument " "1"" of type '" "INDEX_ID const *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((INDEX_ID const *)arg1)->GetMdtIndex();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INDEX_ID_SetVirtualIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"INDEX_ID_SetVirtualIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INDEX_ID_SetVirtualIndex" "', argument " "1"" of type '" "INDEX_ID *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INDEX_ID_SetVirtualIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetVirtualIndex(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INDEX_ID_GetVirtualIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INDEX_ID_GetVirtualIndex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INDEX_ID_GetVirtualIndex" "', argument " "1"" of type '" "INDEX_ID const *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((INDEX_ID const *)arg1)->GetVirtualIndex();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INDEX_ID_Equals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  INDEX_ID arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INDEX_ID_Equals",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INDEX_ID_Equals" "', argument " "1"" of type '" "INDEX_ID const *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_INDEX_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INDEX_ID_Equals" "', argument " "2"" of type '" "INDEX_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INDEX_ID_Equals" "', argument " "2"" of type '" "INDEX_ID""'");
    } else {
      INDEX_ID * temp = reinterpret_cast< INDEX_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((INDEX_ID const *)arg1)->Equals(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INDEX_ID_Compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INDEX_ID *arg1 = (INDEX_ID *) 0 ;
  INDEX_ID arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INDEX_ID_Compare",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INDEX_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INDEX_ID_Compare" "', argument " "1"" of type '" "INDEX_ID const *""'"); 
  }
  arg1 = reinterpret_cast< INDEX_ID * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_INDEX_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "INDEX_ID_Compare" "', argument " "2"" of type '" "INDEX_ID""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "INDEX_ID_Compare" "', argument " "2"" of type '" "INDEX_ID""'");
    } else {
      INDEX_ID * temp = reinterpret_cast< INDEX_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((INDEX_ID const *)arg1)->Compare(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *INDEX_ID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_INDEX_ID, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DOCTYPE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DOCTYPE *)new DOCTYPE();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DOCTYPE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DOCTYPE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DOCTYPE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_DOCTYPE",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DOCTYPE" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DOCTYPE" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DOCTYPE *)new DOCTYPE(arg1,(char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DOCTYPE, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DOCTYPE__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DOCTYPE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_DOCTYPE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DOCTYPE" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DOCTYPE *)new DOCTYPE(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DOCTYPE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DOCTYPE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_DOCTYPE__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDBOBJ, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DOCTYPE__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDBOBJ, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DOCTYPE__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DOCTYPE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DOCTYPE::DOCTYPE()\n"
    "    DOCTYPE::DOCTYPE(IDBOBJ *,char const *)\n"
    "    DOCTYPE::DOCTYPE(IDBOBJ *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DOCTYPE_ParseDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE *arg1 = (DOCTYPE *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOCTYPE_ParseDate",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOCTYPE_ParseDate" "', argument " "1"" of type '" "DOCTYPE const *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOCTYPE_ParseDate" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DOCTYPE_ParseDate" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((DOCTYPE const *)arg1)->ParseDate((char const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOCTYPE_ParseDateRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE *arg1 = (DOCTYPE *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< DATERANGE > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOCTYPE_ParseDateRange",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOCTYPE_ParseDateRange" "', argument " "1"" of type '" "DOCTYPE const *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOCTYPE_ParseDateRange" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DOCTYPE_ParseDateRange" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((DOCTYPE const *)arg1)->ParseDateRange((char const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new DATERANGE(static_cast< const DATERANGE& >(result))), SWIGTYPE_p_DATERANGE, SWIG_POINTER_OWN |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DOCTYPE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE *arg1 = (DOCTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_DOCTYPE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DOCTYPE" "', argument " "1"" of type '" "DOCTYPE *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DOCTYPE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DOCTYPE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DTREG__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  DTREG *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_DTREG",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTREG" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DTREG *)new DTREG(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DTREG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTREG__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DTREG *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_DTREG",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DTREG" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DTREG *)new DTREG(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DTREG, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DTREG(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDBOBJ, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_DTREG__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDBOBJ, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_DTREG__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_DTREG'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DTREG::DTREG(IDBOBJ *)\n"
    "    DTREG::DTREG(IDBOBJ *,STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DTREG_PluginExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_PluginExists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_PluginExists" "', argument " "1"" of type '" "DTREG const *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((DTREG const *)arg1)->PluginExists(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTREG_AddPluginPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_AddPluginPath",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_AddPluginPath" "', argument " "1"" of type '" "DTREG *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->AddPluginPath(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTREG_GetDocTypePtr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DOCTYPE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_GetDocTypePtr",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_GetDocTypePtr" "', argument " "1"" of type '" "DTREG *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DOCTYPE *)(arg1)->GetDocTypePtr(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DOCTYPE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTREG_GetDocTypePtr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  DOCTYPE_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DOCTYPE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_GetDocTypePtr",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_GetDocTypePtr" "', argument " "1"" of type '" "DTREG *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOCTYPE_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTREG_GetDocTypePtr" "', argument " "2"" of type '" "DOCTYPE_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTREG_GetDocTypePtr" "', argument " "2"" of type '" "DOCTYPE_ID const &""'"); 
  }
  arg2 = reinterpret_cast< DOCTYPE_ID * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DOCTYPE *)(arg1)->GetDocTypePtr((DOCTYPE_ID const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DOCTYPE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTREG_GetDocTypePtr__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  DOCTYPE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_GetDocTypePtr",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_GetDocTypePtr" "', argument " "1"" of type '" "DTREG *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTREG_GetDocTypePtr" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DTREG_GetDocTypePtr" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DOCTYPE *)(arg1)->GetDocTypePtr((char const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DOCTYPE, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTREG_GetDocTypePtr(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DTREG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_DOCTYPE_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTREG_GetDocTypePtr__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DTREG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTREG_GetDocTypePtr__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DTREG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DTREG_GetDocTypePtr__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DTREG_GetDocTypePtr'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DTREG::GetDocTypePtr(STRING const)\n"
    "    DTREG::GetDocTypePtr(DOCTYPE_ID const &)\n"
    "    DTREG::GetDocTypePtr(char const *,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DTREG_ValidateDocType__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_ValidateDocType",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_ValidateDocType" "', argument " "1"" of type '" "DTREG *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->ValidateDocType(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTREG_ValidateDocType__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  DOCTYPE_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_ValidateDocType",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_ValidateDocType" "', argument " "1"" of type '" "DTREG *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOCTYPE_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DTREG_ValidateDocType" "', argument " "2"" of type '" "DOCTYPE_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DTREG_ValidateDocType" "', argument " "2"" of type '" "DOCTYPE_ID const &""'"); 
  }
  arg2 = reinterpret_cast< DOCTYPE_ID * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->ValidateDocType((DOCTYPE_ID const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTREG_ValidateDocType(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DTREG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_DOCTYPE_ID, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTREG_ValidateDocType__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DTREG, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DTREG_ValidateDocType__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DTREG_ValidateDocType'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DTREG::ValidateDocType(STRING const)\n"
    "    DTREG::ValidateDocType(DOCTYPE_ID const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DTREG_GetDocTypeList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRLIST *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_GetDocTypeList",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_GetDocTypeList" "', argument " "1"" of type '" "DTREG *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (STRLIST *) &(arg1)->GetDocTypeList();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_STRLIST, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DTREG_Version(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DTREG_Version",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DTREG_Version" "', argument " "1"" of type '" "DTREG const *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((DTREG const *)arg1)->Version();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DTREG(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DTREG *arg1 = (DTREG *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_DTREG",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DTREG, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DTREG" "', argument " "1"" of type '" "DTREG *""'"); 
  }
  arg1 = reinterpret_cast< DTREG * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DTREG_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DTREG, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MDTREC__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MDTREC *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_MDTREC",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_MDTREC" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (MDTREC *)new MDTREC(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MDTREC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MDTREC__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (MDTREC *)new MDTREC();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MDTREC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_MDTREC(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_MDTREC__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MDT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_MDTREC__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_MDTREC'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MDTREC::MDTREC(MDT *)\n"
    "    MDTREC::MDTREC()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetCategory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetCategory",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetCategory" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDTREC_SetCategory" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetCategory(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetCategory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetCategory",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetCategory" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((MDTREC const *)arg1)->GetCategory();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetPriority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  short arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  short val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetPriority",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetPriority" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  ecode2 = SWIG_AsVal_short(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDTREC_SetPriority" "', argument " "2"" of type '" "short""'");
  } 
  arg2 = static_cast< short >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetPriority(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetPriority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  short result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetPriority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetPriority" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (short)((MDTREC const *)arg1)->GetPriority();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_short(static_cast< short >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetKey" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDTREC_SetKey" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetKey((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetKey" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetDocumentType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  SwigValueWrapper< DOCTYPE_ID > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetDocumentType",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetDocumentType" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOCTYPE_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDTREC_SetDocumentType" "', argument " "2"" of type '" "DOCTYPE_ID const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MDTREC_SetDocumentType" "', argument " "2"" of type '" "DOCTYPE_ID const""'");
    } else {
      DOCTYPE_ID * temp = reinterpret_cast< DOCTYPE_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDocumentType(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetDocumentType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< DOCTYPE_ID > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetDocumentType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetDocumentType" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetDocumentType();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new DOCTYPE_ID(static_cast< const DOCTYPE_ID& >(result))), SWIGTYPE_p_DOCTYPE_ID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetPath",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetPath" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetPath(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetPath",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetPath" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetPath();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetFileName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetFileName" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFileName(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetFileName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetFileName" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetFileName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetFullFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetFullFileName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetFullFileName" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFullFileName(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetFullFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetFullFileName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetFullFileName" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetFullFileName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetGlobalFileStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  GPTYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetGlobalFileStart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetGlobalFileStart" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDTREC_SetGlobalFileStart" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetGlobalFileStart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetGlobalFileStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GPTYPE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetGlobalFileStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetGlobalFileStart" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (GPTYPE)((MDTREC const *)arg1)->GetGlobalFileStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetLocalRecordStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  GPTYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetLocalRecordStart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetLocalRecordStart" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDTREC_SetLocalRecordStart" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetLocalRecordStart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetLocalRecordStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GPTYPE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetLocalRecordStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetLocalRecordStart" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (GPTYPE)((MDTREC const *)arg1)->GetLocalRecordStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetLocalRecordEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  GPTYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetLocalRecordEnd",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetLocalRecordEnd" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDTREC_SetLocalRecordEnd" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetLocalRecordEnd(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetLocalRecordEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GPTYPE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetLocalRecordEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetLocalRecordEnd" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (GPTYPE)((MDTREC const *)arg1)->GetLocalRecordEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_long_SS_long(static_cast< unsigned long long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetLocale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  LOCALE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetLocale",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetLocale" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LOCALE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDTREC_SetLocale" "', argument " "2"" of type '" "LOCALE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MDTREC_SetLocale" "', argument " "2"" of type '" "LOCALE""'");
    } else {
      LOCALE * temp = reinterpret_cast< LOCALE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetLocale(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetLocale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LOCALE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetLocale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetLocale" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetLocale();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new LOCALE(static_cast< const LOCALE& >(result))), SWIGTYPE_p_LOCALE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetDate",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetDate" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDTREC_SetDate" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MDTREC_SetDate" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDate(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetDate" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetDateModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetDateModified",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetDateModified" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDTREC_SetDateModified" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MDTREC_SetDateModified" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDateModified(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetDateModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetDateModified",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetDateModified" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetDateModified();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetDateCreated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetDateCreated",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetDateCreated" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDTREC_SetDateCreated" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MDTREC_SetDateCreated" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDateCreated(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetDateCreated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetDateCreated",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetDateCreated" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetDateCreated();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetDateExpires(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetDateExpires",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetDateExpires" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDTREC_SetDateExpires" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MDTREC_SetDateExpires" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDateExpires(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetDateExpires(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetDateExpires",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetDateExpires" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->GetDateExpires();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_TTL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_TTL",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_TTL" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((MDTREC const *)arg1)->TTL();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_TTL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_TTL",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_TTL" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDTREC_TTL" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MDTREC_TTL" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((MDTREC const *)arg1)->TTL(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_TTL(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MDTREC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_MDTREC_TTL__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_MDTREC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SRCH_DATE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_MDTREC_TTL__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'MDTREC_TTL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    MDTREC::TTL() const\n"
    "    MDTREC::TTL(SRCH_DATE) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_MDTREC_SetDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_SetDeleted",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_SetDeleted" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDTREC_SetDeleted" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDeleted(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_GetDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_GetDeleted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_GetDeleted" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((MDTREC const *)arg1)->GetDeleted();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_FlipBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_FlipBytes",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_FlipBytes" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->FlipBytes();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDTREC_Dump(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDTREC_Dump",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDTREC_Dump" "', argument " "1"" of type '" "MDTREC const *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDTREC const *)arg1)->Dump();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MDTREC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = (MDTREC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_MDTREC",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDTREC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MDTREC" "', argument " "1"" of type '" "MDTREC *""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MDTREC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MDTREC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_MDT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MDT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_MDT",2,2,&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_MDT" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (MDT *)new MDT(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MDT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_GetFileStem(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_GetFileStem",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_GetFileStem" "', argument " "1"" of type '" "MDT const *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((MDT const *)arg1)->GetFileStem();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_SetEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  unsigned int arg2 ;
  MDTREC arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_SetEntry",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_SetEntry" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDT_SetEntry" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_MDTREC,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "MDT_SetEntry" "', argument " "3"" of type '" "MDTREC const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "MDT_SetEntry" "', argument " "3"" of type '" "MDTREC const""'");
    } else {
      MDTREC * temp = reinterpret_cast< MDTREC * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetEntry(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_LookupByKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_LookupByKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_LookupByKey" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "MDT_LookupByKey" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->LookupByKey((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_GetEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MDTREC *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_GetEntry",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_GetEntry" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDT_GetEntry" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (MDTREC *)(arg1)->GetEntry(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MDTREC, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_Delete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_Delete",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_Delete" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDT_Delete" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Delete(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_UnDelete(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_UnDelete",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_UnDelete" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDT_UnDelete" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->UnDelete(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_IsDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_IsDeleted",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_IsDeleted" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "MDT_IsDeleted" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsDeleted(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_GetTotalEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_GetTotalEntries",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_GetTotalEntries" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalEntries();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_GetTotalDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_GetTotalDeleted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_GetTotalDeleted" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalDeleted();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_GetChanged(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_GetChanged",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_GetChanged" "', argument " "1"" of type '" "MDT const *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((MDT const *)arg1)->GetChanged();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_RemoveDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_RemoveDeleted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_RemoveDeleted" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->RemoveDeleted();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_MDT_Ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"MDT_Ok",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "MDT_Ok" "', argument " "1"" of type '" "MDT const *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((MDT const *)arg1)->Ok();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_MDT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDT *arg1 = (MDT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_MDT",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_MDT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_MDT" "', argument " "1"" of type '" "MDT *""'"); 
  }
  arg1 = reinterpret_cast< MDT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *MDT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_MDT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FC__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FC *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_FC",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FC" "', argument " "1"" of type '" "FC""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_FC" "', argument " "1"" of type '" "FC""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FC *)new FC(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FC__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GPTYPE *arg1 = (GPTYPE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FC *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_FC",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_unsigned_long_long, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FC" "', argument " "1"" of type '" "GPTYPE *""'"); 
  }
  arg1 = reinterpret_cast< GPTYPE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FC *)new FC(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FC__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  GPTYPE arg1 ;
  GPTYPE arg2 ;
  unsigned long long val1 ;
  int ecode1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FC *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_FC",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_long_SS_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FC" "', argument " "1"" of type '" "GPTYPE""'");
  } 
  arg1 = static_cast< GPTYPE >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FC" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FC *)new FC(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FC__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int arg2 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FC *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_FC",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FC" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_FC" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FC *)new FC(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FC__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  FC *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_FC",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_FC" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FC *)new FC(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FC__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FC *)new FC();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FC, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FC(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_FC__SWIG_5(self, args);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_unsigned_long_long, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FC__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_FC__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_FC__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FC__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_FC__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_FC'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FC::FC(FC)\n"
    "    FC::FC(GPTYPE *)\n"
    "    FC::FC(GPTYPE,GPTYPE const)\n"
    "    FC::FC(unsigned int,unsigned int const)\n"
    "    FC::FC(unsigned int)\n"
    "    FC::FC()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FC_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_Write",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_Write" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)FC_Write(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_Read",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_Read" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)FC_Read(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_SetFieldStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_SetFieldStart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_SetFieldStart" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FC_SetFieldStart" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFieldStart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_SetFieldEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_SetFieldEnd",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_SetFieldEnd" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FC_SetFieldEnd" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFieldEnd(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_GetFieldStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_GetFieldStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_GetFieldStart" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetFieldStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_GetFieldEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_GetFieldEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_GetFieldEnd" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetFieldEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_GetLength",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_GetLength" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetLength();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_Compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  FC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_Compare",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_Compare" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FC_Compare" "', argument " "2"" of type '" "FC const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FC_Compare" "', argument " "2"" of type '" "FC const""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->Compare(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  FC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_Contains",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_Contains" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FC_Contains" "', argument " "2"" of type '" "FC const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FC_Contains" "', argument " "2"" of type '" "FC const""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->Contains(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_asTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_asTuple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_asTuple" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)FC_asTuple(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FC_FlipBytes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"FC_FlipBytes",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FC_FlipBytes" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->FlipBytes();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC *arg1 = (FC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_FC",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FC, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FC" "', argument " "1"" of type '" "FC *""'"); 
  }
  arg1 = reinterpret_cast< FC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FC_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FC, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TREENODE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TREENODE *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (TREENODE *)new TREENODE();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TREENODE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TREENODE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FC arg1 ;
  char *arg2 = (char *) 0 ;
  void *argp1 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TREENODE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_TREENODE",2,2,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TREENODE" "', argument " "1"" of type '" "FC const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TREENODE" "', argument " "1"" of type '" "FC const""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TREENODE" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (TREENODE *)new TREENODE(arg1,(char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TREENODE, SWIG_POINTER_NEW |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_TREENODE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_TREENODE__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_FC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_TREENODE__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_TREENODE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    TREENODE::TREENODE()\n"
    "    TREENODE::TREENODE(FC const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_TREENODE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TREENODE *arg1 = (TREENODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_TREENODE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TREENODE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TREENODE" "', argument " "1"" of type '" "TREENODE *""'"); 
  }
  arg1 = reinterpret_cast< TREENODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TREENODE_Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TREENODE *arg1 = (TREENODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"TREENODE_Name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TREENODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TREENODE_Name" "', argument " "1"" of type '" "TREENODE *""'"); 
  }
  arg1 = reinterpret_cast< TREENODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Name();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TREENODE_Fc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  TREENODE *arg1 = (TREENODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FC result;
  
  if(!PyArg_UnpackTuple(args,(char *)"TREENODE_Fc",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_TREENODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TREENODE_Fc" "', argument " "1"" of type '" "TREENODE *""'"); 
  }
  arg1 = reinterpret_cast< TREENODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Fc();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new FC(static_cast< const FC& >(result))), SWIGTYPE_p_FC, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TREENODE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_TREENODE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NODETREE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (NODETREE *)new NODETREE();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NODETREE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NODETREE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  NODETREE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_NODETREE",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_NODETREE,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_NODETREE" "', argument " "1"" of type '" "NODETREE const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_NODETREE" "', argument " "1"" of type '" "NODETREE const""'");
    } else {
      NODETREE * temp = reinterpret_cast< NODETREE * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (NODETREE *)new NODETREE(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_NODETREE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_NODETREE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_NODETREE__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_NODETREE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_NODETREE__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_NODETREE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NODETREE::NODETREE()\n"
    "    NODETREE::NODETREE(NODETREE const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NODETREE_AddEntry__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  TREENODE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TREENODELIST *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_AddEntry",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_AddEntry" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_TREENODE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NODETREE_AddEntry" "', argument " "2"" of type '" "TREENODE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NODETREE_AddEntry" "', argument " "2"" of type '" "TREENODE const""'");
    } else {
      TREENODE * temp = reinterpret_cast< TREENODE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (TREENODELIST *)(arg1)->AddEntry(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TREENODELIST, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_AddEntry__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  NODETREE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TREENODELIST *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_AddEntry",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_AddEntry" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_NODETREE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NODETREE_AddEntry" "', argument " "2"" of type '" "NODETREE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NODETREE_AddEntry" "', argument " "2"" of type '" "NODETREE const""'");
    } else {
      NODETREE * temp = reinterpret_cast< NODETREE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (TREENODELIST *)(arg1)->AddEntry(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_TREENODELIST, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_AddEntry(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NODETREE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_TREENODE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NODETREE_AddEntry__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NODETREE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_NODETREE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NODETREE_AddEntry__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NODETREE_AddEntry'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NODETREE::AddEntry(TREENODE const)\n"
    "    NODETREE::AddEntry(NODETREE const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_NODETREE_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_Clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_Clear" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Clear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_Reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_Reverse",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_Reverse" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Reverse();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_Sort(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_Sort",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_Sort" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Sort();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_IsSorted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_IsSorted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_IsSorted" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsSorted();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_IsEmpty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_IsEmpty" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsEmpty();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_GetEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TREENODE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_GetEntry",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_GetEntry" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "NODETREE_GetEntry" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetEntry(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new TREENODE(static_cast< const TREENODE& >(result))), SWIGTYPE_p_TREENODE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_XMLNodeTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_XMLNodeTree",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_XMLNodeTree" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NODETREE_XMLNodeTree" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->XMLNodeTree((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_XMLNodeTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"NODETREE_XMLNodeTree",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NODETREE_XMLNodeTree" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->XMLNodeTree();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NODETREE_XMLNodeTree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NODETREE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_NODETREE_XMLNodeTree__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_NODETREE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_NODETREE_XMLNodeTree__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'NODETREE_XMLNodeTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    NODETREE::XMLNodeTree(char const *)\n"
    "    NODETREE::XMLNodeTree()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_NODETREE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  NODETREE *arg1 = (NODETREE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_NODETREE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_NODETREE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NODETREE" "', argument " "1"" of type '" "NODETREE *""'"); 
  }
  arg1 = reinterpret_cast< NODETREE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NODETREE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_NODETREE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RESULT__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RESULT *)new RESULT();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RESULT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RESULT__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  MDTREC *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RESULT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_RESULT",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_MDTREC,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RESULT" "', argument " "1"" of type '" "MDTREC const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RESULT" "', argument " "1"" of type '" "MDTREC const &""'"); 
  }
  arg1 = reinterpret_cast< MDTREC * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RESULT *)new RESULT((MDTREC const &)*arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RESULT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RESULT__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RESULT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_RESULT",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_RESULT,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RESULT" "', argument " "1"" of type '" "RESULT const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RESULT" "', argument " "1"" of type '" "RESULT const &""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RESULT *)new RESULT((RESULT const &)*arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RESULT, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RESULT(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RESULT__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_MDTREC, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RESULT__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_RESULT, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RESULT__SWIG_2(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RESULT'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RESULT::RESULT()\n"
    "    RESULT::RESULT(MDTREC const &)\n"
    "    RESULT::RESULT(RESULT const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RESULT_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_Write",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_Write" "', argument " "1"" of type '" "RESULT *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)RESULT_Write(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_Read",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_Read" "', argument " "1"" of type '" "RESULT *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)RESULT_Read(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_SetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  INDEX_ID arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_SetIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_SetIndex" "', argument " "1"" of type '" "RESULT *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_INDEX_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RESULT_SetIndex" "', argument " "2"" of type '" "INDEX_ID const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RESULT_SetIndex" "', argument " "2"" of type '" "INDEX_ID const""'");
    } else {
      INDEX_ID * temp = reinterpret_cast< INDEX_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetIndex(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  INDEX_ID result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetIndex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetIndex" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetIndex();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new INDEX_ID(static_cast< const INDEX_ID& >(result))), SWIGTYPE_p_INDEX_ID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_SetMdtIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_SetMdtIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_SetMdtIndex" "', argument " "1"" of type '" "RESULT *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RESULT_SetMdtIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetMdtIndex(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetMdtIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetMdtIndex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetMdtIndex" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((RESULT const *)arg1)->GetMdtIndex();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_SetVirtualIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_SetVirtualIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_SetVirtualIndex" "', argument " "1"" of type '" "RESULT *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RESULT_SetVirtualIndex" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetVirtualIndex(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetVirtualIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetVirtualIndex",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetVirtualIndex" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((RESULT const *)arg1)->GetVirtualIndex();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetCategory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetCategory",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetCategory" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)((RESULT const *)arg1)->GetCategory();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_SetCategory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_SetCategory",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_SetCategory" "', argument " "1"" of type '" "RESULT *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RESULT_SetCategory" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetCategory(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_SetKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_SetKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_SetKey" "', argument " "1"" of type '" "RESULT *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RESULT_SetKey" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetKey((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetKey" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetGlobalKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetGlobalKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetGlobalKey" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetGlobalKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetLanguageCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetLanguageCode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetLanguageCode" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((RESULT const *)arg1)->GetLanguageCode();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetCharsetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetCharsetCode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetCharsetCode" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((RESULT const *)arg1)->GetCharsetCode();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetLanguageName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetLanguageName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetLanguageName" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((RESULT const *)arg1)->GetLanguageName();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetCharsetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetCharsetName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetCharsetName" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((RESULT const *)arg1)->GetCharsetName();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetFullFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetFullFileName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetFullFileName" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetFullFileName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetPath",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetPath" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetPath();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetFileName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetFileName" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetFileName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetDoctype(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetDoctype",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetDoctype" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetDoctype();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetRecordStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetRecordStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetRecordStart" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)((RESULT const *)arg1)->GetRecordStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetRecordEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetRecordEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetRecordEnd" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)((RESULT const *)arg1)->GetRecordEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetLength(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetLength",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetLength" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)((RESULT const *)arg1)->GetLength();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetRecordSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetRecordSize",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetRecordSize" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)((RESULT const *)arg1)->GetRecordSize();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetScore",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetScore" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((RESULT const *)arg1)->GetScore();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetAuxCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetAuxCount",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetAuxCount" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((RESULT const *)arg1)->GetAuxCount();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetHitTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetHitTotal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetHitTotal" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((RESULT const *)arg1)->GetHitTotal();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetDate" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetDateModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetDateModified",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetDateModified" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetDateModified();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetDateCreated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetDateCreated",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetDateCreated" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetDateCreated();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetHitTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FCT result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetHitTable",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetHitTable" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->GetHitTable();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyList_FromFCT(result);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_GetRefcount_(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_GetRefcount_",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_GetRefcount_" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((RESULT const *)arg1)->GetRefcount_();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RESULT_XMLHitTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RESULT_XMLHitTable",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RESULT_XMLHitTable" "', argument " "1"" of type '" "RESULT const *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RESULT const *)arg1)->XMLHitTable();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RESULT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RESULT *arg1 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RESULT",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RESULT, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RESULT" "', argument " "1"" of type '" "RESULT *""'"); 
  }
  arg1 = reinterpret_cast< RESULT * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RESULT_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RESULT, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IRSET__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_IRSET",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IRSET" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IRSET" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)new IRSET(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IRSET__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_IRSET",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_IRSET" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)new IRSET(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IRSET(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDBOBJ, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IRSET__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDBOBJ, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IRSET__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IRSET'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::IRSET(IDBOBJ *,unsigned int)\n"
    "    IRSET::IRSET(IDBOBJ *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_getself(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_getself",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_getself" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *) &IRSET_getself(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Write",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Write" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IRSET_Write(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Read",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Read" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IRSET_Read(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_LoadTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_LoadTable",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_LoadTable" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->LoadTable(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_SaveTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_SaveTable",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_SaveTable" "', argument " "1"" of type '" "IRSET const *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    ((IRSET const *)arg1)->SaveTable(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_SaveSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  STRING *arg2 = 0 ;
  QUERY *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  STRING temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_SaveSearch",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_SaveSearch" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    if (PyString_Check(obj1)) {
      temp2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
      arg2 = &temp2;
    } else {
      SWIG_exception(SWIG_TypeError,  StringErrorMsg);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IRSET_SaveSearch" "', argument " "3"" of type '" "QUERY const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_SaveSearch" "', argument " "3"" of type '" "QUERY const &""'"); 
  }
  arg3 = reinterpret_cast< QUERY * >(argp3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)IRSET_SaveSearch(arg1,(STRING const &)*arg2,(QUERY const &)*arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_LoadSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  STRING *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  STRING temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  QUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_LoadSearch",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_LoadSearch" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    if (PyString_Check(obj1)) {
      temp2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
      arg2 = &temp2;
    } else {
      SWIG_exception(SWIG_TypeError,  StringErrorMsg);
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (QUERY *)IRSET_LoadSearch(arg1,(STRING const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QUERY, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_GetRset__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_GetRset",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_GetRset" "', argument " "1"" of type '" "IRSET const *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_GetRset" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)((IRSET const *)arg1)->GetRset(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_GetRset__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_GetRset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_GetRset" "', argument " "1"" of type '" "IRSET const *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)((IRSET const *)arg1)->GetRset();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_GetRset(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IRSET_GetRset__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IRSET_GetRset__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_GetRset'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::GetRset(unsigned int) const\n"
    "    IRSET::GetRset() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_Fill__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Fill",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Fill" "', argument " "1"" of type '" "IRSET const *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_Fill" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IRSET_Fill" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)((IRSET const *)arg1)->Fill(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Fill__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Fill",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Fill" "', argument " "1"" of type '" "IRSET const *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_Fill" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)((IRSET const *)arg1)->Fill(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Fill(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IRSET_Fill__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IRSET_Fill__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_Fill'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::Fill(unsigned int,unsigned int) const\n"
    "    IRSET::Fill(unsigned int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_GetTotalEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_GetTotalEntries",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_GetTotalEntries" "', argument " "1"" of type '" "IRSET const *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((IRSET const *)arg1)->GetTotalEntries();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_GetHitTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_GetHitTotal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_GetHitTotal" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetHitTotal();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Join(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Join",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Join" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Join" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Join" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Join((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Or(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Or",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Or" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Or" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Or" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Or((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Nor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Nor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Nor" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Nor" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Nor" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Nor((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_And(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_And",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_And" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_And" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_And" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->And((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Nand(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Nand",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Nand" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Nand" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Nand" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Nand((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_AndNot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_AndNot",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_AndNot" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_AndNot" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_AndNot" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->AndNot((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Xor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Xor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Xor" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Xor" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Xor" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Xor((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Near(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Near",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Near" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Near" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Near" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Near((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Far(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Far",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Far" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Far" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Far" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Far((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_After(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_After",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_After" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_After" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_After" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->After((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Before(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Before",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Before" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Before" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Before" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Before((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Adj(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Adj",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Adj" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Adj" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Adj" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Adj((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Follows(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Follows",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Follows" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Follows" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Follows" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Follows((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Precedes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Precedes",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Precedes" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Precedes" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Precedes" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Precedes((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Neighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Neighbor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Neighbor" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Neighbor" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Neighbor" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Neighbor((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Peer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Peer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Peer" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Peer" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Peer" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Peer((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_BeforePeer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_BeforePeer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_BeforePeer" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_BeforePeer" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_BeforePeer" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->BeforePeer((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_AfterPeer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_AfterPeer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_AfterPeer" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_AfterPeer" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_AfterPeer" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->AfterPeer((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_XPeer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_XPeer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_XPeer" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_XPeer" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_XPeer" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->XPeer((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Within__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Within",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Within" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Within" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Within((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Within__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Within",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Within" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Within" "', argument " "2"" of type '" "IRSET &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_Within" "', argument " "2"" of type '" "IRSET &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IRSET_Within" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Within(*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Within(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IRSET_Within__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_IRSET, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IRSET_Within__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_Within'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::Within(char const *)\n"
    "    IRSET::Within(IRSET &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_BeforeWithin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_BeforeWithin",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_BeforeWithin" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_BeforeWithin" "', argument " "2"" of type '" "IRSET &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_BeforeWithin" "', argument " "2"" of type '" "IRSET &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IRSET_BeforeWithin" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->BeforeWithin(*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_AfterWithin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_AfterWithin",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_AfterWithin" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_AfterWithin" "', argument " "2"" of type '" "IRSET &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_AfterWithin" "', argument " "2"" of type '" "IRSET &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IRSET_AfterWithin" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->AfterWithin(*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_XWithin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_XWithin",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_XWithin" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_XWithin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->XWithin((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Inside(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Inside",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Inside" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Inside" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Inside((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Inclusive(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Inclusive",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Inclusive" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_Inclusive" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Inclusive((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXChars",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXChars" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXChars" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXChars" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IRSET_WithinXChars" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXChars((IRSET const &)*arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXChars",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXChars" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXChars" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXChars" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXChars((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IRSET, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IRSET_WithinXChars__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IRSET, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IRSET_WithinXChars__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_WithinXChars'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::WithinXChars(IRSET const &,float)\n"
    "    IRSET::WithinXChars(IRSET const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars_Before__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXChars_Before",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXChars_Before" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXChars_Before" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXChars_Before" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IRSET_WithinXChars_Before" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXChars_Before((IRSET const &)*arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars_Before__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXChars_Before",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXChars_Before" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXChars_Before" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXChars_Before" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXChars_Before((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars_Before(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IRSET, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IRSET_WithinXChars_Before__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IRSET, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IRSET_WithinXChars_Before__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_WithinXChars_Before'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::WithinXChars_Before(IRSET const &,float)\n"
    "    IRSET::WithinXChars_Before(IRSET const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars_After__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXChars_After",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXChars_After" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXChars_After" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXChars_After" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IRSET_WithinXChars_After" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXChars_After((IRSET const &)*arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars_After__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXChars_After",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXChars_After" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXChars_After" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXChars_After" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXChars_After((IRSET const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXChars_After(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IRSET, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IRSET_WithinXChars_After__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_IRSET, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_float(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IRSET_WithinXChars_After__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_WithinXChars_After'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::WithinXChars_After(IRSET const &,float)\n"
    "    IRSET::WithinXChars_After(IRSET const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXPercent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXPercent",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXPercent" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXPercent" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXPercent" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IRSET_WithinXPercent" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXPercent((IRSET const &)*arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXPercent_Before(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXPercent_Before",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXPercent_Before" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXPercent_Before" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXPercent_Before" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IRSET_WithinXPercent_Before" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXPercent_Before((IRSET const &)*arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinXPercent_After(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  IRSET *arg2 = 0 ;
  float arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  float val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinXPercent_After",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinXPercent_After" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_IRSET,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinXPercent_After" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IRSET_WithinXPercent_After" "', argument " "2"" of type '" "IRSET const &""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  ecode3 = SWIG_AsVal_float(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IRSET_WithinXPercent_After" "', argument " "3"" of type '" "float""'");
  } 
  arg3 = static_cast< float >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinXPercent_After((IRSET const &)*arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinFile",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinFile" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinFile((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithinDoctype(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithinDoctype",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithinDoctype" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithinDoctype" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithinDoctype((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_WithKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_WithKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_WithKey" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_WithKey" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->WithKey((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Not(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Not",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Not" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Not();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Sibling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Sibling",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Sibling" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Sibling();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Reduce__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Reduce",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Reduce" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_Reduce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Reduce(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Reduce__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Reduce",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Reduce" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Reduce();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Reduce(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IRSET_Reduce__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IRSET_Reduce__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_Reduce'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::Reduce(int)\n"
    "    IRSET::Reduce()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_Trim__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Trim",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Trim" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_Trim" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Trim(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Trim__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_Trim",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_Trim" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Trim();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_Trim(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IRSET_Trim__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IRSET_Trim__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_Trim'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::Trim(int)\n"
    "    IRSET::Trim()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_HitCount__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_HitCount",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_HitCount" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_HitCount" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->HitCount(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_HitCount__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_HitCount",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_HitCount" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->HitCount();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_HitCount(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IRSET_HitCount__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IRSET_HitCount__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_HitCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::HitCount(int)\n"
    "    IRSET::HitCount()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_BoostScore__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_BoostScore",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_BoostScore" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_BoostScore" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->BoostScore(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_BoostScore__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_BoostScore",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_BoostScore" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->BoostScore();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_BoostScore(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IRSET_BoostScore__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IRSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_float(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IRSET_BoostScore__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IRSET_BoostScore'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IRSET::BoostScore(float)\n"
    "    IRSET::BoostScore()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IRSET_ComputeScores(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_ComputeScores",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_ComputeScores" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_ComputeScores" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->ComputeScores(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_SortBy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  enum SortBy arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_SortBy",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_SortBy" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IRSET_SortBy" "', argument " "2"" of type '" "enum SortBy""'");
  } 
  arg2 = static_cast< enum SortBy >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SortBy(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_GetMaxScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_GetMaxScore",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_GetMaxScore" "', argument " "1"" of type '" "IRSET const *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((IRSET const *)arg1)->GetMaxScore();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_GetMinScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_GetMinScore",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_GetMinScore" "', argument " "1"" of type '" "IRSET const *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((IRSET const *)arg1)->GetMinScore();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_setPrivateSortUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *arg2 = (void *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_setPrivateSortUserData",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_setPrivateSortUserData" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  res2 = SWIG_ConvertPtr(obj1,SWIG_as_voidptrptr(&arg2), 0, 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IRSET_setPrivateSortUserData" "', argument " "2"" of type '" "void *""'"); 
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->setPrivateSortUserData(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_getPrivateSortUserData(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  void *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_getPrivateSortUserData",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_getPrivateSortUserData" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (void *)(arg1)->getPrivateSortUserData();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_void, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IRSET_installSortFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  int (*arg2)(void const *,void const *) = (int (*)(void const *,void const *)) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IRSET_installSortFunction",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IRSET_installSortFunction" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    int res = SWIG_ConvertFunctionPtr(obj1, (void**)(&arg2), SWIGTYPE_p_f_p_q_const__void_p_q_const__void__int);
    if (!SWIG_IsOK(res)) {
      SWIG_exception_fail(SWIG_ArgError(res), "in method '" "IRSET_installSortFunction" "', argument " "2"" of type '" "int (*)(void const *,void const *)""'"); 
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->installSortFunction(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IRSET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IRSET *arg1 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_IRSET",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IRSET, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IRSET" "', argument " "1"" of type '" "IRSET *""'"); 
  }
  arg1 = reinterpret_cast< IRSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IRSET_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IRSET, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RSET__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  unsigned int arg1 ;
  unsigned int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_RSET",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_unsigned_SS_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RSET" "', argument " "1"" of type '" "unsigned int""'");
  } 
  arg1 = static_cast< unsigned int >(val1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)new RSET(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RSET__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)new RSET();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RSET(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RSET__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_unsigned_SS_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_RSET__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RSET'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RSET::RSET(unsigned int)\n"
    "    RSET::RSET()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RSET_getself(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_getself",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_getself" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *) &RSET_getself(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_Write",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_Write" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)RSET_Write(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_Read",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_Read" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)RSET_Read(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_Cat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  RSET arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_Cat",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_Cat" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RSET,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RSET_Cat" "', argument " "2"" of type '" "RSET const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RSET_Cat" "', argument " "2"" of type '" "RSET const""'");
    } else {
      RSET * temp = reinterpret_cast< RSET * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *) &(arg1)->Cat(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_LoadTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_LoadTable",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_LoadTable" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->LoadTable(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_SaveTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_SaveTable",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_SaveTable" "', argument " "1"" of type '" "RSET const *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    ((RSET const *)arg1)->SaveTable(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_GetMaxScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_GetMaxScore",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_GetMaxScore" "', argument " "1"" of type '" "RSET const *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((RSET const *)arg1)->GetMaxScore();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_GetMinScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_GetMinScore",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_GetMinScore" "', argument " "1"" of type '" "RSET const *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((RSET const *)arg1)->GetMinScore();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_FilterDateRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  SwigValueWrapper< DATERANGE > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_FilterDateRange",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_FilterDateRange" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DATERANGE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RSET_FilterDateRange" "', argument " "2"" of type '" "DATERANGE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RSET_FilterDateRange" "', argument " "2"" of type '" "DATERANGE const""'");
    } else {
      DATERANGE * temp = reinterpret_cast< DATERANGE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->FilterDateRange(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_GetEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RESULT result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_GetEntry",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_GetEntry" "', argument " "1"" of type '" "RSET const *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RSET_GetEntry" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RSET const *)arg1)->GetEntry(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new RESULT(static_cast< const RESULT& >(result))), SWIGTYPE_p_RESULT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_GetScaledScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  double arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_GetScaledScore",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_GetScaledScore" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RSET_GetScaledScore" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RSET_GetScaledScore" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetScaledScore(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_GetHitTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_GetHitTotal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_GetHitTotal" "', argument " "1"" of type '" "RSET const *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((RSET const *)arg1)->GetHitTotal();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_Find(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_Find",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_Find" "', argument " "1"" of type '" "RSET const *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RSET_Find" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((RSET const *)arg1)->Find((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_GetTotalEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_GetTotalEntries",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_GetTotalEntries" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalEntries();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_SortBy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  enum SortBy arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_SortBy",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_SortBy" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RSET_SortBy" "', argument " "2"" of type '" "enum SortBy""'");
  } 
  arg2 = static_cast< enum SortBy >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SortBy(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_SortByCategoryMagnetism(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_SortByCategoryMagnetism",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_SortByCategoryMagnetism" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RSET_SortByCategoryMagnetism" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SortByCategoryMagnetism(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_Reduce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_Reduce",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_Reduce" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RSET_Reduce" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->Reduce(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_DropByTerms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  size_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  size_t val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_DropByTerms",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_DropByTerms" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  ecode2 = SWIG_AsVal_size_t(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RSET_DropByTerms" "', argument " "2"" of type '" "size_t""'");
  } 
  arg2 = static_cast< size_t >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->DropByTerms(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET_DropByScore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET_DropByScore",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET_DropByScore" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RSET_DropByScore" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->DropByScore(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RSET___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RESULT result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RSET___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RSET___getitem__" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RSET___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = RSET___getitem__(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new RESULT(static_cast< const RESULT& >(result))), SWIGTYPE_p_RESULT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RSET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RSET *arg1 = (RSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RSET",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RSET, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RSET" "', argument " "1"" of type '" "RSET *""'"); 
  }
  arg1 = reinterpret_cast< RSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RSET_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RSET, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_INFIX2RPN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INFIX2RPN *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (INFIX2RPN *)new INFIX2RPN();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_INFIX2RPN, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INFIX2RPN_Parse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INFIX2RPN *arg1 = (INFIX2RPN *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INFIX2RPN_Parse",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INFIX2RPN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INFIX2RPN_Parse" "', argument " "1"" of type '" "INFIX2RPN *""'"); 
  }
  arg1 = reinterpret_cast< INFIX2RPN * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Parse(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INFIX2RPN_InputParsedOK(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INFIX2RPN *arg1 = (INFIX2RPN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INFIX2RPN_InputParsedOK",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INFIX2RPN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INFIX2RPN_InputParsedOK" "', argument " "1"" of type '" "INFIX2RPN const *""'"); 
  }
  arg1 = reinterpret_cast< INFIX2RPN * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((INFIX2RPN const *)arg1)->InputParsedOK();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INFIX2RPN_GetErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INFIX2RPN *arg1 = (INFIX2RPN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INFIX2RPN_GetErrorMessage",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INFIX2RPN, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INFIX2RPN_GetErrorMessage" "', argument " "1"" of type '" "INFIX2RPN const *""'"); 
  }
  arg1 = reinterpret_cast< INFIX2RPN * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((INFIX2RPN const *)arg1)->GetErrorMessage();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_INFIX2RPN(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INFIX2RPN *arg1 = (INFIX2RPN *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_INFIX2RPN",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INFIX2RPN, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_INFIX2RPN" "', argument " "1"" of type '" "INFIX2RPN *""'"); 
  }
  arg1 = reinterpret_cast< INFIX2RPN * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *INFIX2RPN_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_INFIX2RPN, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_THESAURUS__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  THESAURUS *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (THESAURUS *)new THESAURUS();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_THESAURUS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THESAURUS__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  THESAURUS *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_THESAURUS",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (THESAURUS *)new THESAURUS(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_THESAURUS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THESAURUS__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  STRING arg2 ;
  bool arg3 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  THESAURUS *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_THESAURUS",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_THESAURUS" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (THESAURUS *)new THESAURUS(arg1,arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_THESAURUS, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_THESAURUS(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_THESAURUS__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_THESAURUS__SWIG_1(self, args);
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_THESAURUS__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_THESAURUS'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    THESAURUS::THESAURUS()\n"
    "    THESAURUS::THESAURUS(STRING const)\n"
    "    THESAURUS::THESAURUS(STRING const,STRING const,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THESAURUS_Compile__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  THESAURUS *arg1 = (THESAURUS *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"THESAURUS_Compile",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_THESAURUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THESAURUS_Compile" "', argument " "1"" of type '" "THESAURUS *""'"); 
  }
  arg1 = reinterpret_cast< THESAURUS * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "THESAURUS_Compile" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Compile(arg2,arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THESAURUS_Compile__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  THESAURUS *arg1 = (THESAURUS *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"THESAURUS_Compile",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_THESAURUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THESAURUS_Compile" "', argument " "1"" of type '" "THESAURUS *""'"); 
  }
  arg1 = reinterpret_cast< THESAURUS * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Compile(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_THESAURUS_Compile(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_THESAURUS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_THESAURUS_Compile__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_THESAURUS, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_THESAURUS_Compile__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'THESAURUS_Compile'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    THESAURUS::Compile(STRING const,STRING const,bool)\n"
    "    THESAURUS::Compile(STRING const,STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_THESAURUS_SetFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  THESAURUS *arg1 = (THESAURUS *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"THESAURUS_SetFileName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_THESAURUS, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "THESAURUS_SetFileName" "', argument " "1"" of type '" "THESAURUS *""'"); 
  }
  arg1 = reinterpret_cast< THESAURUS * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFileName(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_THESAURUS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  THESAURUS *arg1 = (THESAURUS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_THESAURUS",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_THESAURUS, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_THESAURUS" "', argument " "1"" of type '" "THESAURUS *""'"); 
  }
  arg1 = reinterpret_cast< THESAURUS * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *THESAURUS_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_THESAURUS, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_OPERATOR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (OPERATOR *)new OPERATOR();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_OPERATOR, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPERATOR_GetOpType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *arg1 = (OPERATOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  t_OpType result;
  
  if(!PyArg_UnpackTuple(args,(char *)"OPERATOR_GetOpType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OPERATOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPERATOR_GetOpType" "', argument " "1"" of type '" "OPERATOR const *""'"); 
  }
  arg1 = reinterpret_cast< OPERATOR * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((OPERATOR const *)arg1)->GetOpType();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new t_OpType(static_cast< const t_OpType& >(result))), SWIGTYPE_p_t_OpType, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPERATOR_SetOperatorType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *arg1 = (OPERATOR *) 0 ;
  t_Operator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"OPERATOR_SetOperatorType",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OPERATOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPERATOR_SetOperatorType" "', argument " "1"" of type '" "OPERATOR *""'"); 
  }
  arg1 = reinterpret_cast< OPERATOR * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OPERATOR_SetOperatorType" "', argument " "2"" of type '" "t_Operator""'");
  } 
  arg2 = static_cast< t_Operator >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetOperatorType(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPERATOR_GetOperatorType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *arg1 = (OPERATOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  t_Operator result;
  
  if(!PyArg_UnpackTuple(args,(char *)"OPERATOR_GetOperatorType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OPERATOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPERATOR_GetOperatorType" "', argument " "1"" of type '" "OPERATOR const *""'"); 
  }
  arg1 = reinterpret_cast< OPERATOR * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (t_Operator)((OPERATOR const *)arg1)->GetOperatorType();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPERATOR_SetOperatorMetric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *arg1 = (OPERATOR *) 0 ;
  float arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  float val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"OPERATOR_SetOperatorMetric",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OPERATOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPERATOR_SetOperatorMetric" "', argument " "1"" of type '" "OPERATOR *""'"); 
  }
  arg1 = reinterpret_cast< OPERATOR * >(argp1);
  ecode2 = SWIG_AsVal_float(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OPERATOR_SetOperatorMetric" "', argument " "2"" of type '" "float""'");
  } 
  arg2 = static_cast< float >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetOperatorMetric(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPERATOR_GetOperatorMetric(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *arg1 = (OPERATOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  float result;
  
  if(!PyArg_UnpackTuple(args,(char *)"OPERATOR_GetOperatorMetric",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OPERATOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPERATOR_GetOperatorMetric" "', argument " "1"" of type '" "OPERATOR const *""'"); 
  }
  arg1 = reinterpret_cast< OPERATOR * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (float)((OPERATOR const *)arg1)->GetOperatorMetric();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_float(static_cast< float >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPERATOR_SetOperatorString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *arg1 = (OPERATOR *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"OPERATOR_SetOperatorString",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OPERATOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPERATOR_SetOperatorString" "', argument " "1"" of type '" "OPERATOR *""'"); 
  }
  arg1 = reinterpret_cast< OPERATOR * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OPERATOR_SetOperatorString" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetOperatorString((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_OPERATOR_GetOperatorString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *arg1 = (OPERATOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"OPERATOR_GetOperatorString",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OPERATOR, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OPERATOR_GetOperatorString" "', argument " "1"" of type '" "OPERATOR const *""'"); 
  }
  arg1 = reinterpret_cast< OPERATOR * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((OPERATOR const *)arg1)->GetOperatorString();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OPERATOR(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  OPERATOR *arg1 = (OPERATOR *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_OPERATOR",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_OPERATOR, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OPERATOR" "', argument " "1"" of type '" "OPERATOR *""'"); 
  }
  arg1 = reinterpret_cast< OPERATOR * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OPERATOR_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_OPERATOR, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SQUERY__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SQUERY *)new SQUERY();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SQUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SQUERY__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SQUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SQUERY",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SQUERY" "', argument " "1"" of type '" "SQUERY""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SQUERY" "', argument " "1"" of type '" "SQUERY""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SQUERY *)new SQUERY(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SQUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SQUERY__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  enum QueryTypeMethods arg2 ;
  THESAURUS *arg3 = (THESAURUS *) 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SQUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SQUERY",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SQUERY" "', argument " "2"" of type '" "enum QueryTypeMethods""'");
  } 
  arg2 = static_cast< enum QueryTypeMethods >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_THESAURUS, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_SQUERY" "', argument " "3"" of type '" "THESAURUS *""'"); 
  }
  arg3 = reinterpret_cast< THESAURUS * >(argp3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SQUERY *)new SQUERY(arg1,arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SQUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SQUERY__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  enum QueryTypeMethods arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SQUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SQUERY",2,2,&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SQUERY" "', argument " "2"" of type '" "enum QueryTypeMethods""'");
  } 
  arg2 = static_cast< enum QueryTypeMethods >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SQUERY *)new SQUERY(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SQUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SQUERY__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  SQUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SQUERY",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SQUERY *)new SQUERY(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SQUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SQUERY(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SQUERY__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SQUERY__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SQUERY__SWIG_4(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_SQUERY__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_THESAURUS, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_new_SQUERY__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SQUERY'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SQUERY::SQUERY()\n"
    "    SQUERY::SQUERY(SQUERY)\n"
    "    SQUERY::SQUERY(STRING const,enum QueryTypeMethods,THESAURUS *)\n"
    "    SQUERY::SQUERY(STRING const,enum QueryTypeMethods)\n"
    "    SQUERY::SQUERY(STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SQUERY_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_Write",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_Write" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)SQUERY_Write(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_Read",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_Read" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)SQUERY_Read(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY___repr__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY___repr__" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = SQUERY___repr__(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_GetTotalTerms(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_GetTotalTerms",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_GetTotalTerms" "', argument " "1"" of type '" "SQUERY const *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((SQUERY const *)arg1)->GetTotalTerms();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  OPERATOR *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetOperator",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetOperator" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_OPERATOR,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SQUERY_SetOperator" "', argument " "2"" of type '" "OPERATOR const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SQUERY_SetOperator" "', argument " "2"" of type '" "OPERATOR const &""'"); 
  }
  arg2 = reinterpret_cast< OPERATOR * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetOperator((OPERATOR const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetOperatorAndWithin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetOperatorAndWithin",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetOperatorAndWithin" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SQUERY_SetOperatorAndWithin" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetOperatorAndWithin((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetOperatorNear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetOperatorNear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetOperatorNear" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetOperatorNear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetOperatorPeer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetOperatorPeer",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetOperatorPeer" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetOperatorPeer();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetAttributes__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  ATTRLIST *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetAttributes",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetAttributes" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ATTRLIST,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SQUERY_SetAttributes" "', argument " "2"" of type '" "ATTRLIST const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SQUERY_SetAttributes" "', argument " "2"" of type '" "ATTRLIST const &""'"); 
  }
  arg2 = reinterpret_cast< ATTRLIST * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SQUERY_SetAttributes" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetAttributes((ATTRLIST const &)*arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetAttributes__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  ATTRLIST *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetAttributes",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetAttributes" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_ATTRLIST,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SQUERY_SetAttributes" "', argument " "2"" of type '" "ATTRLIST const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SQUERY_SetAttributes" "', argument " "2"" of type '" "ATTRLIST const &""'"); 
  }
  arg2 = reinterpret_cast< ATTRLIST * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetAttributes((ATTRLIST const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetAttributes(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ATTRLIST, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SQUERY_SetAttributes__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_ATTRLIST, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SQUERY_SetAttributes__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SQUERY_SetAttributes'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SQUERY::SetAttributes(ATTRLIST const &,bool)\n"
    "    SQUERY::SetAttributes(ATTRLIST const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SQUERY_isPlainQuery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_isPlainQuery",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_isPlainQuery" "', argument " "1"" of type '" "SQUERY const *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((SQUERY const *)arg1)->isPlainQuery();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_isOpQuery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  t_Operator arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_isOpQuery",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_isOpQuery" "', argument " "1"" of type '" "SQUERY const *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SQUERY_isOpQuery" "', argument " "2"" of type '" "t_Operator""'");
  } 
  arg2 = static_cast< t_Operator >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((SQUERY const *)arg1)->isOpQuery(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetRelevantTerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetRelevantTerm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetRelevantTerm" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetRelevantTerm(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetInfixTerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetInfixTerm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetInfixTerm" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetInfixTerm(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetRpnTerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetRpnTerm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetRpnTerm" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetRpnTerm(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetQueryTerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetQueryTerm",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetQueryTerm" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetQueryTerm(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetQueryTermUTF(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  STRING temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetQueryTermUTF",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetQueryTermUTF" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1)) {
      temp2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
      arg2 = &temp2;
    } else {
      SWIG_exception(SWIG_TypeError,  StringErrorMsg);
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetQueryTermUTF((STRING const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetWords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetWords",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetWords" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SQUERY_SetWords" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetWords(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetWords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetWords",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetWords" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->SetWords(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetWordsAnd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetWordsAnd",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetWordsAnd" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SQUERY_SetWordsAnd" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)SQUERY_SetWordsAnd__SWIG_0(arg1,arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetWordsAnd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetWordsAnd",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetWordsAnd" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)SQUERY_SetWordsAnd__SWIG_0(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetWordsAnd(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SQUERY_SetWordsAnd__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SQUERY_SetWordsAnd__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SQUERY_SetWordsAnd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SQUERY::SetWordsAnd(STRING const,int)\n"
    "    SQUERY::SetWordsAnd(STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetWords__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  OPERATOR *arg3 = 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetWords",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetWords" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_OPERATOR,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SQUERY_SetWords" "', argument " "3"" of type '" "OPERATOR const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SQUERY_SetWords" "', argument " "3"" of type '" "OPERATOR const &""'"); 
  }
  arg3 = reinterpret_cast< OPERATOR * >(argp3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "SQUERY_SetWords" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->SetWords(arg2,(OPERATOR const &)*arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetWords__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  OPERATOR *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetWords",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetWords" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_OPERATOR,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SQUERY_SetWords" "', argument " "3"" of type '" "OPERATOR const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SQUERY_SetWords" "', argument " "3"" of type '" "OPERATOR const &""'"); 
  }
  arg3 = reinterpret_cast< OPERATOR * >(argp3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->SetWords(arg2,(OPERATOR const &)*arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetWords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SQUERY_SetWords__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_OPERATOR, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SQUERY_SetWords__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SQUERY_SetWords__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_OPERATOR, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_SQUERY_SetWords__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SQUERY_SetWords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SQUERY::SetWords(STRING const,int)\n"
    "    SQUERY::SetWords(STRING const)\n"
    "    SQUERY::SetWords(STRING const,OPERATOR const &,int)\n"
    "    SQUERY::SetWords(STRING const,OPERATOR const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetFreeFormWords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetFreeFormWords",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetFreeFormWords" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SQUERY_SetFreeFormWords" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->SetFreeFormWords(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetFreeFormWords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetFreeFormWords",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetFreeFormWords" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->SetFreeFormWords(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetFreeFormWords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SQUERY_SetFreeFormWords__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_SQUERY_SetFreeFormWords__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SQUERY_SetFreeFormWords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SQUERY::SetFreeFormWords(STRING const,int)\n"
    "    SQUERY::SetFreeFormWords(STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SQUERY_SetFreeFormWordsPhonetic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_SetFreeFormWordsPhonetic",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_SetFreeFormWordsPhonetic" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SQUERY_SetFreeFormWordsPhonetic" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->SetFreeFormWordsPhonetic(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_LastErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_LastErrorMessage",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_LastErrorMessage" "', argument " "1"" of type '" "SQUERY const *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((SQUERY const *)arg1)->LastErrorMessage();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_GetRpnTerm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_GetRpnTerm",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_GetRpnTerm" "', argument " "1"" of type '" "SQUERY const *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((SQUERY const *)arg1)->GetRpnTerm();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_Cat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  SQUERY arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SQUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_Cat",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_Cat" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SQUERY_Cat" "', argument " "2"" of type '" "SQUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SQUERY_Cat" "', argument " "2"" of type '" "SQUERY const""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SQUERY *) &(arg1)->Cat(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SQUERY, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_Cat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  SQUERY arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SQUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_Cat",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_Cat" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SQUERY_Cat" "', argument " "2"" of type '" "SQUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SQUERY_Cat" "', argument " "2"" of type '" "SQUERY const""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SQUERY_Cat" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SQUERY *) &(arg1)->Cat(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SQUERY, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_Cat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SQUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_SQUERY_Cat__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SQUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_SQUERY_Cat__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SQUERY_Cat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SQUERY::Cat(SQUERY const)\n"
    "    SQUERY::Cat(SQUERY const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SQUERY_OpenThesaurus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_OpenThesaurus",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_OpenThesaurus" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->OpenThesaurus(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_CloseThesaurus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_CloseThesaurus",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_CloseThesaurus" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->CloseThesaurus();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SQUERY_ExpandQuery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SQUERY_ExpandQuery",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SQUERY_ExpandQuery" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->ExpandQuery();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SQUERY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = (SQUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_SQUERY",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SQUERY, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SQUERY" "', argument " "1"" of type '" "SQUERY *""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SQUERY_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SQUERY, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_QUERY__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (QUERY *)new QUERY();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QUERY__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  QUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_QUERY",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QUERY" "', argument " "1"" of type '" "QUERY const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QUERY" "', argument " "1"" of type '" "QUERY const &""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (QUERY *)new QUERY((QUERY const &)*arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QUERY__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enum SortBy arg1 ;
  enum NormalizationMethods arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  QUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_QUERY",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_QUERY" "', argument " "1"" of type '" "enum SortBy""'");
  } 
  arg1 = static_cast< enum SortBy >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_QUERY" "', argument " "2"" of type '" "enum NormalizationMethods""'");
  } 
  arg2 = static_cast< enum NormalizationMethods >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (QUERY *)new QUERY(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QUERY__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  enum SortBy arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  QUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_QUERY",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_QUERY" "', argument " "1"" of type '" "enum SortBy""'");
  } 
  arg1 = static_cast< enum SortBy >(val1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (QUERY *)new QUERY(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QUERY__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = 0 ;
  enum SortBy arg2 ;
  enum NormalizationMethods arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  QUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_QUERY",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SQUERY,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QUERY" "', argument " "1"" of type '" "SQUERY const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QUERY" "', argument " "1"" of type '" "SQUERY const &""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_QUERY" "', argument " "2"" of type '" "enum SortBy""'");
  } 
  arg2 = static_cast< enum SortBy >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_QUERY" "', argument " "3"" of type '" "enum NormalizationMethods""'");
  } 
  arg3 = static_cast< enum NormalizationMethods >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (QUERY *)new QUERY((SQUERY const &)*arg1,arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QUERY__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = 0 ;
  enum SortBy arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  QUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_QUERY",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SQUERY,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QUERY" "', argument " "1"" of type '" "SQUERY const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QUERY" "', argument " "1"" of type '" "SQUERY const &""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_QUERY" "', argument " "2"" of type '" "enum SortBy""'");
  } 
  arg2 = static_cast< enum SortBy >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (QUERY *)new QUERY((SQUERY const &)*arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QUERY__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SQUERY *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  QUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_QUERY",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SQUERY,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_QUERY" "', argument " "1"" of type '" "SQUERY const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_QUERY" "', argument " "1"" of type '" "SQUERY const &""'"); 
  }
  arg1 = reinterpret_cast< SQUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (QUERY *)new QUERY((SQUERY const &)*arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_QUERY, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_QUERY(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_QUERY__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_QUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_QUERY__SWIG_1(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_QUERY__SWIG_6(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_QUERY__SWIG_3(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_QUERY__SWIG_5(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_QUERY__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_SQUERY, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_QUERY__SWIG_4(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_QUERY'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    QUERY::QUERY()\n"
    "    QUERY::QUERY(QUERY const &)\n"
    "    QUERY::QUERY(enum SortBy,enum NormalizationMethods)\n"
    "    QUERY::QUERY(enum SortBy)\n"
    "    QUERY::QUERY(SQUERY const &,enum SortBy,enum NormalizationMethods)\n"
    "    QUERY::QUERY(SQUERY const &,enum SortBy)\n"
    "    QUERY::QUERY(SQUERY const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_QUERY_SetSQUERY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  SQUERY *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_SetSQUERY",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_SetSQUERY" "', argument " "1"" of type '" "QUERY *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "QUERY_SetSQUERY" "', argument " "2"" of type '" "SQUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "QUERY_SetSQUERY" "', argument " "2"" of type '" "SQUERY const &""'"); 
  }
  arg2 = reinterpret_cast< SQUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetSQUERY((SQUERY const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_GetSQUERY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SQUERY *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_GetSQUERY",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_GetSQUERY" "', argument " "1"" of type '" "QUERY const *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SQUERY *) &((QUERY const *)arg1)->GetSQUERY();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SQUERY, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_SetNormalizationMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  enum NormalizationMethods arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_SetNormalizationMethod",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_SetNormalizationMethod" "', argument " "1"" of type '" "QUERY *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QUERY_SetNormalizationMethod" "', argument " "2"" of type '" "enum NormalizationMethods""'");
  } 
  arg2 = static_cast< enum NormalizationMethods >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetNormalizationMethod(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_GetNormalizationMethod(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  enum NormalizationMethods result;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_GetNormalizationMethod",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_GetNormalizationMethod" "', argument " "1"" of type '" "QUERY const *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (enum NormalizationMethods)((QUERY const *)arg1)->GetNormalizationMethod();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_SetSortBy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  enum SortBy arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_SetSortBy",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_SetSortBy" "', argument " "1"" of type '" "QUERY *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QUERY_SetSortBy" "', argument " "2"" of type '" "enum SortBy""'");
  } 
  arg2 = static_cast< enum SortBy >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetSortBy(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_GetSortBy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  enum SortBy result;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_GetSortBy",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_GetSortBy" "', argument " "1"" of type '" "QUERY const *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (enum SortBy)((QUERY const *)arg1)->GetSortBy();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_GetMaximumResults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_GetMaximumResults",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_GetMaximumResults" "', argument " "1"" of type '" "QUERY const *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((QUERY const *)arg1)->GetMaximumResults();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_SetMaximumResults(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_SetMaximumResults",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_SetMaximumResults" "', argument " "1"" of type '" "QUERY *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "QUERY_SetMaximumResults" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetMaximumResults(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_Write",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_Write" "', argument " "1"" of type '" "QUERY *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)QUERY_Write(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_Read",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_Read" "', argument " "1"" of type '" "QUERY *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)QUERY_Read(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_QUERY_asTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"QUERY_asTuple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "QUERY_asTuple" "', argument " "1"" of type '" "QUERY *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)QUERY_asTuple(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_QUERY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  QUERY *arg1 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_QUERY",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_QUERY, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_QUERY" "', argument " "1"" of type '" "QUERY *""'"); 
  }
  arg1 = reinterpret_cast< QUERY * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *QUERY_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_QUERY, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SRCH_DATE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SRCH_DATE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SRCH_DATE" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SRCH_DATE *)new SRCH_DATE((char const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SRCH_DATE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SRCH_DATE *)new SRCH_DATE();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SRCH_DATE__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  double arg1 ;
  double val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SRCH_DATE",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_double(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SRCH_DATE" "', argument " "1"" of type '" "double""'");
  } 
  arg1 = static_cast< double >(val1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SRCH_DATE *)new SRCH_DATE(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SRCH_DATE__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long arg1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SRCH_DATE",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SRCH_DATE" "', argument " "1"" of type '" "long""'");
  } 
  arg1 = static_cast< long >(val1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SRCH_DATE *)new SRCH_DATE(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_SRCH_DATE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_SRCH_DATE__SWIG_1(self, args);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SRCH_DATE__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_double(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_SRCH_DATE__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_SRCH_DATE__SWIG_0(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_SRCH_DATE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    SRCH_DATE::SRCH_DATE(char const *)\n"
    "    SRCH_DATE::SRCH_DATE()\n"
    "    SRCH_DATE::SRCH_DATE(double const)\n"
    "    SRCH_DATE::SRCH_DATE(long const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Write",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Write" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)SRCH_DATE_Write(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Read",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Read" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)SRCH_DATE_Read(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE___repr__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE___repr__" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = SRCH_DATE___repr__(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Plus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Plus",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Plus" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SRCH_DATE_Plus" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SRCH_DATE_Plus" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Plus(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Minus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Minus",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Minus" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SRCH_DATE_Minus" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SRCH_DATE_Minus" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Minus(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PlusNseconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PlusNseconds",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PlusNseconds" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_PlusNseconds" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PlusNseconds(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PlusNminutes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PlusNminutes",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PlusNminutes" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_PlusNminutes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PlusNminutes(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PlusNhours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PlusNhours",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PlusNhours" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_PlusNhours" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PlusNhours(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PlusNdays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PlusNdays",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PlusNdays" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_PlusNdays" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PlusNdays(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PlusNweeks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PlusNweeks",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PlusNweeks" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_PlusNweeks" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PlusNweeks(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PlusNmonths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PlusNmonths",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PlusNmonths" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_PlusNmonths" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PlusNmonths(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PlusNyears(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PlusNyears",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PlusNyears" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_PlusNyears" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PlusNyears(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_MinusNseconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_MinusNseconds",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_MinusNseconds" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_MinusNseconds" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->MinusNseconds(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_MinusNminutes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_MinusNminutes",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_MinusNminutes" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_MinusNminutes" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->MinusNminutes(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_MinusNhours(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_MinusNhours",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_MinusNhours" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_MinusNhours" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->MinusNhours(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_MinusNdays(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_MinusNdays",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_MinusNdays" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_MinusNdays" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->MinusNdays(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_MinusNweeks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_MinusNweeks",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_MinusNweeks" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_MinusNweeks" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->MinusNweeks(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_MinusNmonths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_MinusNmonths",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_MinusNmonths" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_MinusNmonths" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->MinusNmonths(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_MinusNyears(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_MinusNyears",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_MinusNyears" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_MinusNyears" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->MinusNyears(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Tommorrow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Tommorrow",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Tommorrow" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Tommorrow();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Yesterday(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Yesterday",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Yesterday" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Yesterday();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_NextWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_NextWeek",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_NextWeek" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NextWeek();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_LastWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_LastWeek",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_LastWeek" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->LastWeek();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_NextMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_NextMonth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_NextMonth" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NextMonth();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_LastMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_LastMonth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_LastMonth" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->LastMonth();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_NextYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_NextYear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_NextYear" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NextYear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_LastYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_LastYear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_LastYear" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->LastYear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetValue",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetValue" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)(arg1)->GetValue();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsYearDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsYearDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsYearDate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsYearDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsMonthDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsMonthDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsMonthDate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsMonthDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsDayDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsDayDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsDayDate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsDayDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsBogusDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsBogusDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsBogusDate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsBogusDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsValidDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsValidDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsValidDate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsValidDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsLeapYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsLeapYear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsLeapYear" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsLeapYear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Ok",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Ok" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Ok();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_TrimToMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_TrimToMonth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_TrimToMonth" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->TrimToMonth();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_TrimToYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_TrimToYear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_TrimToYear" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->TrimToYear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetToYearStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetToYearStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetToYearStart" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetToYearStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetToYearEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetToYearEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetToYearEnd" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetToYearEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetToMonthStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetToMonthStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetToMonthStart" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetToMonthStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetToMonthEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetToMonthEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetToMonthEnd" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetToMonthEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetToDayStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetToDayStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetToDayStart" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetToDayStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetToDayEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetToDayEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetToDayEnd" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetToDayEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PromoteToMonthStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PromoteToMonthStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PromoteToMonthStart" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->PromoteToMonthStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PromoteToMonthEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PromoteToMonthEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PromoteToMonthEnd" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->PromoteToMonthEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PromoteToDayStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PromoteToDayStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PromoteToDayStart" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->PromoteToDayStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_PromoteToDayEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_PromoteToDayEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_PromoteToDayEnd" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->PromoteToDayEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetTodaysDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetTodaysDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetTodaysDate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->GetTodaysDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetNow(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetNow",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetNow" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetNow();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetYear",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetYear" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_SetYear" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetYear(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetMonth",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetMonth" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_SetMonth" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetMonth(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetDay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetDay",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetDay" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SRCH_DATE_SetDay" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetDay(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Year(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Year",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Year" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->Year();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Month(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Month",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Month" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->Month();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Day(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Day",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Day" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->Day();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_DayOfWeek(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_DayOfWeek",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_DayOfWeek" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->DayOfWeek();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_DayOfYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_DayOfYear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_DayOfYear" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->DayOfYear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetFirstDayOfMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetFirstDayOfMonth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetFirstDayOfMonth" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetFirstDayOfMonth();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetWeekOfMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetWeekOfMonth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetWeekOfMonth" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetWeekOfMonth();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_WeekOfYear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_WeekOfYear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_WeekOfYear" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->WeekOfYear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetDaysInMonth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetDaysInMonth",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetDaysInMonth" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetDaysInMonth();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetJulianDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetJulianDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetJulianDate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetJulianDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetTimeSeconds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetTimeSeconds",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetTimeSeconds" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetTimeSeconds();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetTimeOfFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetTimeOfFile",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetTimeOfFile" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetTimeOfFile(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_SetTimeOfFileCreation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_SetTimeOfFileCreation",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_SetTimeOfFileCreation" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetTimeOfFileCreation(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetTimeOfFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetTimeOfFile",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetTimeOfFile" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetTimeOfFile(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_GetTimeOfFileCreation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_GetTimeOfFileCreation",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_GetTimeOfFileCreation" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetTimeOfFileCreation(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsBefore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsBefore",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsBefore" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SRCH_DATE_IsBefore" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SRCH_DATE_IsBefore" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsBefore(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Equals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Equals",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Equals" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SRCH_DATE_Equals" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SRCH_DATE_Equals" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Equals(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsDuring(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsDuring",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsDuring" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SRCH_DATE_IsDuring" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SRCH_DATE_IsDuring" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsDuring(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_IsAfter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_IsAfter",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_IsAfter" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SRCH_DATE_IsAfter" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SRCH_DATE_IsAfter" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsAfter(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_ISOdate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_ISOdate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_ISOdate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ISOdate();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_RFCdate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_RFCdate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_RFCdate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->RFCdate();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_ANSIdate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_ANSIdate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_ANSIdate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ANSIdate();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_LCdate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_LCdate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_LCdate" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->LCdate();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE_Strftime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE_Strftime",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE_Strftime" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SRCH_DATE_Strftime" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = SRCH_DATE_Strftime(arg1,(char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_SRCH_DATE___cmp__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SRCH_DATE___cmp__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SRCH_DATE___cmp__" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SRCH_DATE___cmp__" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SRCH_DATE___cmp__" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)SRCH_DATE___cmp__(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SRCH_DATE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE *arg1 = (SRCH_DATE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_SRCH_DATE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SRCH_DATE" "', argument " "1"" of type '" "SRCH_DATE *""'"); 
  }
  arg1 = reinterpret_cast< SRCH_DATE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SRCH_DATE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SRCH_DATE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DATERANGE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SRCH_DATE arg1 ;
  SRCH_DATE arg2 ;
  void *argp1 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  DATERANGE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_DATERANGE",2,2,&obj0,&obj1)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DATERANGE" "', argument " "1"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DATERANGE" "', argument " "1"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_DATERANGE" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_DATERANGE" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DATERANGE *)new DATERANGE(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DATERANGE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_GetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_GetStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_GetStart" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_GetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_GetEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_GetEnd" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_SetStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_SetStart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_SetStart" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DATERANGE_SetStart" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DATERANGE_SetStart" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetStart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_SetEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_SetEnd",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_SetEnd" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DATERANGE_SetEnd" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DATERANGE_SetEnd" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetEnd(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_Ok",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_Ok" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Ok();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Defined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_Defined",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_Defined" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Defined();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_Contains",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_Contains" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DATERANGE_Contains" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DATERANGE_Contains" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Contains(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_ISO(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_ISO",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_ISO" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = DATERANGE_ISO(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_RFC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_RFC",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_RFC" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = DATERANGE_RFC(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Strftime__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_Strftime",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_Strftime" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DATERANGE_Strftime" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DATERANGE_Strftime" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = DATERANGE_Strftime__SWIG_0(arg1,(char const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Strftime__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_Strftime",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_Strftime" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DATERANGE_Strftime" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = DATERANGE_Strftime__SWIG_0(arg1,(char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Strftime(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DATERANGE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_DATERANGE_Strftime__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_DATERANGE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_DATERANGE_Strftime__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'DATERANGE_Strftime'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    DATERANGE::Strftime(char const *,char const *)\n"
    "    DATERANGE::Strftime(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Write(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_Write",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_Write" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)DATERANGE_Write(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Read(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  PyObject *arg2 = (PyObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_Read",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_Read" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    arg2 = obj1;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)DATERANGE_Read(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DATERANGE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_DATERANGE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DATERANGE" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_asTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_asTuple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_asTuple" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)DATERANGE_asTuple(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DATERANGE_Duration(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DATERANGE *arg1 = (DATERANGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DATERANGE_Duration",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DATERANGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DATERANGE_Duration" "', argument " "1"" of type '" "DATERANGE *""'"); 
  }
  arg1 = reinterpret_cast< DATERANGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)DATERANGE_Duration(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DATERANGE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DATERANGE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCANOBJ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  unsigned int arg2 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SCANOBJ *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SCANOBJ",2,2,&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_SCANOBJ" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SCANOBJ *)new SCANOBJ(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SCANOBJ, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANOBJ_Frequency(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANOBJ *arg1 = (SCANOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANOBJ_Frequency",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANOBJ_Frequency" "', argument " "1"" of type '" "SCANOBJ const *""'"); 
  }
  arg1 = reinterpret_cast< SCANOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((SCANOBJ const *)arg1)->Frequency();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANOBJ_Term(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANOBJ *arg1 = (SCANOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANOBJ_Term",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANOBJ_Term" "', argument " "1"" of type '" "SCANOBJ const *""'"); 
  }
  arg1 = reinterpret_cast< SCANOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((SCANOBJ const *)arg1)->Term();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SCANOBJ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANOBJ *arg1 = (SCANOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_SCANOBJ",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANOBJ, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCANOBJ" "', argument " "1"" of type '" "SCANOBJ *""'"); 
  }
  arg1 = reinterpret_cast< SCANOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANOBJ_asTuple(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANOBJ *arg1 = (SCANOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANOBJ_asTuple",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANOBJ_asTuple" "', argument " "1"" of type '" "SCANOBJ *""'"); 
  }
  arg1 = reinterpret_cast< SCANOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)SCANOBJ_asTuple(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SCANOBJ_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SCANOBJ, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SCANLIST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< SCANLIST > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SCANLIST *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_SCANLIST",1,1,&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_SCANLIST,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_SCANLIST" "', argument " "1"" of type '" "SCANLIST const""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SCANLIST" "', argument " "1"" of type '" "SCANLIST const""'");
    } else {
      SCANLIST * temp = reinterpret_cast< SCANLIST * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (SCANLIST *)new SCANLIST(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_SCANLIST, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANLIST_Reverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANLIST *arg1 = (SCANLIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANLIST_Reverse",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANLIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANLIST_Reverse" "', argument " "1"" of type '" "SCANLIST *""'"); 
  }
  arg1 = reinterpret_cast< SCANLIST * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Reverse();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANLIST_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANLIST *arg1 = (SCANLIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANLIST_IsEmpty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANLIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANLIST_IsEmpty" "', argument " "1"" of type '" "SCANLIST *""'"); 
  }
  arg1 = reinterpret_cast< SCANLIST * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsEmpty();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANLIST_GetTotalEntries(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANLIST *arg1 = (SCANLIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANLIST_GetTotalEntries",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANLIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANLIST_GetTotalEntries" "', argument " "1"" of type '" "SCANLIST *""'"); 
  }
  arg1 = reinterpret_cast< SCANLIST * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalEntries();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANLIST_GetEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANLIST *arg1 = (SCANLIST *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< SCANOBJ > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANLIST_GetEntry",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANLIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANLIST_GetEntry" "', argument " "1"" of type '" "SCANLIST *""'"); 
  }
  arg1 = reinterpret_cast< SCANLIST * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCANLIST_GetEntry" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetEntry(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANOBJ(static_cast< const SCANOBJ& >(result))), SWIGTYPE_p_SCANOBJ, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SCANLIST(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANLIST *arg1 = (SCANLIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_SCANLIST",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANLIST, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SCANLIST" "', argument " "1"" of type '" "SCANLIST *""'"); 
  }
  arg1 = reinterpret_cast< SCANLIST * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANLIST_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANLIST *arg1 = (SCANLIST *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANLIST_Get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANLIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANLIST_Get" "', argument " "1"" of type '" "SCANLIST *""'"); 
  }
  arg1 = reinterpret_cast< SCANLIST * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)SCANLIST_Get(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SCANLIST___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SCANLIST *arg1 = (SCANLIST *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"SCANLIST___getitem__",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_SCANLIST, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SCANLIST___getitem__" "', argument " "1"" of type '" "SCANLIST *""'"); 
  }
  arg1 = reinterpret_cast< SCANLIST * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SCANLIST___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)SCANLIST___getitem__(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SCANLIST_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_SCANLIST, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DOCTYPE_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  DOCTYPE_ID *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_DOCTYPE_ID",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DOCTYPE_ID" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DOCTYPE_ID *)new DOCTYPE_ID((char const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DOCTYPE_ID, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOCTYPE_ID_DocumentType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOCTYPE_ID_DocumentType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOCTYPE_ID_DocumentType" "', argument " "1"" of type '" "DOCTYPE_ID const *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((DOCTYPE_ID const *)arg1)->DocumentType();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOCTYPE_ID_Set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOCTYPE_ID_Set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOCTYPE_ID_Set" "', argument " "1"" of type '" "DOCTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE_ID * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Set(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOCTYPE_ID_Get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOCTYPE_ID_Get",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOCTYPE_ID_Get" "', argument " "1"" of type '" "DOCTYPE_ID const *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((DOCTYPE_ID const *)arg1)->Get();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOCTYPE_ID_c_str(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOCTYPE_ID_c_str",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOCTYPE_ID_c_str" "', argument " "1"" of type '" "DOCTYPE_ID const *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((DOCTYPE_ID const *)arg1)->c_str();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOCTYPE_ID_IsDefined(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOCTYPE_ID_IsDefined",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOCTYPE_ID_IsDefined" "', argument " "1"" of type '" "DOCTYPE_ID const *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((DOCTYPE_ID const *)arg1)->IsDefined();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOCTYPE_ID_Equals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
  SwigValueWrapper< DOCTYPE_ID > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOCTYPE_ID_Equals",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOCTYPE_ID_Equals" "', argument " "1"" of type '" "DOCTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE_ID * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOCTYPE_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOCTYPE_ID_Equals" "', argument " "2"" of type '" "DOCTYPE_ID const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DOCTYPE_ID_Equals" "', argument " "2"" of type '" "DOCTYPE_ID const""'");
    } else {
      DOCTYPE_ID * temp = reinterpret_cast< DOCTYPE_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Equals(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DOCTYPE_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOCTYPE_ID *arg1 = (DOCTYPE_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_DOCTYPE_ID",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOCTYPE_ID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DOCTYPE_ID" "', argument " "1"" of type '" "DOCTYPE_ID *""'"); 
  }
  arg1 = reinterpret_cast< DOCTYPE_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DOCTYPE_ID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DOCTYPE_ID, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DOC_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  DOC_ID *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_DOC_ID",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_DOC_ID" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (DOC_ID *)new DOC_ID((char const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_DOC_ID, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOC_ID_Equals(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOC_ID *arg1 = (DOC_ID *) 0 ;
  DOC_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOC_ID_Equals",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOC_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOC_ID_Equals" "', argument " "1"" of type '" "DOC_ID *""'"); 
  }
  arg1 = reinterpret_cast< DOC_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOC_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOC_ID_Equals" "', argument " "2"" of type '" "DOC_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DOC_ID_Equals" "', argument " "2"" of type '" "DOC_ID const &""'"); 
  }
  arg2 = reinterpret_cast< DOC_ID * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Equals((DOC_ID const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOC_ID_Compare(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOC_ID *arg1 = (DOC_ID *) 0 ;
  DOC_ID *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOC_ID_Compare",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOC_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOC_ID_Compare" "', argument " "1"" of type '" "DOC_ID *""'"); 
  }
  arg1 = reinterpret_cast< DOC_ID * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOC_ID,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DOC_ID_Compare" "', argument " "2"" of type '" "DOC_ID const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DOC_ID_Compare" "', argument " "2"" of type '" "DOC_ID const &""'"); 
  }
  arg2 = reinterpret_cast< DOC_ID * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->Compare((DOC_ID const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DOC_ID_GlobalKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOC_ID *arg1 = (DOC_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"DOC_ID_GlobalKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOC_ID, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DOC_ID_GlobalKey" "', argument " "1"" of type '" "DOC_ID *""'"); 
  }
  arg1 = reinterpret_cast< DOC_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GlobalKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DOC_ID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  DOC_ID *arg1 = (DOC_ID *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_DOC_ID",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_DOC_ID, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DOC_ID" "', argument " "1"" of type '" "DOC_ID *""'"); 
  }
  arg1 = reinterpret_cast< DOC_ID * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DOC_ID_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_DOC_ID, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RECORD__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RECORD *)new RECORD();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RECORD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RECORD__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  RECORD *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_RECORD",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RECORD *)new RECORD(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RECORD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RECORD__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  RECORD *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_RECORD",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_RECORD,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RECORD" "', argument " "1"" of type '" "RECORD const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RECORD" "', argument " "1"" of type '" "RECORD const &""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RECORD *)new RECORD((RECORD const &)*arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RECORD, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RECORD(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_RECORD__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_RECORD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RECORD__SWIG_2(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RECORD__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RECORD'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RECORD::RECORD()\n"
    "    RECORD::RECORD(STRING const)\n"
    "    RECORD::RECORD(RECORD const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RECORD_SetKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetKey" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetKey(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetKey" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetPath",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetPath" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetPath(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetPath",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetPath" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetPath();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetFileName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetFileName" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFileName(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetFileName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetFileName" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetFileName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetFullFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetFullFileName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetFullFileName" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFullFileName(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetFullFileName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetFullFileName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetFullFileName" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetFullFileName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetRecordStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetRecordStart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetRecordStart" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RECORD_SetRecordStart" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetRecordStart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetRecordStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetRecordStart",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetRecordStart" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((RECORD const *)arg1)->GetRecordStart();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetRecordEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetRecordEnd",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetRecordEnd" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RECORD_SetRecordEnd" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetRecordEnd(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetRecordEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetRecordEnd",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetRecordEnd" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((RECORD const *)arg1)->GetRecordEnd();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetDocumentType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  SwigValueWrapper< DOCTYPE_ID > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetDocumentType",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetDocumentType" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOCTYPE_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_SetDocumentType" "', argument " "2"" of type '" "DOCTYPE_ID const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RECORD_SetDocumentType" "', argument " "2"" of type '" "DOCTYPE_ID const""'");
    } else {
      DOCTYPE_ID * temp = reinterpret_cast< DOCTYPE_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDocumentType(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetDocumentType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< DOCTYPE_ID > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetDocumentType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetDocumentType" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetDocumentType();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new DOCTYPE_ID(static_cast< const DOCTYPE_ID& >(result))), SWIGTYPE_p_DOCTYPE_ID, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetLocale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  LOCALE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetLocale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetLocale" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetLocale();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new LOCALE(static_cast< const LOCALE& >(result))), SWIGTYPE_p_LOCALE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetLocale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  LOCALE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetLocale",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetLocale" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LOCALE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_SetLocale" "', argument " "2"" of type '" "LOCALE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RECORD_SetLocale" "', argument " "2"" of type '" "LOCALE const""'");
    } else {
      LOCALE * temp = reinterpret_cast< LOCALE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetLocale(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetLanguage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetLanguage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetLanguage" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_SetLanguage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetLanguage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetCharset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetCharset",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetCharset" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_SetCharset" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetCharset((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetDate",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetDate" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetDate();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetDate",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetDate" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_SetDate" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RECORD_SetDate" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDate(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetDateModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetDateModified",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetDateModified" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_SetDateModified" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RECORD_SetDateModified" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDateModified(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetDateModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetDateModified",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetDateModified" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetDateModified();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetDateCreated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetDateCreated",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetDateCreated" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_SetDateCreated" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RECORD_SetDateCreated" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDateCreated(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetDateCreated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetDateCreated",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetDateCreated" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetDateCreated();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetPriority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetPriority",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetPriority" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((RECORD const *)arg1)->GetPriority();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetPriority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetPriority",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetPriority" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RECORD_SetPriority" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetPriority(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetCategory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetCategory",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetCategory" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((RECORD const *)arg1)->GetCategory();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetCategory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetCategory",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetCategory" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RECORD_SetCategory" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetCategory(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD___len__",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD___len__" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)RECORD___len__(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_SetDateExpires(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_SetDateExpires",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_SetDateExpires" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_SetDateExpires" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RECORD_SetDateExpires" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDateExpires(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_GetDateExpires(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_GetDateExpires",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_GetDateExpires" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((RECORD const *)arg1)->GetDateExpires();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_TTL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_TTL",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_TTL" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((RECORD const *)arg1)->TTL();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_TTL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"RECORD_TTL",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RECORD_TTL" "', argument " "1"" of type '" "RECORD const *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RECORD_TTL" "', argument " "2"" of type '" "SRCH_DATE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RECORD_TTL" "', argument " "2"" of type '" "SRCH_DATE""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((RECORD const *)arg1)->TTL(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RECORD_TTL(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RECORD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RECORD_TTL__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_RECORD, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SRCH_DATE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RECORD_TTL__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RECORD_TTL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    RECORD::TTL() const\n"
    "    RECORD::TTL(SRCH_DATE) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RECORD(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  RECORD *arg1 = (RECORD *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_RECORD",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_RECORD, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RECORD" "', argument " "1"" of type '" "RECORD *""'"); 
  }
  arg1 = reinterpret_cast< RECORD * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RECORD_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_RECORD, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_FCACHE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDBOBJ *arg1 = (IDBOBJ *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FCACHE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_FCACHE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDBOBJ, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_FCACHE" "', argument " "1"" of type '" "IDBOBJ *""'"); 
  }
  arg1 = reinterpret_cast< IDBOBJ * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FCACHE *)new FCACHE(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FCACHE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_Ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_Ok",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_Ok" "', argument " "1"" of type '" "FCACHE const *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((FCACHE const *)arg1)->Ok();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_ValidateInField__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  GPTYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_ValidateInField",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_ValidateInField" "', argument " "1"" of type '" "FCACHE *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FCACHE_ValidateInField" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->ValidateInField(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_ValidateInField__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  FC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_ValidateInField",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_ValidateInField" "', argument " "1"" of type '" "FCACHE *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FCACHE_ValidateInField" "', argument " "2"" of type '" "FC const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FCACHE_ValidateInField" "', argument " "2"" of type '" "FC const""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->ValidateInField(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_ValidateInField__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  GPTYPE arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_ValidateInField",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_ValidateInField" "', argument " "1"" of type '" "FCACHE const *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "FCACHE_ValidateInField" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FCACHE_ValidateInField" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((FCACHE const *)arg1)->ValidateInField(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_ValidateInField__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  FC arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_ValidateInField",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_ValidateInField" "', argument " "1"" of type '" "FCACHE const *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FCACHE_ValidateInField" "', argument " "2"" of type '" "FC const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "FCACHE_ValidateInField" "', argument " "2"" of type '" "FC const""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "FCACHE_ValidateInField" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((FCACHE const *)arg1)->ValidateInField(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_ValidateInField(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FCACHE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FCACHE_ValidateInField__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FCACHE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_FCACHE_ValidateInField__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FCACHE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FCACHE_ValidateInField__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FCACHE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_FCACHE_ValidateInField__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FCACHE_ValidateInField'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FCACHE::ValidateInField(GPTYPE const)\n"
    "    FCACHE::ValidateInField(FC const)\n"
    "    FCACHE::ValidateInField(GPTYPE const,char const *) const\n"
    "    FCACHE::ValidateInField(FC const,char const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FCACHE_GetTotal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_GetTotal",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_GetTotal" "', argument " "1"" of type '" "FCACHE const *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((FCACHE const *)arg1)->GetTotal();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_SetFieldName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_SetFieldName",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_SetFieldName" "', argument " "1"" of type '" "FCACHE *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FCACHE_SetFieldName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "FCACHE_SetFieldName" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetFieldName((char const *)arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_SetFieldName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_SetFieldName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_SetFieldName" "', argument " "1"" of type '" "FCACHE *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "FCACHE_SetFieldName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetFieldName((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_FCACHE_SetFieldName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FCACHE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_FCACHE_SetFieldName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_FCACHE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_FCACHE_SetFieldName__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'FCACHE_SetFieldName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    FCACHE::SetFieldName(char const *,bool)\n"
    "    FCACHE::SetFieldName(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_FCACHE_GetFieldName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"FCACHE_GetFieldName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "FCACHE_GetFieldName" "', argument " "1"" of type '" "FCACHE const *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((FCACHE const *)arg1)->GetFieldName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FCACHE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  FCACHE *arg1 = (FCACHE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_FCACHE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_FCACHE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FCACHE" "', argument " "1"" of type '" "FCACHE *""'"); 
  }
  arg1 = reinterpret_cast< FCACHE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FCACHE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_FCACHE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_DbStateInvalid_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DbStateInvalid is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DbStateInvalid_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(DbStateInvalid));
  return pyobj;
}


SWIGINTERN int Swig_var_DbStateReady_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DbStateReady is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DbStateReady_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(DbStateReady));
  return pyobj;
}


SWIGINTERN int Swig_var_DbStateBusy_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable DbStateBusy is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_DbStateBusy_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_int(static_cast< int >(DbStateBusy));
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_IDB__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDB *)new IDB();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IDB__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool arg1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  IDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_IDB",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_IDB" "', argument " "1"" of type '" "bool""'");
  } 
  arg1 = static_cast< bool >(val1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDB *)new IDB(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IDB__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_IDB",2,2,&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_IDB" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDB *)new IDB(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IDB__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  IDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_IDB",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDB *)new IDB(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IDB__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  STRLIST *arg2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_IDB",2,2,&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    STRLIST *l =  STRLIST_FromPyList(obj1);
    if (l == NULL) arg2 = (STRLIST *)&NulStrlist;
    else arg2 =  l;
    
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDB *)new IDB(arg1,(STRLIST const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IDB(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_IDB__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_IDB__SWIG_3(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_bool(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_new_IDB__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_STRLIST, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_new_IDB__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_IDB__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IDB'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::IDB()\n"
    "    IDB::IDB(bool)\n"
    "    IDB::IDB(STRING const,bool)\n"
    "    IDB::IDB(STRING const)\n"
    "    IDB::IDB(STRING const,STRLIST const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_Open__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Open",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Open" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_Open" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Open(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Open__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Open",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Open" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Open(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Open__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  STRLIST *arg3 = 0 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Open",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Open" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    STRLIST *l =  STRLIST_FromPyList(obj2);
    if (l == NULL) arg3 = (STRLIST *)&NulStrlist;
    else arg3 =  l;
    
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDB_Open" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Open(arg2,(STRLIST const &)*arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Open__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  STRLIST *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Open",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Open" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    STRLIST *l =  STRLIST_FromPyList(obj2);
    if (l == NULL) arg3 = (STRLIST *)&NulStrlist;
    else arg3 =  l;
    
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Open(arg2,(STRLIST const &)*arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Open(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_Open__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_STRLIST, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_Open__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDB_Open__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_STRLIST, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IDB_Open__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_Open'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::Open(STRING const,bool)\n"
    "    IDB::Open(STRING const)\n"
    "    IDB::Open(STRING const,STRLIST const &,bool)\n"
    "    IDB::Open(STRING const,STRLIST const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_Close(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Close",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Close" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Close();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetDebugMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetDebugMode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetDebugMode" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetDebugMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDebugMode(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_FirstKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_FirstKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_FirstKey" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->FirstKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_LastKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_LastKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_LastKey" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->LastKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_NextKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_NextKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_NextKey" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NextKey(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_PrevKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_PrevKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_PrevKey" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PrevKey(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetVolume",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetVolume" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_SetVolume" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetVolume(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetVolume(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  INT result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetVolume",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetVolume" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetVolume();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new INT(static_cast< const INT& >(result))), SWIGTYPE_p_INT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetFindConcatWords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetFindConcatWords",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetFindConcatWords" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetFindConcatWords" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFindConcatWords(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetFindConcatWords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetFindConcatWords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetFindConcatWords" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFindConcatWords();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetFindConcatWords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDB_SetFindConcatWords__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_SetFindConcatWords__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_SetFindConcatWords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::SetFindConcatWords(bool)\n"
    "    IDB::SetFindConcatWords()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetFindConcatWords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  GDT_BOOLEAN result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFindConcatWords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFindConcatWords" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetFindConcatWords();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new GDT_BOOLEAN(static_cast< const GDT_BOOLEAN& >(result))), SWIGTYPE_p_GDT_BOOLEAN, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetSegment__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetSegment",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetSegment" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_SetSegment" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetSegment(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetSegment__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetSegment",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetSegment" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetSegment(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetSegment__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetSegment",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetSegment" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetSegment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetSegment(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetSegment(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_SetSegment__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_SetSegment__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDB_SetSegment__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_SetSegment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::SetSegment(STRING const,int)\n"
    "    IDB::SetSegment(STRING const)\n"
    "    IDB::SetSegment(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetSegmentName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetSegmentName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetSegmentName" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetSegmentName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Segment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Segment",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Segment" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Segment" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->Segment((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_setUseRelativePaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_setUseRelativePaths",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_setUseRelativePaths" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_setUseRelativePaths" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->setUseRelativePaths(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetWorkingDirectory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetWorkingDirectory",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetWorkingDirectory" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetWorkingDirectory(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ClearWorkingDirectoryEntry(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ClearWorkingDirectoryEntry",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ClearWorkingDirectoryEntry" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->ClearWorkingDirectoryEntry();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetErrorCode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetErrorCode" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetErrorCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->SetErrorCode(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetErrorCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetErrorCode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetErrorCode" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((IDB const *)arg1)->GetErrorCode();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ErrorMessage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ErrorMessage",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ErrorMessage" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((IDB const *)arg1)->ErrorMessage();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ErrorMessage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ErrorMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ErrorMessage" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_ErrorMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((IDB const *)arg1)->ErrorMessage(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ErrorMessage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDB_ErrorMessage__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_ErrorMessage__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_ErrorMessage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::ErrorMessage() const\n"
    "    IDB::ErrorMessage(int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_UsePersistantCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_UsePersistantCache",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_UsePersistantCache" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((IDB const *)arg1)->UsePersistantCache();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_PersistantCacheName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_PersistantCacheName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_PersistantCacheName" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->PersistantCacheName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetMainFpt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FPT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetMainFpt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetMainFpt" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FPT *)(arg1)->GetMainFpt();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FPT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_setAutoDeleteExpired(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_setAutoDeleteExpired",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_setAutoDeleteExpired" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_setAutoDeleteExpired" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->setAutoDeleteExpired(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_FieldExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_FieldExists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_FieldExists" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((IDB const *)arg1)->FieldExists(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldDefinitionList(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFieldDefinitionList",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFieldDefinitionList" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetFieldDefinitionList((IDB const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetDocumentInfo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RECORD *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetDocumentInfo",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetDocumentInfo" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetDocumentInfo" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RECORD *)IDB_GetDocumentInfo(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RECORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetAllDocTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetAllDocTypes",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetAllDocTypes" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetAllDocTypes(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetMainMdt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MDT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetMainMdt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetMainMdt" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (MDT *)((IDB const *)arg1)->GetMainMdt();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MDT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DateCreated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DateCreated",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DateCreated" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DateCreated();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DateLastModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DateLastModified",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DateLastModified" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DateLastModified();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetCommonWordsThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetCommonWordsThreshold",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetCommonWordsThreshold" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetCommonWordsThreshold" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetCommonWordsThreshold(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_CreateCentroid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_CreateCentroid",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_CreateCentroid" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->CreateCentroid();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetLocale__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetLocale",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetLocale" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_SetLocale" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetLocale((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetLocale__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetLocale",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetLocale" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetLocale();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetLocale(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDB_SetLocale__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_SetLocale__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_SetLocale'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::SetLocale(char const *)\n"
    "    IDB::SetLocale()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_IsDbCompatible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_IsDbCompatible",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_IsDbCompatible" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsDbCompatible();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_IsEmpty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_IsEmpty" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((IDB const *)arg1)->IsEmpty();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Ok",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Ok" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Ok();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ffGC(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ffGC",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ffGC" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->ffGC();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetMergeStatus(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  enum MergeStatus arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetMergeStatus",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetMergeStatus" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetMergeStatus" "', argument " "2"" of type '" "enum MergeStatus""'");
  } 
  arg2 = static_cast< enum MergeStatus >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetMergeStatus(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetDbState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetDbState",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetDbState" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetDbState" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    IDB_SetDbState((IDB const *)arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetDbState(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetDbState",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetDbState" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((IDB const *)arg1)->GetDbState();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetIndexBoostFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetIndexBoostFactor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetIndexBoostFactor" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetIndexBoostFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetIndexBoostFactor(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetIndexBoostFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetIndexBoostFactor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetIndexBoostFactor" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((IDB const *)arg1)->GetIndexBoostFactor();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetFreshnessBoostFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetFreshnessBoostFactor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetFreshnessBoostFactor" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetFreshnessBoostFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFreshnessBoostFactor(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFreshnessBoostFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFreshnessBoostFactor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFreshnessBoostFactor" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((IDB const *)arg1)->GetFreshnessBoostFactor();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetLongevityBoostFattor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetLongevityBoostFattor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetLongevityBoostFattor" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetLongevityBoostFattor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetLongevityBoostFattor(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetLongevityBoostFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetLongevityBoostFactor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetLongevityBoostFactor" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((IDB const *)arg1)->GetLongevityBoostFactor();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetFreshnessBaseDateLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetFreshnessBaseDateLine",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetFreshnessBaseDateLine" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_SetFreshnessBaseDateLine" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_SetFreshnessBaseDateLine" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetFreshnessBaseDateLine(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFreshnessBaseDateLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFreshnessBaseDateLine",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFreshnessBaseDateLine" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetFreshnessBaseDateLine();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetDefaultDbSearchCutoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetDefaultDbSearchCutoff",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetDefaultDbSearchCutoff" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetDefaultDbSearchCutoff" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDefaultDbSearchCutoff(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetDbSearchCutoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetDbSearchCutoff",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetDbSearchCutoff" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetDbSearchCutoff" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchCutoff(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetDbSearchCutoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetDbSearchCutoff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetDbSearchCutoff" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((IDB const *)arg1)->GetDbSearchCutoff();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetDbSearchFuel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetDbSearchFuel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetDbSearchFuel" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetDbSearchFuel" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchFuel(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetDbSearchCacheSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetDbSearchCacheSize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetDbSearchCacheSize" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetDbSearchCacheSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchCacheSize(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetDefaultPriorityFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetDefaultPriorityFactor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetDefaultPriorityFactor" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetDefaultPriorityFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDefaultPriorityFactor(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetPriorityFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetPriorityFactor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetPriorityFactor" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetPriorityFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetPriorityFactor(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPriorityFactor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  double result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPriorityFactor",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPriorityFactor" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (double)((IDB const *)arg1)->GetPriorityFactor();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_double(static_cast< double >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetDbSisLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetDbSisLimit",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetDbSisLimit" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetDbSisLimit" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSisLimit(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetTitle",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetTitle" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetTitle(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetTitle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetTitle",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetTitle" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetTitle();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetComments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetComments",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetComments" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetComments(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetComments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetComments",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetComments" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetComments();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetCopyright(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetCopyright",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetCopyright" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetCopyright(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetCopyright(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetCopyright",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetCopyright" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetCopyright();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetMaintainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetMaintainer",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetMaintainer" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_SetMaintainer" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_SetMaintainer" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetMaintainer((char const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetMaintainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetMaintainer",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetMaintainer" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetMaintainer();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetGlobalDoctype(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  SwigValueWrapper< DOCTYPE_ID > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetGlobalDoctype",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetGlobalDoctype" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DOCTYPE_ID,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_SetGlobalDoctype" "', argument " "2"" of type '" "DOCTYPE_ID const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_SetGlobalDoctype" "', argument " "2"" of type '" "DOCTYPE_ID const""'");
    } else {
      DOCTYPE_ID * temp = reinterpret_cast< DOCTYPE_ID * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetGlobalDoctype(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetIndexingMemory__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  long arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetIndexingMemory",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetIndexingMemory" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetIndexingMemory" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_SetIndexingMemory" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetIndexingMemory(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetIndexingMemory__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetIndexingMemory",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetIndexingMemory" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetIndexingMemory" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetIndexingMemory(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetIndexingMemory(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_SetIndexingMemory__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDB_SetIndexingMemory__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_SetIndexingMemory'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::SetIndexingMemory(long const,bool)\n"
    "    IDB::SetIndexingMemory(long const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetIndexingMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetIndexingMemory",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetIndexingMemory" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)((IDB const *)arg1)->GetIndexingMemory();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetStoplist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetStoplist",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetStoplist" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetStoplist(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetGlobalStoplist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetGlobalStoplist",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetGlobalStoplist" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetGlobalStoplist(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetGlobalStoplist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetGlobalStoplist",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetGlobalStoplist" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetGlobalStoplist();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetTotalWords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetTotalWords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetTotalWords" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)((IDB const *)arg1)->GetTotalWords();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetTotalUniqueWords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetTotalUniqueWords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetTotalUniqueWords" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)((IDB const *)arg1)->GetTotalUniqueWords();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetTotalRecords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetTotalRecords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetTotalRecords" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((IDB const *)arg1)->GetTotalRecords();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetTotalDocumentsDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetTotalDocumentsDeleted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetTotalDocumentsDeleted" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((IDB const *)arg1)->GetTotalDocumentsDeleted();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FCACHE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFieldCache",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFieldCache" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FCACHE *)(arg1)->GetFieldCache();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FCACHE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerFc__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE arg2 ;
  STRING *arg3 = (STRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FC result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPeerFc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPeerFc" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetPeerFc" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    STRING tmp_string(PyString_AsString(obj2), PyString_Size(obj2));
    arg3=&tmp_string;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetPeerFc(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new FC(static_cast< const FC& >(result))), SWIGTYPE_p_FC, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerFc__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FC result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPeerFc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPeerFc" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetPeerFc" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetPeerFc(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new FC(static_cast< const FC& >(result))), SWIGTYPE_p_FC, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerFc__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC arg2 ;
  STRING *arg3 = (STRING *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FC result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPeerFc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPeerFc" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetPeerFc" "', argument " "2"" of type '" "FC""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetPeerFc" "', argument " "2"" of type '" "FC""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    STRING tmp_string(PyString_AsString(obj2), PyString_Size(obj2));
    arg3=&tmp_string;
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetPeerFc(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new FC(static_cast< const FC& >(result))), SWIGTYPE_p_FC, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerFc__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FC result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPeerFc",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPeerFc" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetPeerFc" "', argument " "2"" of type '" "FC""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetPeerFc" "', argument " "2"" of type '" "FC""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetPeerFc(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new FC(static_cast< const FC& >(result))), SWIGTYPE_p_FC, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerFc(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_GetPeerFc__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_GetPeerFc__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_STRING, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_GetPeerFc__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_STRING, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_GetPeerFc__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_GetPeerFc'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::GetPeerFc(GPTYPE,STRING *)\n"
    "    IDB::GetPeerFc(GPTYPE)\n"
    "    IDB::GetPeerFc(FC,STRING *)\n"
    "    IDB::GetPeerFc(FC)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldName__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFieldName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFieldName" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetFieldName" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = IDB_GetFieldName__SWIG_0(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldName__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFieldName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFieldName" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetFieldName" "', argument " "2"" of type '" "FC""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetFieldName" "', argument " "2"" of type '" "FC""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = IDB_GetFieldName__SWIG_1(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldName(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_GetFieldName__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_GetFieldName__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_GetFieldName'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::GetFieldName(GPTYPE)\n"
    "    IDB::GetFieldName(FC)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerNode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  GPTYPE temp2 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TREENODE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPeerNode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPeerNode" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetPeerNode" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  temp2 = static_cast< GPTYPE >(val2);
  arg2 = &temp2;
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetPeerNode((GPTYPE const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new TREENODE(static_cast< const TREENODE& >(result))), SWIGTYPE_p_TREENODE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerNode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  TREENODE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPeerNode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPeerNode" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetPeerNode" "', argument " "2"" of type '" "FC const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetPeerNode" "', argument " "2"" of type '" "FC const &""'"); 
  }
  arg2 = reinterpret_cast< FC * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetPeerNode((FC const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new TREENODE(static_cast< const TREENODE& >(result))), SWIGTYPE_p_TREENODE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerNode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_GetPeerNode__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_GetPeerNode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_GetPeerNode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::GetPeerNode(GPTYPE const &)\n"
    "    IDB::GetPeerNode(FC const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPeerContent",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPeerContent" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetPeerContent" "', argument " "2"" of type '" "FC""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetPeerContent" "', argument " "2"" of type '" "FC""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetPeerContent(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetPeerContentXMLFragement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetPeerContentXMLFragement",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetPeerContentXMLFragement" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetPeerContentXMLFragement" "', argument " "2"" of type '" "FC""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetPeerContentXMLFragement" "', argument " "2"" of type '" "FC""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetPeerContentXMLFragement(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetNodeTree__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NODETREE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetNodeTree",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetNodeTree" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetNodeTree" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetNodeTree(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new NODETREE(static_cast< const NODETREE& >(result))), SWIGTYPE_p_NODETREE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetNodeTree__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  NODETREE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetNodeTree",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetNodeTree" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetNodeTree" "', argument " "2"" of type '" "FC""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetNodeTree" "', argument " "2"" of type '" "FC""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetNodeTree(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new NODETREE(static_cast< const NODETREE& >(result))), SWIGTYPE_p_NODETREE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetNodeTree(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_FC, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_GetNodeTree__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_GetNodeTree__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_GetNodeTree'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::GetNodeTree(GPTYPE)\n"
    "    IDB::GetNodeTree(FC)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_KillCache(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_KillCache",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_KillCache" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((IDB const *)arg1)->KillCache();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_FillHeadlineCache__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_FillHeadlineCache",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_FillHeadlineCache" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->FillHeadlineCache();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_FillHeadlineCache__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_FillHeadlineCache",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_FillHeadlineCache" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_FillHeadlineCache" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->FillHeadlineCache((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_FillHeadlineCache(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDB_FillHeadlineCache__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_FillHeadlineCache__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_FillHeadlineCache'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::FillHeadlineCache()\n"
    "    IDB::FillHeadlineCache(char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_IsSystemFile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_IsSystemFile",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_IsSystemFile" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_IsSystemFile" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsSystemFile((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetServerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetServerName",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetServerName" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_SetServerName" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetServerName((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetServerName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetServerName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetServerName" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetServerName();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_MergeIndexFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_MergeIndexFiles",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_MergeIndexFiles" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->MergeIndexFiles();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_CollapseIndexFiles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_CollapseIndexFiles",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_CollapseIndexFiles" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->CollapseIndexFiles();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DeleteExpired__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DeleteExpired",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DeleteExpired" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DeleteExpired();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DeleteExpired__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  SRCH_DATE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  size_t result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DeleteExpired",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DeleteExpired" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SRCH_DATE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_DeleteExpired" "', argument " "2"" of type '" "SRCH_DATE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_DeleteExpired" "', argument " "2"" of type '" "SRCH_DATE const""'");
    } else {
      SRCH_DATE * temp = reinterpret_cast< SRCH_DATE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DeleteExpired(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_size_t(static_cast< size_t >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DeleteExpired(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDB_DeleteExpired__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SRCH_DATE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_DeleteExpired__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_DeleteExpired'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::DeleteExpired()\n"
    "    IDB::DeleteExpired(SRCH_DATE const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_KillAll(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_KillAll",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_KillAll" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->KillAll();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetVersionID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetVersionID",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetVersionID" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->GetVersionID();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ParseRecords(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RECORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ParseRecords",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ParseRecords" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RECORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_ParseRecords" "', argument " "2"" of type '" "RECORD const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_ParseRecords" "', argument " "2"" of type '" "RECORD const""'");
    } else {
      RECORD * temp = reinterpret_cast< RECORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->ParseRecords(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_AddRecord__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RECORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_AddRecord",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_AddRecord" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RECORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_AddRecord" "', argument " "2"" of type '" "RECORD const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_AddRecord" "', argument " "2"" of type '" "RECORD const""'");
    } else {
      RECORD * temp = reinterpret_cast< RECORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->AddRecord(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Index__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Index",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Index" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_Index" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Index(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Index__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Index",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Index" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Index();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Index(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDB_Index__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_Index__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_Index'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::Index(bool)\n"
    "    IDB::Index()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_Index1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Index1",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Index1" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Index1();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Index2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Index2",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Index2" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Index2();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_AddRecord__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_AddRecord",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_AddRecord" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)IDB_AddRecord__SWIG_1(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_AddRecord(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RECORD, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_AddRecord__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_AddRecord__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_AddRecord'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::AddRecord(RECORD const)\n"
    "    IDB::AddRecord(STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_AppendToIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RECORD arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_AppendToIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_AppendToIndex" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RECORD,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_AppendToIndex" "', argument " "2"" of type '" "RECORD const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_AppendToIndex" "', argument " "2"" of type '" "RECORD const""'");
    } else {
      RECORD * temp = reinterpret_cast< RECORD * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)IDB_AppendToIndex(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_AppendFileToIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_AppendFileToIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_AppendFileToIndex" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)IDB_AppendFileToIndex(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_IsStopWord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_IsStopWord",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_IsStopWord" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((IDB const *)arg1)->IsStopWord(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_MdtLookupKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_MdtLookupKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_MdtLookupKey" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((IDB const *)arg1)->MdtLookupKey(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetDocumentDeleted(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetDocumentDeleted",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetDocumentDeleted" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetDocumentDeleted" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((IDB const *)arg1)->GetDocumentDeleted(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DeleteByIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DeleteByIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DeleteByIndex" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_DeleteByIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->DeleteByIndex(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DeleteByKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DeleteByKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DeleteByKey" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->DeleteByKey(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_UndeleteByIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_UndeleteByIndex",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_UndeleteByIndex" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_UndeleteByIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->UndeleteByIndex(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_UndeleteByKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_UndeleteByKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_UndeleteByKey" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->UndeleteByKey(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SetOverride(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SetOverride",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SetOverride" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_SetOverride" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetOverride(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetOverride(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetOverride",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetOverride" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((IDB const *)arg1)->GetOverride();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_CleanupDb(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_CleanupDb",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_CleanupDb" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->CleanupDb();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetLocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetLocks",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetLocks" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((IDB const *)arg1)->GetLocks();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Scan__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Scan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Scan" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_Scan" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->Scan(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Scan__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Scan",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Scan" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDB_Scan" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->Scan(arg2,arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Scan__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Scan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Scan" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->Scan(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Scan__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Scan",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Scan" "', argument " "1"" of type '" "IDB const *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((IDB const *)arg1)->Scan(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Scan(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_Scan__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDB_Scan__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_Scan__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IDB_Scan__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_Scan'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::Scan(STRING,int) const\n"
    "    IDB::Scan(STRING,STRING,int) const\n"
    "    IDB::Scan(STRING,STRING) const\n"
    "    IDB::Scan(STRING) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_ScanGlob__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ScanGlob",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ScanGlob" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanGlob(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ScanGlob__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ScanGlob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ScanGlob" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_ScanGlob" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanGlob(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ScanGlob__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ScanGlob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ScanGlob" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_ScanGlob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanGlob(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ScanGlob__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ScanGlob",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ScanGlob" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_ScanGlob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDB_ScanGlob" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanGlob(arg2,(char const *)arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ScanGlob(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_ScanGlob__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDB_ScanGlob__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_ScanGlob__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IDB_ScanGlob__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_ScanGlob'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::ScanGlob(STRING const)\n"
    "    IDB::ScanGlob(STRING const,int)\n"
    "    IDB::ScanGlob(STRING const,char const *)\n"
    "    IDB::ScanGlob(STRING const,char const *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_ScanSearch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ScanSearch",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ScanSearch" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_ScanSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_ScanSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_ScanSearch" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDB_ScanSearch" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanSearch((QUERY const &)*arg2,(char const *)arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ScanSearch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_ScanSearch",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_ScanSearch" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_ScanSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_ScanSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_ScanSearch" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanSearch((QUERY const &)*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_ScanSearch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_ScanSearch__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IDB_ScanSearch__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_ScanSearch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::ScanSearch(QUERY const &,char const *,size_t)\n"
    "    IDB::ScanSearch(QUERY const &,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_BeginRsetPresent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_BeginRsetPresent",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_BeginRsetPresent" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_BeginRsetPresent" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->BeginRsetPresent((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_EndRsetPresent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_EndRsetPresent",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_EndRsetPresent" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_EndRsetPresent" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->EndRsetPresent((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_BeforeSearching(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_BeforeSearching",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_BeforeSearching" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_BeforeSearching" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->BeforeSearching(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_AfterSearching(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  IRSET *arg2 = (IRSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_AfterSearching",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_AfterSearching" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_IRSET, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_AfterSearching" "', argument " "2"" of type '" "IRSET *""'"); 
  }
  arg2 = reinterpret_cast< IRSET * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->AfterSearching(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_BeforeIndexing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_BeforeIndexing",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_BeforeIndexing" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->BeforeIndexing();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_AfterIndexing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_AfterIndexing",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_AfterIndexing" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->AfterIndexing();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Search__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Search",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Search" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Search" "', argument " "2"" of type '" "QUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Search" "', argument " "2"" of type '" "QUERY const""'");
    } else {
      QUERY * temp = reinterpret_cast< QUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Search__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  SQUERY arg2 ;
  enum SortBy arg3 ;
  enum NormalizationMethods arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Search",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Search" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Search" "', argument " "2"" of type '" "SQUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Search" "', argument " "2"" of type '" "SQUERY const""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_Search" "', argument " "3"" of type '" "enum SortBy""'");
  } 
  arg3 = static_cast< enum SortBy >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "IDB_Search" "', argument " "4"" of type '" "enum NormalizationMethods""'");
  } 
  arg4 = static_cast< enum NormalizationMethods >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search(arg2,arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Search__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  SQUERY arg2 ;
  enum SortBy arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Search",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Search" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Search" "', argument " "2"" of type '" "SQUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Search" "', argument " "2"" of type '" "SQUERY const""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_Search" "', argument " "3"" of type '" "enum SortBy""'");
  } 
  arg3 = static_cast< enum SortBy >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Search__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  SQUERY arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Search",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Search" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Search" "', argument " "2"" of type '" "SQUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Search" "', argument " "2"" of type '" "SQUERY const""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Search(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_Search__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SQUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_Search__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SQUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDB_Search__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SQUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_IDB_Search__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_Search'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::Search(QUERY const)\n"
    "    IDB::Search(SQUERY const,enum SortBy,enum NormalizationMethods)\n"
    "    IDB::Search(SQUERY const,enum SortBy)\n"
    "    IDB::Search(SQUERY const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_SearchSmart__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SearchSmart",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SearchSmart" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_SearchSmart" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_SearchSmart" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->SearchSmart(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SearchSmart__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_SearchSmart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_SearchSmart" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_SearchSmart" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->SearchSmart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_SearchSmart(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_SearchSmart__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_SearchSmart__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_SearchSmart'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::SearchSmart(QUERY *,char const *)\n"
    "    IDB::SearchSmart(QUERY *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_VSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_VSearch",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_VSearch" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_VSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_VSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)(arg1)->VSearch((QUERY const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_VSearchSmart__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_VSearchSmart",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_VSearchSmart" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_VSearchSmart" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_VSearchSmart" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)(arg1)->VSearchSmart(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, 0 |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_VSearchSmart__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_VSearchSmart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_VSearchSmart" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_VSearchSmart" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)(arg1)->VSearchSmart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_VSearchSmart(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_VSearchSmart__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_VSearchSmart__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_VSearchSmart'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::VSearchSmart(QUERY *,char const *)\n"
    "    IDB::VSearchSmart(QUERY *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_Headline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Headline",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Headline" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Headline" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Headline" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Headline(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Headline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Headline",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Headline" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Headline" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Headline" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_Headline" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Headline(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Headline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_Headline__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_Headline__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_Headline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::Headline(RESULT const)\n"
    "    IDB::Headline(RESULT const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_Summary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Summary",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Summary" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Summary" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Summary" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Summary(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Summary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Summary",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Summary" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Summary" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Summary" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_Summary" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Summary(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Summary(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_Summary__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_Summary__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_Summary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::Summary(RESULT const)\n"
    "    IDB::Summary(RESULT const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_Context__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Context",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Context" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Context" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Context" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_Context" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_Context" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Context(arg2,(char const *)arg3,(char const *)arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Context__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Context",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Context" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Context" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Context" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_Context" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Context(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Context__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Context",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Context" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Context" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Context" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Context(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Context(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_Context__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_Context__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IDB_Context__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_Context'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::Context(RESULT const,char const *,char const *)\n"
    "    IDB::Context(RESULT const,char const *)\n"
    "    IDB::Context(RESULT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_NthContext__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  unsigned int arg2 ;
  RESULT arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  int res5 ;
  char *buf5 = 0 ;
  int alloc5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_NthContext",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_NthContext" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_NthContext" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_NthContext" "', argument " "3"" of type '" "RESULT const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_NthContext" "', argument " "3"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_NthContext" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  res5 = SWIG_AsCharPtrAndSize(obj4, &buf5, NULL, &alloc5);
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IDB_NthContext" "', argument " "5"" of type '" "char const *""'");
  }
  arg5 = reinterpret_cast< char * >(buf5);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NthContext(arg2,arg3,(char const *)arg4,(char const *)arg5);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  if (alloc5 == SWIG_NEWOBJ) delete[] buf5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_NthContext__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  unsigned int arg2 ;
  RESULT arg3 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_NthContext",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_NthContext" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_NthContext" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_NthContext" "', argument " "3"" of type '" "RESULT const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_NthContext" "', argument " "3"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_NthContext" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NthContext(arg2,arg3,(char const *)arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_NthContext__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  unsigned int arg2 ;
  RESULT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_NthContext",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_NthContext" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_NthContext" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_NthContext" "', argument " "3"" of type '" "RESULT const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_NthContext" "', argument " "3"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NthContext(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_NthContext(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_RESULT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_NthContext__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_RESULT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IDB_NthContext__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_RESULT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_IDB_NthContext__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_NthContext'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::NthContext(unsigned int,RESULT const,char const *,char const *)\n"
    "    IDB::NthContext(unsigned int,RESULT const,char const *)\n"
    "    IDB::NthContext(unsigned int,RESULT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_URL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_URL",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_URL" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_URL" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_URL" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IDB_URL" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->URL(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_URL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_URL",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_URL" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_URL" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_URL" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->URL(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_URL(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_URL__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_IDB_URL__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_URL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::URL(RESULT const,bool)\n"
    "    IDB::URL(RESULT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_HighlightedRecord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_HighlightedRecord",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_HighlightedRecord" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_HighlightedRecord" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_HighlightedRecord" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_HighlightedRecord" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_HighlightedRecord" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->HighlightedRecord(arg2,(char const *)arg3,(char const *)arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DocHighlight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DocHighlight",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DocHighlight" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_DocHighlight" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_DocHighlight" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DocHighlight(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DocHighlight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DocHighlight",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DocHighlight" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_DocHighlight" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_DocHighlight" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_DocHighlight" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DocHighlight(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DocHighlight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_DocHighlight__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_DocHighlight__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_DocHighlight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::DocHighlight(RESULT const)\n"
    "    IDB::DocHighlight(RESULT const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT *arg2 = (RESULT *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< DOCTYPE_ID > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFieldData",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFieldData" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetFieldData" "', argument " "2"" of type '" "RESULT const *""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetFieldData" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DOCTYPE_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_GetFieldData" "', argument " "4"" of type '" "DOCTYPE_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetFieldData" "', argument " "4"" of type '" "DOCTYPE_ID""'");
    } else {
      DOCTYPE_ID * temp = reinterpret_cast< DOCTYPE_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetFieldData__SWIG_0(arg1,(RESULT const *)arg2,(char const *)arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT *arg2 = (RESULT *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFieldData",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFieldData" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetFieldData" "', argument " "2"" of type '" "RESULT const *""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetFieldData" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetFieldData__SWIG_0(arg1,(RESULT const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_GetFieldData__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_DOCTYPE_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IDB_GetFieldData__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_GetFieldData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::GetFieldData(RESULT const *,char const *,DOCTYPE_ID)\n"
    "    IDB::GetFieldData(RESULT const *,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetFieldContents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT *arg2 = (RESULT *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFieldContents",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFieldContents" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetFieldContents" "', argument " "2"" of type '" "RESULT const *""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetFieldContents" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetFieldContents(arg1,(RESULT const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Present__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Present",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Present" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Present" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Present" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_Present" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Present(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Present__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_Present",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_Present" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_Present" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_Present" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_Present" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_Present" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Present(arg2,(char const *)arg3,(char const *)arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_Present(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_Present__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IDB_Present__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_Present'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::Present(RESULT const,char const *)\n"
    "    IDB::Present(RESULT const,char const *,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_DocPresent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DocPresent",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DocPresent" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_DocPresent" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_DocPresent" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_DocPresent" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DocPresent(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DocPresent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_DocPresent",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_DocPresent" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_DocPresent" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_DocPresent" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_DocPresent" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_DocPresent" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DocPresent(arg2,(char const *)arg3,(char const *)arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_DocPresent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_DocPresent__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IDB_DocPresent__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_DocPresent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::DocPresent(RESULT const,char const *)\n"
    "    IDB::DocPresent(RESULT const,char const *,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetXMLHighlightRecordFormat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetXMLHighlightRecordFormat",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "2"" of type '" "RESULT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "2"" of type '" "RESULT const &""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetXMLHighlightRecordFormat((RESULT const &)*arg2,(char const *)arg3,(char const *)arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetXMLHighlightRecordFormat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetXMLHighlightRecordFormat",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "2"" of type '" "RESULT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "2"" of type '" "RESULT const &""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetXMLHighlightRecordFormat((RESULT const &)*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetXMLHighlightRecordFormat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetXMLHighlightRecordFormat",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "2"" of type '" "RESULT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetXMLHighlightRecordFormat" "', argument " "2"" of type '" "RESULT const &""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetXMLHighlightRecordFormat((RESULT const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetXMLHighlightRecordFormat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_GetXMLHighlightRecordFormat__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_GetXMLHighlightRecordFormat__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IDB_GetXMLHighlightRecordFormat__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_GetXMLHighlightRecordFormat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::GetXMLHighlightRecordFormat(RESULT const &,char const *,char const *)\n"
    "    IDB::GetXMLHighlightRecordFormat(RESULT const &,char const *)\n"
    "    IDB::GetXMLHighlightRecordFormat(RESULT const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetNodeOffsetCount__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE arg2 ;
  char *arg3 = (char *) 0 ;
  FC *arg4 = (FC *) 0 ;
  FC *arg5 = (FC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetNodeOffsetCount",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetNodeOffsetCount" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetNodeOffsetCount" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetNodeOffsetCount" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_GetNodeOffsetCount" "', argument " "4"" of type '" "FC *""'"); 
  }
  arg4 = reinterpret_cast< FC * >(argp4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "IDB_GetNodeOffsetCount" "', argument " "5"" of type '" "FC *""'"); 
  }
  arg5 = reinterpret_cast< FC * >(argp5);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetNodeOffsetCount(arg2,(char const *)arg3,arg4,arg5);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetNodeOffsetCount__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE arg2 ;
  char *arg3 = (char *) 0 ;
  FC *arg4 = (FC *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetNodeOffsetCount",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetNodeOffsetCount" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetNodeOffsetCount" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetNodeOffsetCount" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_FC, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "IDB_GetNodeOffsetCount" "', argument " "4"" of type '" "FC *""'"); 
  }
  arg4 = reinterpret_cast< FC * >(argp4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetNodeOffsetCount(arg2,(char const *)arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetNodeOffsetCount__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetNodeOffsetCount",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetNodeOffsetCount" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetNodeOffsetCount" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetNodeOffsetCount" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetNodeOffsetCount(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetNodeOffsetCount__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  GPTYPE arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned long long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetNodeOffsetCount",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetNodeOffsetCount" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_long_SS_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IDB_GetNodeOffsetCount" "', argument " "2"" of type '" "GPTYPE""'");
  } 
  arg2 = static_cast< GPTYPE >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetNodeOffsetCount(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetNodeOffsetCount(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IDB_GetNodeOffsetCount__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_IDB_GetNodeOffsetCount__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FC, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_IDB_GetNodeOffsetCount__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_long_SS_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_FC, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_FC, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_IDB_GetNodeOffsetCount__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_GetNodeOffsetCount'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::GetNodeOffsetCount(GPTYPE const,char const *,FC *,FC *)\n"
    "    IDB::GetNodeOffsetCount(GPTYPE const,char const *,FC *)\n"
    "    IDB::GetNodeOffsetCount(GPTYPE const,char const *)\n"
    "    IDB::GetNodeOffsetCount(GPTYPE const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IDB_GetDescendentsFCT(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FCT result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetDescendentsFCT",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetDescendentsFCT" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetDescendentsFCT" "', argument " "2"" of type '" "FC const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetDescendentsFCT" "', argument " "2"" of type '" "FC const &""'"); 
  }
  arg2 = reinterpret_cast< FC * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetDescendentsFCT" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetDescendentsFCT((FC const &)*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyList_FromFCT(result);
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetAncestorFc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  FC result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetAncestorFc",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetAncestorFc" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetAncestorFc" "', argument " "2"" of type '" "FC const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetAncestorFc" "', argument " "2"" of type '" "FC const &""'"); 
  }
  arg2 = reinterpret_cast< FC * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetAncestorFc" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetAncestorFc((FC const &)*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new FC(static_cast< const FC& >(result))), SWIGTYPE_p_FC, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetAncestorContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetAncestorContent",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetAncestorContent" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetAncestorContent" "', argument " "2"" of type '" "RESULT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetAncestorContent" "', argument " "2"" of type '" "RESULT &""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetAncestorContent" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetAncestorContent(arg1,*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetDescendentsContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  FC arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetDescendentsContent",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetDescendentsContent" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetDescendentsContent" "', argument " "2"" of type '" "FC const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IDB_GetDescendentsContent" "', argument " "2"" of type '" "FC const""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IDB_GetDescendentsContent" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetDescendentsContent(arg1,arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_KeyLookup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RESULT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_KeyLookup",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_KeyLookup" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RESULT *)IDB_KeyLookup(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RESULT, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_KeyExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_KeyExists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_KeyExists" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)IDB_KeyExists(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFields__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  RESULT *arg2 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFields",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFields" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IDB_GetFields" "', argument " "2"" of type '" "RESULT const *""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetFields__SWIG_0(arg1,(RESULT const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFields__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"IDB_GetFields",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IDB_GetFields" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)IDB_GetFields__SWIG_0(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IDB_GetFields(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_IDB_GetFields__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_IDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_IDB_GetFields__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IDB_GetFields'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    IDB::GetFields(RESULT const *)\n"
    "    IDB::GetFields()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_IDB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  IDB *arg1 = (IDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_IDB",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_IDB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IDB" "', argument " "1"" of type '" "IDB *""'"); 
  }
  arg1 = reinterpret_cast< IDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IDB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_IDB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_VIDB__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (VIDB *)new VIDB();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIDB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIDB__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  VIDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_VIDB",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (VIDB *)new VIDB(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIDB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIDB__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  VIDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_VIDB",2,2,&obj0,&obj1)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_VIDB" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (VIDB *)new VIDB(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIDB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_VIDB(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_VIDB__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_VIDB__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_VIDB__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_VIDB'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::VIDB()\n"
    "    VIDB::VIDB(STRING const)\n"
    "    VIDB::VIDB(STRING const,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_VIDB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_VIDB",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_VIDB" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_getself(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  VIDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_getself",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_getself" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (VIDB *) &VIDB_getself(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_VIDB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetIDB__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetIDB",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetIDB" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetIDB" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDB *)VIDB_GetIDB__SWIG_0(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetIDB__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  IDB *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetIDB",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetIDB" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IDB *)VIDB_GetIDB__SWIG_0(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IDB, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetIDB(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetIDB__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetIDB__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetIDB'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetIDB(unsigned int)\n"
    "    VIDB::GetIDB()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetIDBCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetIDBCount",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetIDBCount" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)((VIDB const *)arg1)->GetIDBCount();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_IsDbVirtual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_IsDbVirtual",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_IsDbVirtual" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((VIDB const *)arg1)->IsDbVirtual();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetMainMdt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  MDT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetMainMdt",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetMainMdt" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (MDT *)((VIDB const *)arg1)->GetMainMdt();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MDT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetMainMdt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  MDT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetMainMdt",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetMainMdt" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetMainMdt" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (MDT *)((VIDB const *)arg1)->GetMainMdt(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_MDT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetMainMdt(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetMainMdt__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetMainMdt__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetMainMdt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetMainMdt() const\n"
    "    VIDB::GetMainMdt(unsigned int) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFieldCache__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  FCACHE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetFieldCache",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetFieldCache" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FCACHE *)(arg1)->GetFieldCache();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FCACHE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFieldCache__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  FCACHE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetFieldCache",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetFieldCache" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetFieldCache" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (FCACHE *)(arg1)->GetFieldCache(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_FCACHE, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFieldCache(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetFieldCache__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetFieldCache__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetFieldCache'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetFieldCache()\n"
    "    VIDB::GetFieldCache(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetDocTypeOptions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetDocTypeOptions",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetDocTypeOptions" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)VIDB_GetDocTypeOptions(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetDbFileStem__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetDbFileStem",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetDbFileStem" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetDbFileStem" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((VIDB const *)arg1)->GetDbFileStem(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetDbFileStem__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetDbFileStem",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetDbFileStem" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((VIDB const *)arg1)->GetDbFileStem();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetDbFileStem(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetDbFileStem__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetDbFileStem__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetDbFileStem'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetDbFileStem(int) const\n"
    "    VIDB::GetDbFileStem() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_XMLHitTable(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_XMLHitTable",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_XMLHitTable" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_XMLHitTable" "', argument " "2"" of type '" "RESULT const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_XMLHitTable" "', argument " "2"" of type '" "RESULT const &""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->XMLHitTable((RESULT const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_XMLNodeTree(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  FC arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_XMLNodeTree",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_XMLNodeTree" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_XMLNodeTree" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_XMLNodeTree" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_FC,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_XMLNodeTree" "', argument " "3"" of type '" "FC""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_XMLNodeTree" "', argument " "3"" of type '" "FC""'");
    } else {
      FC * temp = reinterpret_cast< FC * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->XMLNodeTree(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetPriorityFactor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  double arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetPriorityFactor",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetPriorityFactor" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetPriorityFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_SetPriorityFactor" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetPriorityFactor(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetPriorityFactor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  double arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetPriorityFactor",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetPriorityFactor" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetPriorityFactor" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetPriorityFactor(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetPriorityFactor(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_SetPriorityFactor__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIDB_SetPriorityFactor__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_SetPriorityFactor'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::SetPriorityFactor(double,unsigned int)\n"
    "    VIDB::SetPriorityFactor(double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchCutoff__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetDbSearchCutoff",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetDbSearchCutoff" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetDbSearchCutoff" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_SetDbSearchCutoff" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchCutoff(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchCutoff__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetDbSearchCutoff",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetDbSearchCutoff" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetDbSearchCutoff" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchCutoff(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchCutoff(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_SetDbSearchCutoff__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIDB_SetDbSearchCutoff__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_SetDbSearchCutoff'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::SetDbSearchCutoff(unsigned int,unsigned int)\n"
    "    VIDB::SetDbSearchCutoff(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetDbSearchCutoff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetDbSearchCutoff",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetDbSearchCutoff" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetDbSearchCutoff();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchFuel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetDbSearchFuel",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetDbSearchFuel" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetDbSearchFuel" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_SetDbSearchFuel" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchFuel(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchFuel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetDbSearchFuel",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetDbSearchFuel" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetDbSearchFuel" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchFuel(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchFuel(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_SetDbSearchFuel__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIDB_SetDbSearchFuel__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_SetDbSearchFuel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::SetDbSearchFuel(unsigned int,unsigned int)\n"
    "    VIDB::SetDbSearchFuel(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchCacheSize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  unsigned int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetDbSearchCacheSize",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetDbSearchCacheSize" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetDbSearchCacheSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  ecode3 = SWIG_AsVal_unsigned_SS_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_SetDbSearchCacheSize" "', argument " "3"" of type '" "unsigned int""'");
  } 
  arg3 = static_cast< unsigned int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchCacheSize(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchCacheSize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetDbSearchCacheSize",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetDbSearchCacheSize" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetDbSearchCacheSize" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDbSearchCacheSize(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDbSearchCacheSize(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_SetDbSearchCacheSize__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_unsigned_SS_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIDB_SetDbSearchCacheSize__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_SetDbSearchCacheSize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::SetDbSearchCacheSize(unsigned int,unsigned int)\n"
    "    VIDB::SetDbSearchCacheSize(unsigned int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_BeforeSearching(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_BeforeSearching",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_BeforeSearching" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_BeforeSearching" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->BeforeSearching(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDebugMode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetDebugMode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetDebugMode" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetDebugMode" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetDebugMode(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetErrorCode__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetErrorCode",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetErrorCode" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetErrorCode" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetErrorCode(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetErrorCode__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetErrorCode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetErrorCode" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetErrorCode();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetErrorCode(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetErrorCode__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetErrorCode__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetErrorCode'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetErrorCode(int const)\n"
    "    VIDB::GetErrorCode()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_ErrorMessage__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ErrorMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ErrorMessage" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_ErrorMessage" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((VIDB const *)arg1)->ErrorMessage(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ErrorMessage__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ErrorMessage",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ErrorMessage" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((VIDB const *)arg1)->ErrorMessage();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ErrorMessage(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_ErrorMessage__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_ErrorMessage__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_ErrorMessage'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::ErrorMessage(int const) const\n"
    "    VIDB::ErrorMessage() const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalWords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalWords",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalWords" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetTotalWords" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetTotalWords(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalWords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalWords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalWords" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetTotalWords();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalWords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetTotalWords__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetTotalWords__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetTotalWords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetTotalWords(int const)\n"
    "    VIDB::GetTotalWords()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalUniqueWords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalUniqueWords",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalUniqueWords" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetTotalUniqueWords" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetTotalUniqueWords(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalUniqueWords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalUniqueWords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalUniqueWords" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetTotalUniqueWords();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalUniqueWords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetTotalUniqueWords__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetTotalUniqueWords__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetTotalUniqueWords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetTotalUniqueWords(int const)\n"
    "    VIDB::GetTotalUniqueWords()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalRecords__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalRecords",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalRecords" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetTotalRecords" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalRecords(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalRecords__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalRecords",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalRecords" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalRecords();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalRecords(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetTotalRecords__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetTotalRecords__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetTotalRecords'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetTotalRecords(int const)\n"
    "    VIDB::GetTotalRecords()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalDocumentsDeleted__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalDocumentsDeleted",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalDocumentsDeleted" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetTotalDocumentsDeleted" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalDocumentsDeleted(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalDocumentsDeleted__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalDocumentsDeleted",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalDocumentsDeleted" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalDocumentsDeleted();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalDocumentsDeleted(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetTotalDocumentsDeleted__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetTotalDocumentsDeleted__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetTotalDocumentsDeleted'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetTotalDocumentsDeleted(int const)\n"
    "    VIDB::GetTotalDocumentsDeleted()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTotalDatabases(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  unsigned int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTotalDatabases",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTotalDatabases" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (unsigned int)(arg1)->GetTotalDatabases();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_unsigned_SS_int(static_cast< unsigned int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_IsDbCompatible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_IsDbCompatible",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_IsDbCompatible" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsDbCompatible();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_IsEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_IsEmpty",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_IsEmpty" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((VIDB const *)arg1)->IsEmpty();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Ok",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Ok" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Ok();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetCommonWordsThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  long arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetCommonWordsThreshold",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetCommonWordsThreshold" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_SetCommonWordsThreshold" "', argument " "2"" of type '" "long""'");
  } 
  arg2 = static_cast< long >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetCommonWordsThreshold(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetStoplist(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetStoplist",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetStoplist" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SetStoplist(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_IsStopWord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_IsStopWord",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_IsStopWord" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->IsStopWord(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTitle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTitle",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTitle" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetTitle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetTitle(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTitle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetTitle",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetTitle" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetTitle();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetTitle(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetTitle__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetTitle__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetTitle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetTitle(int const)\n"
    "    VIDB::GetTitle()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetComments__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetComments",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetComments" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetComments" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetComments(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetComments__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetComments",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetComments" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetComments();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetComments(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetComments__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetComments__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetComments'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetComments(int const)\n"
    "    VIDB::GetComments()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetMaintainer__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetMaintainer",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetMaintainer" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetMaintainer" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetMaintainer(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetMaintainer__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetMaintainer",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetMaintainer" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetMaintainer();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetMaintainer(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetMaintainer__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetMaintainer__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetMaintainer'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetMaintainer(int const)\n"
    "    VIDB::GetMaintainer()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_SearchSmart__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SearchSmart",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SearchSmart" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_SearchSmart" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_SearchSmart" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->SearchSmart(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SearchSmart__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SearchSmart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SearchSmart" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_SearchSmart" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->SearchSmart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SearchSmart(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_SearchSmart__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_SearchSmart__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_SearchSmart'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::SearchSmart(QUERY *,char const *)\n"
    "    VIDB::SearchSmart(QUERY *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_Search__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Search",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Search" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Search" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Search" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search((QUERY const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Search__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = 0 ;
  VIDB_STATS *arg3 = (VIDB_STATS *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Search",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Search" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Search" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Search" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_VIDB_STATS, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_Search" "', argument " "3"" of type '" "VIDB_STATS *""'"); 
  }
  arg3 = reinterpret_cast< VIDB_STATS * >(argp3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search((QUERY const &)*arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Search__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  SQUERY arg2 ;
  enum SortBy arg3 ;
  enum NormalizationMethods arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Search",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Search" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Search" "', argument " "2"" of type '" "SQUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Search" "', argument " "2"" of type '" "SQUERY const""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_Search" "', argument " "3"" of type '" "enum SortBy""'");
  } 
  arg3 = static_cast< enum SortBy >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VIDB_Search" "', argument " "4"" of type '" "enum NormalizationMethods""'");
  } 
  arg4 = static_cast< enum NormalizationMethods >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search(arg2,arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Search__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  SQUERY arg2 ;
  enum SortBy arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Search",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Search" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Search" "', argument " "2"" of type '" "SQUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Search" "', argument " "2"" of type '" "SQUERY const""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_Search" "', argument " "3"" of type '" "enum SortBy""'");
  } 
  arg3 = static_cast< enum SortBy >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Search__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  SQUERY arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  IRSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Search",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Search" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_SQUERY,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Search" "', argument " "2"" of type '" "SQUERY const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Search" "', argument " "2"" of type '" "SQUERY const""'");
    } else {
      SQUERY * temp = reinterpret_cast< SQUERY * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (IRSET *)(arg1)->Search(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_IRSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Search(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_Search__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SQUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_Search__SWIG_4(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SQUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIDB_Search__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_VIDB_STATS, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_Search__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_SQUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VIDB_Search__SWIG_2(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_Search'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::Search(QUERY const &)\n"
    "    VIDB::Search(QUERY const &,VIDB_STATS *)\n"
    "    VIDB::Search(SQUERY const,enum SortBy,enum NormalizationMethods)\n"
    "    VIDB::Search(SQUERY const,enum SortBy)\n"
    "    VIDB::Search(SQUERY const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_VSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_VSearch",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_VSearch" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_VSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_VSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)(arg1)->VSearch((QUERY const &)*arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_VSearchSmart__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_VSearchSmart",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_VSearchSmart" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_VSearchSmart" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_VSearchSmart" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)(arg1)->VSearchSmart(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_VSearchSmart__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = (QUERY *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_VSearchSmart",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_VSearchSmart" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_QUERY, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_VSearchSmart" "', argument " "2"" of type '" "QUERY *""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RSET *)(arg1)->VSearchSmart(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_VSearchSmart(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_VSearchSmart__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_VSearchSmart__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_VSearchSmart'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::VSearchSmart(QUERY *,char const *)\n"
    "    VIDB::VSearchSmart(QUERY *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_Scan__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Scan",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Scan" "', argument " "1"" of type '" "VIDB const *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((VIDB const *)arg1)->Scan(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Scan__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Scan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Scan" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_Scan" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Scan(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Scan__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Scan",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Scan" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_Scan" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Scan(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Scan__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Scan",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Scan" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_Scan" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VIDB_Scan" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Scan(arg2,(char const *)arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Scan(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_Scan__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIDB_Scan__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_Scan__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VIDB_Scan__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_Scan'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::Scan(STRING const) const\n"
    "    VIDB::Scan(STRING const,int const)\n"
    "    VIDB::Scan(STRING const,char const *)\n"
    "    VIDB::Scan(STRING const,char const *,int const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_ScanGlob__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ScanGlob",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ScanGlob" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanGlob(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ScanGlob__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  INT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ScanGlob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ScanGlob" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_INT,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_ScanGlob" "', argument " "3"" of type '" "INT const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_ScanGlob" "', argument " "3"" of type '" "INT const""'");
    } else {
      INT * temp = reinterpret_cast< INT * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanGlob(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ScanGlob__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ScanGlob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ScanGlob" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_ScanGlob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanGlob(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ScanGlob__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  char *arg3 = (char *) 0 ;
  INT arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ScanGlob",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ScanGlob" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_ScanGlob" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_INT,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VIDB_ScanGlob" "', argument " "4"" of type '" "INT const""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_ScanGlob" "', argument " "4"" of type '" "INT const""'");
    } else {
      INT * temp = reinterpret_cast< INT * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanGlob(arg2,(char const *)arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ScanGlob(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_ScanGlob__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_INT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_ScanGlob__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_ScanGlob__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_INT, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VIDB_ScanGlob__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_ScanGlob'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::ScanGlob(STRING const)\n"
    "    VIDB::ScanGlob(STRING const,INT const)\n"
    "    VIDB::ScanGlob(STRING const,char const *)\n"
    "    VIDB::ScanGlob(STRING const,char const *,INT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_ScanSearch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ScanSearch",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ScanSearch" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_ScanSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_ScanSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_ScanSearch" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanSearch((QUERY const &)*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ScanSearch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  QUERY *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  size_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  size_t val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  SwigValueWrapper< SCANLIST > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ScanSearch",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ScanSearch" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_QUERY,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_ScanSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_ScanSearch" "', argument " "2"" of type '" "QUERY const &""'"); 
  }
  arg2 = reinterpret_cast< QUERY * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_ScanSearch" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  ecode4 = SWIG_AsVal_size_t(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "VIDB_ScanSearch" "', argument " "4"" of type '" "size_t""'");
  } 
  arg4 = static_cast< size_t >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ScanSearch((QUERY const &)*arg2,(char const *)arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SCANLIST(static_cast< const SCANLIST& >(result))), SWIGTYPE_p_SCANLIST, SWIG_POINTER_OWN |  0 );
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ScanSearch(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_ScanSearch__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_QUERY, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_size_t(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_VIDB_ScanSearch__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_ScanSearch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::ScanSearch(QUERY const &,char const *)\n"
    "    VIDB::ScanSearch(QUERY const &,char const *,size_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_BeginRsetPresent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_BeginRsetPresent",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_BeginRsetPresent" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_BeginRsetPresent" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->BeginRsetPresent((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetAncestorContent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT *arg2 = 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetAncestorContent",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetAncestorContent" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_GetAncestorContent" "', argument " "2"" of type '" "RESULT &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_GetAncestorContent" "', argument " "2"" of type '" "RESULT &""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_GetAncestorContent" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)VIDB_GetAncestorContent(arg1,*arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Headline__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Headline",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Headline" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Headline" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Headline" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Headline(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Headline__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Headline",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Headline" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Headline" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Headline" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_Headline" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Headline(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Headline(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_Headline__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_Headline__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_Headline'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::Headline(RESULT const)\n"
    "    VIDB::Headline(RESULT const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_Summary__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Summary",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Summary" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Summary" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Summary" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Summary(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Summary__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Summary",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Summary" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Summary" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Summary" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_Summary" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Summary(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Summary(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_Summary__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_Summary__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_Summary'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::Summary(RESULT const)\n"
    "    VIDB::Summary(RESULT const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_Context__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  STRING arg3 ;
  STRING arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Context",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Context" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Context" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Context" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj3))
    arg4 = STRING(PyString_AsString(obj3), PyString_Size(obj3));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Context(arg2,arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Context__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Context",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Context" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Context" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Context" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Context(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Context(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_Context__SWIG_1(self, args);
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VIDB_Context__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_Context'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::Context(RESULT const,STRING const,STRING const)\n"
    "    VIDB::Context(RESULT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_NthContext__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  RESULT arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_NthContext",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_NthContext" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_NthContext" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_NthContext" "', argument " "3"" of type '" "RESULT const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_NthContext" "', argument " "3"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NthContext(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_NthContext__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  unsigned int arg2 ;
  RESULT arg3 ;
  STRING arg4 ;
  STRING arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  unsigned int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_NthContext",5,5,&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_NthContext" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_unsigned_SS_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_NthContext" "', argument " "2"" of type '" "unsigned int""'");
  } 
  arg2 = static_cast< unsigned int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_NthContext" "', argument " "3"" of type '" "RESULT const""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_NthContext" "', argument " "3"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    if (PyString_Check(obj3))
    arg4 = STRING(PyString_AsString(obj3), PyString_Size(obj3));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj4))
    arg5 = STRING(PyString_AsString(obj4), PyString_Size(obj4));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NthContext(arg2,arg3,arg4,arg5);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_NthContext(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[6];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_RESULT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_NthContext__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_unsigned_SS_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_RESULT, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_AsCharPtrAndSize(argv[4], 0, NULL, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_VIDB_NthContext__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_NthContext'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::NthContext(unsigned int,RESULT const)\n"
    "    VIDB::NthContext(unsigned int,RESULT const,STRING const,STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_URL__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_URL",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_URL" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_URL" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_URL" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_URL" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->URL(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_URL__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_URL",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_URL" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_URL" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_URL" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->URL(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_URL(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_URL__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIDB_URL__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_URL'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::URL(RESULT const,bool)\n"
    "    VIDB::URL(RESULT const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_HighlightedRecord(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  STRING arg3 ;
  STRING arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_HighlightedRecord",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_HighlightedRecord" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_HighlightedRecord" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_HighlightedRecord" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj3))
    arg4 = STRING(PyString_AsString(obj3), PyString_Size(obj3));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->HighlightedRecord(arg2,arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_DocHighlight__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_DocHighlight",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_DocHighlight" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_DocHighlight" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_DocHighlight" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DocHighlight(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_DocHighlight__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_DocHighlight",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_DocHighlight" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_DocHighlight" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_DocHighlight" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_DocHighlight" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DocHighlight(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_DocHighlight(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_DocHighlight__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_DocHighlight__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_DocHighlight'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::DocHighlight(RESULT const)\n"
    "    VIDB::DocHighlight(RESULT const,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFieldData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT *arg2 = (RESULT *) 0 ;
  char *arg3 = (char *) 0 ;
  SwigValueWrapper< DOCTYPE_ID > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetFieldData",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetFieldData" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_GetFieldData" "', argument " "2"" of type '" "RESULT const *""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_GetFieldData" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_DOCTYPE_ID,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VIDB_GetFieldData" "', argument " "4"" of type '" "DOCTYPE_ID""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_GetFieldData" "', argument " "4"" of type '" "DOCTYPE_ID""'");
    } else {
      DOCTYPE_ID * temp = reinterpret_cast< DOCTYPE_ID * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)VIDB_GetFieldData__SWIG_0(arg1,(RESULT const *)arg2,(char const *)arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFieldData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT *arg2 = (RESULT *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetFieldData",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetFieldData" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_GetFieldData" "', argument " "2"" of type '" "RESULT const *""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_GetFieldData" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)VIDB_GetFieldData__SWIG_0(arg1,(RESULT const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFieldData(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_GetFieldData__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_DOCTYPE_ID, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VIDB_GetFieldData__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetFieldData'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetFieldData(RESULT const *,char const *,DOCTYPE_ID)\n"
    "    VIDB::GetFieldData(RESULT const *,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFieldContents(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT *arg2 = (RESULT *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetFieldContents",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetFieldContents" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_GetFieldContents" "', argument " "2"" of type '" "RESULT const *""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_GetFieldContents" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)VIDB_GetFieldContents(arg1,(RESULT const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Present__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Present",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Present" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Present" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Present" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_Present" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Present(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Present__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_Present",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_Present" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_Present" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_Present" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_Present" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VIDB_Present" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Present(arg2,(char const *)arg3,(char const *)arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_Present(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_Present__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VIDB_Present__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_Present'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::Present(RESULT const,char const *)\n"
    "    VIDB::Present(RESULT const,char const *,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_DocPresent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_DocPresent",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_DocPresent" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_DocPresent" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_DocPresent" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_DocPresent" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DocPresent(arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_DocPresent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int res4 ;
  char *buf4 = 0 ;
  int alloc4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_DocPresent",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_DocPresent" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_RESULT,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_DocPresent" "', argument " "2"" of type '" "RESULT const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_DocPresent" "', argument " "2"" of type '" "RESULT const""'");
    } else {
      RESULT * temp = reinterpret_cast< RESULT * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "VIDB_DocPresent" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  res4 = SWIG_AsCharPtrAndSize(obj3, &buf4, NULL, &alloc4);
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "VIDB_DocPresent" "', argument " "4"" of type '" "char const *""'");
  }
  arg4 = reinterpret_cast< char * >(buf4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DocPresent(arg2,(char const *)arg3,(char const *)arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return resultobj;
fail:
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  if (alloc4 == SWIG_NEWOBJ) delete[] buf4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_DocPresent(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_DocPresent__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VIDB_DocPresent__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_DocPresent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::DocPresent(RESULT const,char const *)\n"
    "    VIDB::DocPresent(RESULT const,char const *,char const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_EndRsetPresent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_EndRsetPresent",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_EndRsetPresent" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_EndRsetPresent" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->EndRsetPresent((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetGlobalDocType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetGlobalDocType",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetGlobalDocType" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetGlobalDocType();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_KeyLookup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RESULT *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_KeyLookup",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_KeyLookup" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RESULT *)VIDB_KeyLookup(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RESULT, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_KeyExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_KeyExists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_KeyExists" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)VIDB_KeyExists(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_SetDateRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  SwigValueWrapper< DATERANGE > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_SetDateRange",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_SetDateRange" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_DATERANGE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_SetDateRange" "', argument " "2"" of type '" "DATERANGE const""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "VIDB_SetDateRange" "', argument " "2"" of type '" "DATERANGE const""'");
    } else {
      DATERANGE * temp = reinterpret_cast< DATERANGE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->SetDateRange(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ProfileGetString__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  STRING arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ProfileGetString",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ProfileGetString" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj3))
    arg4 = STRING(PyString_AsString(obj3), PyString_Size(obj3));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ProfileGetString(arg2,arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ProfileGetString__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ProfileGetString",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ProfileGetString" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->ProfileGetString(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ProfileGetString(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_VIDB_ProfileGetString__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          int res = SWIG_AsCharPtrAndSize(argv[3], 0, NULL, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_VIDB_ProfileGetString__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_ProfileGetString'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::ProfileGetString(STRING const,STRING const,STRING const)\n"
    "    VIDB::ProfileGetString(STRING const,STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_FirstKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_FirstKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_FirstKey" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->FirstKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_LastKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_LastKey",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_LastKey" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->LastKey();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_NextKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_NextKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_NextKey" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->NextKey(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_PrevKey(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_PrevKey",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_PrevKey" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->PrevKey(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetDocumentInfo__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  RECORD *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetDocumentInfo",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetDocumentInfo" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetDocumentInfo" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RECORD *)VIDB_GetDocumentInfo__SWIG_0(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RECORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetDocumentInfo__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  RECORD *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetDocumentInfo",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetDocumentInfo" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "VIDB_GetDocumentInfo" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "VIDB_GetDocumentInfo" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (RECORD *)VIDB_GetDocumentInfo__SWIG_1(arg1,arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_RECORD, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetDocumentInfo(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_VIDB_GetDocumentInfo__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_VIDB_GetDocumentInfo__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetDocumentInfo'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetDocumentInfo(int)\n"
    "    VIDB::GetDocumentInfo(int,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_VIDB_DateCreated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_DateCreated",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_DateCreated" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DateCreated();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_DateLastModified(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SRCH_DATE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_DateLastModified",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_DateLastModified" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->DateLastModified();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new SRCH_DATE(static_cast< const SRCH_DATE& >(result))), SWIGTYPE_p_SRCH_DATE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetAllDocTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetAllDocTypes",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetAllDocTypes" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)VIDB_GetAllDocTypes(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_ValidateDocType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_ValidateDocType",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_ValidateDocType" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_ValidateDocType" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->ValidateDocType((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetVersionID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetVersionID",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetVersionID" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetVersionID();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetLocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetLocks",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetLocks" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->GetLocks();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFields__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  RESULT *arg2 = (RESULT *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetFields",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetFields" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_RESULT, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "VIDB_GetFields" "', argument " "2"" of type '" "RESULT const *""'"); 
  }
  arg2 = reinterpret_cast< RESULT * >(argp2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)VIDB_GetFields__SWIG_0(arg1,(RESULT const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFields__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  VIDB *arg1 = (VIDB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"VIDB_GetFields",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_VIDB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "VIDB_GetFields" "', argument " "1"" of type '" "VIDB *""'"); 
  }
  arg1 = reinterpret_cast< VIDB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (PyObject *)VIDB_GetFields__SWIG_0(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    return result;
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_VIDB_GetFields(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_VIDB_GetFields__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_VIDB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_RESULT, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_VIDB_GetFields__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'VIDB_GetFields'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    VIDB::GetFields(RESULT const *)\n"
    "    VIDB::GetFields()\n");
  return 0;
}


SWIGINTERN PyObject *VIDB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_VIDB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LANGUAGE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  LANGUAGE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_LANGUAGE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LANGUAGE" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (LANGUAGE *)new LANGUAGE((char const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LANGUAGE, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_LANGUAGE_Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LANGUAGE *arg1 = (LANGUAGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"LANGUAGE_Name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LANGUAGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LANGUAGE_Name" "', argument " "1"" of type '" "LANGUAGE const *""'"); 
  }
  arg1 = reinterpret_cast< LANGUAGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((LANGUAGE const *)arg1)->Name();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LANGUAGE_Code(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LANGUAGE *arg1 = (LANGUAGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"LANGUAGE_Code",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LANGUAGE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LANGUAGE_Code" "', argument " "1"" of type '" "LANGUAGE const *""'"); 
  }
  arg1 = reinterpret_cast< LANGUAGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((LANGUAGE const *)arg1)->Code();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LANGUAGE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LANGUAGE *arg1 = (LANGUAGE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_LANGUAGE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LANGUAGE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LANGUAGE" "', argument " "1"" of type '" "LANGUAGE *""'"); 
  }
  arg1 = reinterpret_cast< LANGUAGE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LANGUAGE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LANGUAGE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_CHARSET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  CHARSET *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_CHARSET",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_CHARSET" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (CHARSET *)new CHARSET((char const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_CHARSET, SWIG_POINTER_NEW |  0 );
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_Ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_Ok",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_Ok" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((CHARSET const *)arg1)->Ok();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_Name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_Name" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)CHARSET_Name((CHARSET const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_HtmlCat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  STRING arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_HtmlCat",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_HtmlCat" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "CHARSET_HtmlCat" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((CHARSET const *)arg1)->HtmlCat(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_HtmlCat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_HtmlCat",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_HtmlCat" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((CHARSET const *)arg1)->HtmlCat(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_HtmlCat(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CHARSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_CHARSET_HtmlCat__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_CHARSET, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_CHARSET_HtmlCat__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'CHARSET_HtmlCat'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    CHARSET::HtmlCat(STRING const,bool) const\n"
    "    CHARSET::HtmlCat(STRING const) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_CHARSET_ToLower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ToLower",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ToLower" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((CHARSET const *)arg1)->ToLower(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ToUpper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ToUpper",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ToUpper" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((CHARSET const *)arg1)->ToUpper(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isalpha(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isalpha",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isalpha" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isalpha" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isalpha(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isupper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isupper",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isupper" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isupper" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isupper(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_islower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_islower",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_islower" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_islower" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_islower(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isdigit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isdigit",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isdigit" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isdigit" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isdigit(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isxdigit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isxdigit",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isxdigit" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isxdigit" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isxdigit(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isalnum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isalnum",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isalnum" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isalnum" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isalnum(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isspace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isspace",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isspace" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isspace" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isspace(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_ispunct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_ispunct",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_ispunct" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_ispunct" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_ispunct(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isprint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isprint",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isprint" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isprint" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isprint(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isgraph(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isgraph",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isgraph" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isgraph" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isgraph(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_iscntrl(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_iscntrl",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_iscntrl" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_iscntrl" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_iscntrl(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_iswhite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_iswhite",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_iswhite" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_iswhite" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_iswhite(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_isascii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_isascii",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_isascii" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_isascii" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_isascii(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_islatin1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_islatin1",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_islatin1" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_islatin1" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_islatin1(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_toupper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_toupper",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_toupper" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_toupper" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_toupper(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_tolower(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_tolower",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_tolower" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_tolower" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_tolower(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_ib_toascii(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_ib_toascii",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_ib_toascii" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_ib_toascii" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->ib_toascii(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_isTermChr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_isTermChr",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_isTermChr" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_isTermChr" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->isTermChr(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_isWordSep(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_isWordSep",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_isWordSep" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_isWordSep" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->isWordSep(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_isTermWhite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_isTermWhite",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_isTermWhite" "', argument " "1"" of type '" "CHARSET const *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_isTermWhite" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((CHARSET const *)arg1)->isTermWhite(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_CHARSET_UCS(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  char arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"CHARSET_UCS",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "CHARSET_UCS" "', argument " "1"" of type '" "CHARSET *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  ecode2 = SWIG_AsVal_char(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "CHARSET_UCS" "', argument " "2"" of type '" "char""'");
  } 
  arg2 = static_cast< char >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)CHARSET_UCS(arg1,arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_CHARSET(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  CHARSET *arg1 = (CHARSET *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_CHARSET",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_CHARSET, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_CHARSET" "', argument " "1"" of type '" "CHARSET *""'"); 
  }
  arg1 = reinterpret_cast< CHARSET * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *CHARSET_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_CHARSET, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LOCALE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (LOCALE *)new LOCALE();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_LOCALE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LOCALE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_LOCALE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LOCALE" "', argument " "1"" of type '" "LOCALE *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_SetLanguage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  SwigValueWrapper< LANGUAGE > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LOCALE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_SetLanguage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_SetLanguage" "', argument " "1"" of type '" "LOCALE *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_LANGUAGE,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LOCALE_SetLanguage" "', argument " "2"" of type '" "LANGUAGE""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LOCALE_SetLanguage" "', argument " "2"" of type '" "LANGUAGE""'");
    } else {
      LANGUAGE * temp = reinterpret_cast< LANGUAGE * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->SetLanguage(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new LOCALE(static_cast< const LOCALE& >(result))), SWIGTYPE_p_LOCALE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_SetCharset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  SwigValueWrapper< CHARSET > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  LOCALE result;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_SetCharset",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_SetCharset" "', argument " "1"" of type '" "LOCALE *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_CHARSET,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LOCALE_SetCharset" "', argument " "2"" of type '" "CHARSET""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "LOCALE_SetCharset" "', argument " "2"" of type '" "CHARSET""'");
    } else {
      CHARSET * temp = reinterpret_cast< CHARSET * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->SetCharset(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new LOCALE(static_cast< const LOCALE& >(result))), SWIGTYPE_p_LOCALE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_GetLanguageCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_GetLanguageCode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_GetLanguageCode" "', argument " "1"" of type '" "LOCALE const *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((LOCALE const *)arg1)->GetLanguageCode();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_GetLanguageName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_GetLanguageName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_GetLanguageName" "', argument " "1"" of type '" "LOCALE const *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((LOCALE const *)arg1)->GetLanguageName();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_GetCharsetCode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_GetCharsetCode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_GetCharsetCode" "', argument " "1"" of type '" "LOCALE const *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((LOCALE const *)arg1)->GetCharsetCode();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_GetCharsetName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  char *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_GetCharsetName",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_GetCharsetName" "', argument " "1"" of type '" "LOCALE const *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (char *)((LOCALE const *)arg1)->GetCharsetName();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_FromCharPtr((const char *)result);
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_Charset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< CHARSET > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_Charset",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_Charset" "', argument " "1"" of type '" "LOCALE const *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((LOCALE const *)arg1)->Charset();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new CHARSET(static_cast< const CHARSET& >(result))), SWIGTYPE_p_CHARSET, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_Language(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< LANGUAGE > result;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_Language",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_Language" "', argument " "1"" of type '" "LOCALE const *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((LOCALE const *)arg1)->Language();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new LANGUAGE(static_cast< const LANGUAGE& >(result))), SWIGTYPE_p_LANGUAGE, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_Name",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_Name" "', argument " "1"" of type '" "LOCALE const *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = LOCALE_Name((LOCALE const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LOCALE_Id(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  LOCALE *arg1 = (LOCALE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"LOCALE_Id",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_LOCALE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "LOCALE_Id" "', argument " "1"" of type '" "LOCALE const *""'"); 
  }
  arg1 = reinterpret_cast< LOCALE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((LOCALE const *)arg1)->Id();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LOCALE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_LOCALE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_ResolveConfigPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ResolveConfigPath",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ResolveConfigPath(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ResolveBinPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ResolveBinPath",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ResolveBinPath(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ExpandFileSpec(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"ExpandFileSpec",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ExpandFileSpec(arg1);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_set_syslog(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  char *arg1 = (char *) 0 ;
  int res1 ;
  char *buf1 = 0 ;
  int alloc1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"set_syslog",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_AsCharPtrAndSize(obj0, &buf1, NULL, &alloc1);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "set_syslog" "', argument " "1"" of type '" "char const *""'");
  }
  arg1 = reinterpret_cast< char * >(buf1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)set_syslog((char const *)arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return resultobj;
fail:
  if (alloc1 == SWIG_NEWOBJ) delete[] buf1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_log_init__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"log_init",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log_init" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "log_init" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(obj2, &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "log_init" "', argument " "3"" of type '" "char const *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)log_init(arg1,(char const *)arg2,(char const *)arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_log_init__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"log_init",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log_init" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "log_init" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)log_init(arg1,(char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_log_init__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"log_init",1,1,&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log_init" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)log_init(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_log_init(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[4];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      return _wrap_log_init__SWIG_2(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_log_init__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_log_init__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'log_init'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    log_init(int,char const *,char const *)\n"
    "    log_init(int,char const *)\n"
    "    log_init(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_log_message(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"log_message",2,2,&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "log_message" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "log_message" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    log_message(arg1,(char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_INODE__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (INODE *)new INODE();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_INODE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_INODE__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  STRING arg1 ;
  PyObject * obj0 = 0 ;
  INODE *result = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"new_INODE",1,1,&obj0)) SWIG_fail;
  {
    if (PyString_Check(obj0))
    arg1 = STRING(PyString_AsString(obj0), PyString_Size(obj0));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (INODE *)new INODE(arg1);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_INODE, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_INODE(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[2];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_INODE__SWIG_0(self, args);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsCharPtrAndSize(argv[0], 0, NULL, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_INODE__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_INODE'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    INODE::INODE()\n"
    "    INODE::INODE(STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_INODE_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_Clear",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_Clear" "', argument " "1"" of type '" "INODE *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->Clear();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INODE_Set__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GDT_BOOLEAN result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_Set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_Set" "', argument " "1"" of type '" "INODE *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Set(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new GDT_BOOLEAN(static_cast< const GDT_BOOLEAN& >(result))), SWIGTYPE_p_GDT_BOOLEAN, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INODE_Set__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GDT_BOOLEAN result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_Set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_Set" "', argument " "1"" of type '" "INODE *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    arg2 = PyFile_AsFile(obj1);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Set(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new GDT_BOOLEAN(static_cast< const GDT_BOOLEAN& >(result))), SWIGTYPE_p_GDT_BOOLEAN, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INODE_Set__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  GDT_BOOLEAN result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_Set",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_Set" "', argument " "1"" of type '" "INODE *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "INODE_Set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->Set(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj((new GDT_BOOLEAN(static_cast< const GDT_BOOLEAN& >(result))), SWIGTYPE_p_GDT_BOOLEAN, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INODE_Set(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[3];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_INODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_FILE, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_INODE_Set__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_INODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_INODE_Set__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_INODE, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_INODE_Set__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'INODE_Set'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    INODE::Set(STRING const)\n"
    "    INODE::Set(FILE *)\n"
    "    INODE::Set(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_INODE_Key(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_Key",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_Key" "', argument " "1"" of type '" "INODE const *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = ((INODE const *)arg1)->Key();
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INODE_isLinked(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_isLinked",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_isLinked" "', argument " "1"" of type '" "INODE const *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((INODE const *)arg1)->isLinked();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INODE_isDangling(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_isDangling",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_isDangling" "', argument " "1"" of type '" "INODE const *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)((INODE const *)arg1)->isDangling();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INODE_inode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_inode",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_inode" "', argument " "1"" of type '" "INODE const *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((INODE const *)arg1)->inode();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_INODE_device(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"INODE_device",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "INODE_device" "', argument " "1"" of type '" "INODE const *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)((INODE const *)arg1)->device();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_INODE(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  INODE *arg1 = (INODE *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete_INODE",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_INODE, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_INODE" "', argument " "1"" of type '" "INODE *""'"); 
  }
  arg1 = reinterpret_cast< INODE * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *INODE_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_INODE, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___IB_GetFreeMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_GetFreeMemory",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_GetFreeMemory" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetFreeMemory();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_GetTotalMemory(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_GetTotalMemory",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_GetTotalMemory" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->GetTotalMemory();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_Hostid(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_Hostid",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_Hostid" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->Hostid();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SerialID(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SerialID",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SerialID" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (long)(arg1)->SerialID();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_FileGlob(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_FileGlob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_FileGlob" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->FileGlob(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_Glob__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_Glob",4,4,&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_Glob" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "__IB_Glob" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Glob(arg2,arg3,arg4);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_Glob__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_Glob",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_Glob" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->Glob(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_Glob(PyObject *self, PyObject *args) {
  int argc;
  PyObject *argv[5];
  int ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? (int)PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p___IB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap___IB_Glob__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p___IB, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsCharPtrAndSize(argv[1], 0, NULL, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_AsCharPtrAndSize(argv[2], 0, NULL, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap___IB_Glob__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function '__IB_Glob'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    __IB::Glob(STRING const,STRING const,bool)\n"
    "    __IB::Glob(STRING const,STRING const)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap___IB_GetUserHome(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  STRING result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_GetUserHome",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_GetUserHome" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (arg1)->GetUserHome(arg2);
    Py_END_ALLOW_THREADS;
  }
  {
    resultobj = PyString_FromStringAndSize((&result)->c_str(),(&result)->size());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_DirectoryExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_DirectoryExists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_DirectoryExists" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->DirectoryExists(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_FileExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_FileExists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_FileExists" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->FileExists(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_ExeExists(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  STRING arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_ExeExists",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_ExeExists" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (bool)(arg1)->ExeExists(arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_FileLink(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  STRING arg2 ;
  STRING arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_FileLink",3,3,&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_FileLink" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    if (PyString_Check(obj1))
    arg2 = STRING(PyString_AsString(obj1), PyString_Size(obj1));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    if (PyString_Check(obj2))
    arg3 = STRING(PyString_AsString(obj2), PyString_Size(obj2));
    else
    SWIG_exception(SWIG_TypeError,  StringErrorMsg);
  }
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (int)(arg1)->FileLink(arg2,arg3);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SendDebugMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SendDebugMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SendDebugMessage" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__IB_SendDebugMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SendDebugMessage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SendInfoMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SendInfoMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SendInfoMessage" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__IB_SendInfoMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SendInfoMessage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SendNoticeMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SendNoticeMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SendNoticeMessage" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__IB_SendNoticeMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SendNoticeMessage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SendWarningMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SendWarningMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SendWarningMessage" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__IB_SendWarningMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SendWarningMessage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SendErrorMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SendErrorMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SendErrorMessage" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__IB_SendErrorMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SendErrorMessage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SendErrnoMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SendErrnoMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SendErrnoMessage" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__IB_SendErrnoMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SendErrnoMessage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SendFatalMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SendFatalMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SendFatalMessage" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__IB_SendFatalMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SendFatalMessage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap___IB_SendPanicMessage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"__IB_SendPanicMessage",2,2,&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__IB_SendPanicMessage" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(obj1, &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__IB_SendPanicMessage" "', argument " "2"" of type '" "char const *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  {
    Py_BEGIN_ALLOW_THREADS;
    (arg1)->SendPanicMessage((char const *)arg2);
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return resultobj;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new___IB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *result = 0 ;
  
  {
    Py_BEGIN_ALLOW_THREADS;
    result = (__IB *)new __IB();
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p___IB, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete___IB(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  __IB *arg1 = (__IB *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if(!PyArg_UnpackTuple(args,(char *)"delete___IB",1,1,&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p___IB, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete___IB" "', argument " "1"" of type '" "__IB *""'"); 
  }
  arg1 = reinterpret_cast< __IB * >(argp1);
  {
    Py_BEGIN_ALLOW_THREADS;
    delete arg1;
    Py_END_ALLOW_THREADS;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *__IB_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_UnpackTuple(args,(char*)"swigregister", 1, 1,&obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p___IB, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"new_ArraySTRING", _wrap_new_ArraySTRING, METH_VARARGS, NULL},
	 { (char *)"delete_ArraySTRING", _wrap_delete_ArraySTRING, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Empty", _wrap_ArraySTRING_Empty, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Clear", _wrap_ArraySTRING_Clear, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Count", _wrap_ArraySTRING_Count, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_IsEmpty", _wrap_ArraySTRING_IsEmpty, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Item", _wrap_ArraySTRING_Item, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_GetEntry", _wrap_ArraySTRING_GetEntry, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING___getitem__", _wrap_ArraySTRING___getitem__, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_SetEntry", _wrap_ArraySTRING_SetEntry, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Add", _wrap_ArraySTRING_Add, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Insert", _wrap_ArraySTRING_Insert, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Replace", _wrap_ArraySTRING_Replace, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Remove", _wrap_ArraySTRING_Remove, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_getself", _wrap_ArraySTRING_getself, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_asTuple", _wrap_ArraySTRING_asTuple, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_Join", _wrap_ArraySTRING_Join, METH_VARARGS, NULL},
	 { (char *)"ArraySTRING_swigregister", ArraySTRING_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IDB_STATS", _wrap_new_IDB_STATS, METH_VARARGS, NULL},
	 { (char *)"delete_IDB_STATS", _wrap_delete_IDB_STATS, METH_VARARGS, NULL},
	 { (char *)"IDB_STATS_SetHits", _wrap_IDB_STATS_SetHits, METH_VARARGS, NULL},
	 { (char *)"IDB_STATS_SetTotal", _wrap_IDB_STATS_SetTotal, METH_VARARGS, NULL},
	 { (char *)"IDB_STATS_GetTotal", _wrap_IDB_STATS_GetTotal, METH_VARARGS, NULL},
	 { (char *)"IDB_STATS_GetHits", _wrap_IDB_STATS_GetHits, METH_VARARGS, NULL},
	 { (char *)"IDB_STATS_Clear", _wrap_IDB_STATS_Clear, METH_VARARGS, NULL},
	 { (char *)"IDB_STATS_SetName", _wrap_IDB_STATS_SetName, METH_VARARGS, NULL},
	 { (char *)"IDB_STATS_GetName", _wrap_IDB_STATS_GetName, METH_VARARGS, NULL},
	 { (char *)"IDB_STATS_swigregister", IDB_STATS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VIDB_STATS", _wrap_new_VIDB_STATS, METH_VARARGS, NULL},
	 { (char *)"delete_VIDB_STATS", _wrap_delete_VIDB_STATS, METH_VARARGS, NULL},
	 { (char *)"VIDB_STATS_Clear", _wrap_VIDB_STATS_Clear, METH_VARARGS, NULL},
	 { (char *)"VIDB_STATS_SetTotal", _wrap_VIDB_STATS_SetTotal, METH_VARARGS, NULL},
	 { (char *)"VIDB_STATS_SetHits", _wrap_VIDB_STATS_SetHits, METH_VARARGS, NULL},
	 { (char *)"VIDB_STATS_SetName", _wrap_VIDB_STATS_SetName, METH_VARARGS, NULL},
	 { (char *)"VIDB_STATS_swigregister", VIDB_STATS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IDBOBJ", _wrap_new_IDBOBJ, METH_VARARGS, NULL},
	 { (char *)"delete_IDBOBJ", _wrap_delete_IDBOBJ, METH_VARARGS, NULL},
	 { (char *)"IDBOBJ_getUseRelativePaths", _wrap_IDBOBJ_getUseRelativePaths, METH_VARARGS, NULL},
	 { (char *)"IDBOBJ_setUseRelativePaths", _wrap_IDBOBJ_setUseRelativePaths, METH_VARARGS, NULL},
	 { (char *)"IDBOBJ_RelativizePathname", _wrap_IDBOBJ_RelativizePathname, METH_VARARGS, NULL},
	 { (char *)"IDBOBJ_ResolvePathname", _wrap_IDBOBJ_ResolvePathname, METH_VARARGS, NULL},
	 { (char *)"IDBOBJ_swigregister", IDBOBJ_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_INDEX_ID", _wrap_new_INDEX_ID, METH_VARARGS, NULL},
	 { (char *)"delete_INDEX_ID", _wrap_delete_INDEX_ID, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_GetIndex", _wrap_INDEX_ID_GetIndex, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_SetIndex", _wrap_INDEX_ID_SetIndex, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_SetMdtIndex", _wrap_INDEX_ID_SetMdtIndex, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_GetMdtIndex", _wrap_INDEX_ID_GetMdtIndex, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_SetVirtualIndex", _wrap_INDEX_ID_SetVirtualIndex, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_GetVirtualIndex", _wrap_INDEX_ID_GetVirtualIndex, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_Equals", _wrap_INDEX_ID_Equals, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_Compare", _wrap_INDEX_ID_Compare, METH_VARARGS, NULL},
	 { (char *)"INDEX_ID_swigregister", INDEX_ID_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DOCTYPE", _wrap_new_DOCTYPE, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ParseDate", _wrap_DOCTYPE_ParseDate, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ParseDateRange", _wrap_DOCTYPE_ParseDateRange, METH_VARARGS, NULL},
	 { (char *)"delete_DOCTYPE", _wrap_delete_DOCTYPE, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_swigregister", DOCTYPE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DTREG", _wrap_new_DTREG, METH_VARARGS, NULL},
	 { (char *)"DTREG_PluginExists", _wrap_DTREG_PluginExists, METH_VARARGS, NULL},
	 { (char *)"DTREG_AddPluginPath", _wrap_DTREG_AddPluginPath, METH_VARARGS, NULL},
	 { (char *)"DTREG_GetDocTypePtr", _wrap_DTREG_GetDocTypePtr, METH_VARARGS, NULL},
	 { (char *)"DTREG_ValidateDocType", _wrap_DTREG_ValidateDocType, METH_VARARGS, NULL},
	 { (char *)"DTREG_GetDocTypeList", _wrap_DTREG_GetDocTypeList, METH_VARARGS, NULL},
	 { (char *)"DTREG_Version", _wrap_DTREG_Version, METH_VARARGS, NULL},
	 { (char *)"delete_DTREG", _wrap_delete_DTREG, METH_VARARGS, NULL},
	 { (char *)"DTREG_swigregister", DTREG_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MDTREC", _wrap_new_MDTREC, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetCategory", _wrap_MDTREC_SetCategory, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetCategory", _wrap_MDTREC_GetCategory, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetPriority", _wrap_MDTREC_SetPriority, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetPriority", _wrap_MDTREC_GetPriority, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetKey", _wrap_MDTREC_SetKey, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetKey", _wrap_MDTREC_GetKey, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetDocumentType", _wrap_MDTREC_SetDocumentType, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetDocumentType", _wrap_MDTREC_GetDocumentType, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetPath", _wrap_MDTREC_SetPath, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetPath", _wrap_MDTREC_GetPath, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetFileName", _wrap_MDTREC_SetFileName, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetFileName", _wrap_MDTREC_GetFileName, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetFullFileName", _wrap_MDTREC_SetFullFileName, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetFullFileName", _wrap_MDTREC_GetFullFileName, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetGlobalFileStart", _wrap_MDTREC_SetGlobalFileStart, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetGlobalFileStart", _wrap_MDTREC_GetGlobalFileStart, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetLocalRecordStart", _wrap_MDTREC_SetLocalRecordStart, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetLocalRecordStart", _wrap_MDTREC_GetLocalRecordStart, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetLocalRecordEnd", _wrap_MDTREC_SetLocalRecordEnd, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetLocalRecordEnd", _wrap_MDTREC_GetLocalRecordEnd, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetLocale", _wrap_MDTREC_SetLocale, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetLocale", _wrap_MDTREC_GetLocale, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetDate", _wrap_MDTREC_SetDate, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetDate", _wrap_MDTREC_GetDate, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetDateModified", _wrap_MDTREC_SetDateModified, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetDateModified", _wrap_MDTREC_GetDateModified, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetDateCreated", _wrap_MDTREC_SetDateCreated, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetDateCreated", _wrap_MDTREC_GetDateCreated, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetDateExpires", _wrap_MDTREC_SetDateExpires, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetDateExpires", _wrap_MDTREC_GetDateExpires, METH_VARARGS, NULL},
	 { (char *)"MDTREC_TTL", _wrap_MDTREC_TTL, METH_VARARGS, NULL},
	 { (char *)"MDTREC_SetDeleted", _wrap_MDTREC_SetDeleted, METH_VARARGS, NULL},
	 { (char *)"MDTREC_GetDeleted", _wrap_MDTREC_GetDeleted, METH_VARARGS, NULL},
	 { (char *)"MDTREC_FlipBytes", _wrap_MDTREC_FlipBytes, METH_VARARGS, NULL},
	 { (char *)"MDTREC_Dump", _wrap_MDTREC_Dump, METH_VARARGS, NULL},
	 { (char *)"delete_MDTREC", _wrap_delete_MDTREC, METH_VARARGS, NULL},
	 { (char *)"MDTREC_swigregister", MDTREC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_MDT", _wrap_new_MDT, METH_VARARGS, NULL},
	 { (char *)"MDT_GetFileStem", _wrap_MDT_GetFileStem, METH_VARARGS, NULL},
	 { (char *)"MDT_SetEntry", _wrap_MDT_SetEntry, METH_VARARGS, NULL},
	 { (char *)"MDT_LookupByKey", _wrap_MDT_LookupByKey, METH_VARARGS, NULL},
	 { (char *)"MDT_GetEntry", _wrap_MDT_GetEntry, METH_VARARGS, NULL},
	 { (char *)"MDT_Delete", _wrap_MDT_Delete, METH_VARARGS, NULL},
	 { (char *)"MDT_UnDelete", _wrap_MDT_UnDelete, METH_VARARGS, NULL},
	 { (char *)"MDT_IsDeleted", _wrap_MDT_IsDeleted, METH_VARARGS, NULL},
	 { (char *)"MDT_GetTotalEntries", _wrap_MDT_GetTotalEntries, METH_VARARGS, NULL},
	 { (char *)"MDT_GetTotalDeleted", _wrap_MDT_GetTotalDeleted, METH_VARARGS, NULL},
	 { (char *)"MDT_GetChanged", _wrap_MDT_GetChanged, METH_VARARGS, NULL},
	 { (char *)"MDT_RemoveDeleted", _wrap_MDT_RemoveDeleted, METH_VARARGS, NULL},
	 { (char *)"MDT_Ok", _wrap_MDT_Ok, METH_VARARGS, NULL},
	 { (char *)"delete_MDT", _wrap_delete_MDT, METH_VARARGS, NULL},
	 { (char *)"MDT_swigregister", MDT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FC", _wrap_new_FC, METH_VARARGS, NULL},
	 { (char *)"FC_Write", _wrap_FC_Write, METH_VARARGS, NULL},
	 { (char *)"FC_Read", _wrap_FC_Read, METH_VARARGS, NULL},
	 { (char *)"FC_SetFieldStart", _wrap_FC_SetFieldStart, METH_VARARGS, NULL},
	 { (char *)"FC_SetFieldEnd", _wrap_FC_SetFieldEnd, METH_VARARGS, NULL},
	 { (char *)"FC_GetFieldStart", _wrap_FC_GetFieldStart, METH_VARARGS, NULL},
	 { (char *)"FC_GetFieldEnd", _wrap_FC_GetFieldEnd, METH_VARARGS, NULL},
	 { (char *)"FC_GetLength", _wrap_FC_GetLength, METH_VARARGS, NULL},
	 { (char *)"FC_Compare", _wrap_FC_Compare, METH_VARARGS, NULL},
	 { (char *)"FC_Contains", _wrap_FC_Contains, METH_VARARGS, NULL},
	 { (char *)"FC_asTuple", _wrap_FC_asTuple, METH_VARARGS, NULL},
	 { (char *)"FC_FlipBytes", _wrap_FC_FlipBytes, METH_VARARGS, NULL},
	 { (char *)"delete_FC", _wrap_delete_FC, METH_VARARGS, NULL},
	 { (char *)"FC_swigregister", FC_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TREENODE", _wrap_new_TREENODE, METH_VARARGS, NULL},
	 { (char *)"delete_TREENODE", _wrap_delete_TREENODE, METH_VARARGS, NULL},
	 { (char *)"TREENODE_Name", _wrap_TREENODE_Name, METH_VARARGS, NULL},
	 { (char *)"TREENODE_Fc", _wrap_TREENODE_Fc, METH_VARARGS, NULL},
	 { (char *)"TREENODE_swigregister", TREENODE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NODETREE", _wrap_new_NODETREE, METH_VARARGS, NULL},
	 { (char *)"NODETREE_AddEntry", _wrap_NODETREE_AddEntry, METH_VARARGS, NULL},
	 { (char *)"NODETREE_Clear", _wrap_NODETREE_Clear, METH_VARARGS, NULL},
	 { (char *)"NODETREE_Reverse", _wrap_NODETREE_Reverse, METH_VARARGS, NULL},
	 { (char *)"NODETREE_Sort", _wrap_NODETREE_Sort, METH_VARARGS, NULL},
	 { (char *)"NODETREE_IsSorted", _wrap_NODETREE_IsSorted, METH_VARARGS, NULL},
	 { (char *)"NODETREE_IsEmpty", _wrap_NODETREE_IsEmpty, METH_VARARGS, NULL},
	 { (char *)"NODETREE_GetEntry", _wrap_NODETREE_GetEntry, METH_VARARGS, NULL},
	 { (char *)"NODETREE_XMLNodeTree", _wrap_NODETREE_XMLNodeTree, METH_VARARGS, NULL},
	 { (char *)"delete_NODETREE", _wrap_delete_NODETREE, METH_VARARGS, NULL},
	 { (char *)"NODETREE_swigregister", NODETREE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RESULT", _wrap_new_RESULT, METH_VARARGS, NULL},
	 { (char *)"RESULT_Write", _wrap_RESULT_Write, METH_VARARGS, NULL},
	 { (char *)"RESULT_Read", _wrap_RESULT_Read, METH_VARARGS, NULL},
	 { (char *)"RESULT_SetIndex", _wrap_RESULT_SetIndex, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetIndex", _wrap_RESULT_GetIndex, METH_VARARGS, NULL},
	 { (char *)"RESULT_SetMdtIndex", _wrap_RESULT_SetMdtIndex, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetMdtIndex", _wrap_RESULT_GetMdtIndex, METH_VARARGS, NULL},
	 { (char *)"RESULT_SetVirtualIndex", _wrap_RESULT_SetVirtualIndex, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetVirtualIndex", _wrap_RESULT_GetVirtualIndex, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetCategory", _wrap_RESULT_GetCategory, METH_VARARGS, NULL},
	 { (char *)"RESULT_SetCategory", _wrap_RESULT_SetCategory, METH_VARARGS, NULL},
	 { (char *)"RESULT_SetKey", _wrap_RESULT_SetKey, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetKey", _wrap_RESULT_GetKey, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetGlobalKey", _wrap_RESULT_GetGlobalKey, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetLanguageCode", _wrap_RESULT_GetLanguageCode, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetCharsetCode", _wrap_RESULT_GetCharsetCode, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetLanguageName", _wrap_RESULT_GetLanguageName, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetCharsetName", _wrap_RESULT_GetCharsetName, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetFullFileName", _wrap_RESULT_GetFullFileName, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetPath", _wrap_RESULT_GetPath, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetFileName", _wrap_RESULT_GetFileName, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetDoctype", _wrap_RESULT_GetDoctype, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetRecordStart", _wrap_RESULT_GetRecordStart, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetRecordEnd", _wrap_RESULT_GetRecordEnd, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetLength", _wrap_RESULT_GetLength, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetRecordSize", _wrap_RESULT_GetRecordSize, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetScore", _wrap_RESULT_GetScore, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetAuxCount", _wrap_RESULT_GetAuxCount, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetHitTotal", _wrap_RESULT_GetHitTotal, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetDate", _wrap_RESULT_GetDate, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetDateModified", _wrap_RESULT_GetDateModified, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetDateCreated", _wrap_RESULT_GetDateCreated, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetHitTable", _wrap_RESULT_GetHitTable, METH_VARARGS, NULL},
	 { (char *)"RESULT_GetRefcount_", _wrap_RESULT_GetRefcount_, METH_VARARGS, NULL},
	 { (char *)"RESULT_XMLHitTable", _wrap_RESULT_XMLHitTable, METH_VARARGS, NULL},
	 { (char *)"delete_RESULT", _wrap_delete_RESULT, METH_VARARGS, NULL},
	 { (char *)"RESULT_swigregister", RESULT_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IRSET", _wrap_new_IRSET, METH_VARARGS, NULL},
	 { (char *)"IRSET_getself", _wrap_IRSET_getself, METH_VARARGS, NULL},
	 { (char *)"IRSET_Write", _wrap_IRSET_Write, METH_VARARGS, NULL},
	 { (char *)"IRSET_Read", _wrap_IRSET_Read, METH_VARARGS, NULL},
	 { (char *)"IRSET_LoadTable", _wrap_IRSET_LoadTable, METH_VARARGS, NULL},
	 { (char *)"IRSET_SaveTable", _wrap_IRSET_SaveTable, METH_VARARGS, NULL},
	 { (char *)"IRSET_SaveSearch", _wrap_IRSET_SaveSearch, METH_VARARGS, NULL},
	 { (char *)"IRSET_LoadSearch", _wrap_IRSET_LoadSearch, METH_VARARGS, NULL},
	 { (char *)"IRSET_GetRset", _wrap_IRSET_GetRset, METH_VARARGS, NULL},
	 { (char *)"IRSET_Fill", _wrap_IRSET_Fill, METH_VARARGS, NULL},
	 { (char *)"IRSET_GetTotalEntries", _wrap_IRSET_GetTotalEntries, METH_VARARGS, NULL},
	 { (char *)"IRSET_GetHitTotal", _wrap_IRSET_GetHitTotal, METH_VARARGS, NULL},
	 { (char *)"IRSET_Join", _wrap_IRSET_Join, METH_VARARGS, NULL},
	 { (char *)"IRSET_Or", _wrap_IRSET_Or, METH_VARARGS, NULL},
	 { (char *)"IRSET_Nor", _wrap_IRSET_Nor, METH_VARARGS, NULL},
	 { (char *)"IRSET_And", _wrap_IRSET_And, METH_VARARGS, NULL},
	 { (char *)"IRSET_Nand", _wrap_IRSET_Nand, METH_VARARGS, NULL},
	 { (char *)"IRSET_AndNot", _wrap_IRSET_AndNot, METH_VARARGS, NULL},
	 { (char *)"IRSET_Xor", _wrap_IRSET_Xor, METH_VARARGS, NULL},
	 { (char *)"IRSET_Near", _wrap_IRSET_Near, METH_VARARGS, NULL},
	 { (char *)"IRSET_Far", _wrap_IRSET_Far, METH_VARARGS, NULL},
	 { (char *)"IRSET_After", _wrap_IRSET_After, METH_VARARGS, NULL},
	 { (char *)"IRSET_Before", _wrap_IRSET_Before, METH_VARARGS, NULL},
	 { (char *)"IRSET_Adj", _wrap_IRSET_Adj, METH_VARARGS, NULL},
	 { (char *)"IRSET_Follows", _wrap_IRSET_Follows, METH_VARARGS, NULL},
	 { (char *)"IRSET_Precedes", _wrap_IRSET_Precedes, METH_VARARGS, NULL},
	 { (char *)"IRSET_Neighbor", _wrap_IRSET_Neighbor, METH_VARARGS, NULL},
	 { (char *)"IRSET_Peer", _wrap_IRSET_Peer, METH_VARARGS, NULL},
	 { (char *)"IRSET_BeforePeer", _wrap_IRSET_BeforePeer, METH_VARARGS, NULL},
	 { (char *)"IRSET_AfterPeer", _wrap_IRSET_AfterPeer, METH_VARARGS, NULL},
	 { (char *)"IRSET_XPeer", _wrap_IRSET_XPeer, METH_VARARGS, NULL},
	 { (char *)"IRSET_Within", _wrap_IRSET_Within, METH_VARARGS, NULL},
	 { (char *)"IRSET_BeforeWithin", _wrap_IRSET_BeforeWithin, METH_VARARGS, NULL},
	 { (char *)"IRSET_AfterWithin", _wrap_IRSET_AfterWithin, METH_VARARGS, NULL},
	 { (char *)"IRSET_XWithin", _wrap_IRSET_XWithin, METH_VARARGS, NULL},
	 { (char *)"IRSET_Inside", _wrap_IRSET_Inside, METH_VARARGS, NULL},
	 { (char *)"IRSET_Inclusive", _wrap_IRSET_Inclusive, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithinXChars", _wrap_IRSET_WithinXChars, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithinXChars_Before", _wrap_IRSET_WithinXChars_Before, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithinXChars_After", _wrap_IRSET_WithinXChars_After, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithinXPercent", _wrap_IRSET_WithinXPercent, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithinXPercent_Before", _wrap_IRSET_WithinXPercent_Before, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithinXPercent_After", _wrap_IRSET_WithinXPercent_After, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithinFile", _wrap_IRSET_WithinFile, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithinDoctype", _wrap_IRSET_WithinDoctype, METH_VARARGS, NULL},
	 { (char *)"IRSET_WithKey", _wrap_IRSET_WithKey, METH_VARARGS, NULL},
	 { (char *)"IRSET_Not", _wrap_IRSET_Not, METH_VARARGS, NULL},
	 { (char *)"IRSET_Sibling", _wrap_IRSET_Sibling, METH_VARARGS, NULL},
	 { (char *)"IRSET_Reduce", _wrap_IRSET_Reduce, METH_VARARGS, NULL},
	 { (char *)"IRSET_Trim", _wrap_IRSET_Trim, METH_VARARGS, NULL},
	 { (char *)"IRSET_HitCount", _wrap_IRSET_HitCount, METH_VARARGS, NULL},
	 { (char *)"IRSET_BoostScore", _wrap_IRSET_BoostScore, METH_VARARGS, NULL},
	 { (char *)"IRSET_ComputeScores", _wrap_IRSET_ComputeScores, METH_VARARGS, NULL},
	 { (char *)"IRSET_SortBy", _wrap_IRSET_SortBy, METH_VARARGS, NULL},
	 { (char *)"IRSET_GetMaxScore", _wrap_IRSET_GetMaxScore, METH_VARARGS, NULL},
	 { (char *)"IRSET_GetMinScore", _wrap_IRSET_GetMinScore, METH_VARARGS, NULL},
	 { (char *)"IRSET_setPrivateSortUserData", _wrap_IRSET_setPrivateSortUserData, METH_VARARGS, NULL},
	 { (char *)"IRSET_getPrivateSortUserData", _wrap_IRSET_getPrivateSortUserData, METH_VARARGS, NULL},
	 { (char *)"IRSET_installSortFunction", _wrap_IRSET_installSortFunction, METH_VARARGS, NULL},
	 { (char *)"delete_IRSET", _wrap_delete_IRSET, METH_VARARGS, NULL},
	 { (char *)"IRSET_swigregister", IRSET_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RSET", _wrap_new_RSET, METH_VARARGS, NULL},
	 { (char *)"RSET_getself", _wrap_RSET_getself, METH_VARARGS, NULL},
	 { (char *)"RSET_Write", _wrap_RSET_Write, METH_VARARGS, NULL},
	 { (char *)"RSET_Read", _wrap_RSET_Read, METH_VARARGS, NULL},
	 { (char *)"RSET_Cat", _wrap_RSET_Cat, METH_VARARGS, NULL},
	 { (char *)"RSET_LoadTable", _wrap_RSET_LoadTable, METH_VARARGS, NULL},
	 { (char *)"RSET_SaveTable", _wrap_RSET_SaveTable, METH_VARARGS, NULL},
	 { (char *)"RSET_GetMaxScore", _wrap_RSET_GetMaxScore, METH_VARARGS, NULL},
	 { (char *)"RSET_GetMinScore", _wrap_RSET_GetMinScore, METH_VARARGS, NULL},
	 { (char *)"RSET_FilterDateRange", _wrap_RSET_FilterDateRange, METH_VARARGS, NULL},
	 { (char *)"RSET_GetEntry", _wrap_RSET_GetEntry, METH_VARARGS, NULL},
	 { (char *)"RSET_GetScaledScore", _wrap_RSET_GetScaledScore, METH_VARARGS, NULL},
	 { (char *)"RSET_GetHitTotal", _wrap_RSET_GetHitTotal, METH_VARARGS, NULL},
	 { (char *)"RSET_Find", _wrap_RSET_Find, METH_VARARGS, NULL},
	 { (char *)"RSET_GetTotalEntries", _wrap_RSET_GetTotalEntries, METH_VARARGS, NULL},
	 { (char *)"RSET_SortBy", _wrap_RSET_SortBy, METH_VARARGS, NULL},
	 { (char *)"RSET_SortByCategoryMagnetism", _wrap_RSET_SortByCategoryMagnetism, METH_VARARGS, NULL},
	 { (char *)"RSET_Reduce", _wrap_RSET_Reduce, METH_VARARGS, NULL},
	 { (char *)"RSET_DropByTerms", _wrap_RSET_DropByTerms, METH_VARARGS, NULL},
	 { (char *)"RSET_DropByScore", _wrap_RSET_DropByScore, METH_VARARGS, NULL},
	 { (char *)"RSET___getitem__", _wrap_RSET___getitem__, METH_VARARGS, NULL},
	 { (char *)"delete_RSET", _wrap_delete_RSET, METH_VARARGS, NULL},
	 { (char *)"RSET_swigregister", RSET_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_INFIX2RPN", _wrap_new_INFIX2RPN, METH_VARARGS, NULL},
	 { (char *)"INFIX2RPN_Parse", _wrap_INFIX2RPN_Parse, METH_VARARGS, NULL},
	 { (char *)"INFIX2RPN_InputParsedOK", _wrap_INFIX2RPN_InputParsedOK, METH_VARARGS, NULL},
	 { (char *)"INFIX2RPN_GetErrorMessage", _wrap_INFIX2RPN_GetErrorMessage, METH_VARARGS, NULL},
	 { (char *)"delete_INFIX2RPN", _wrap_delete_INFIX2RPN, METH_VARARGS, NULL},
	 { (char *)"INFIX2RPN_swigregister", INFIX2RPN_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_THESAURUS", _wrap_new_THESAURUS, METH_VARARGS, NULL},
	 { (char *)"THESAURUS_Compile", _wrap_THESAURUS_Compile, METH_VARARGS, NULL},
	 { (char *)"THESAURUS_SetFileName", _wrap_THESAURUS_SetFileName, METH_VARARGS, NULL},
	 { (char *)"delete_THESAURUS", _wrap_delete_THESAURUS, METH_VARARGS, NULL},
	 { (char *)"THESAURUS_swigregister", THESAURUS_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_OPERATOR", _wrap_new_OPERATOR, METH_VARARGS, NULL},
	 { (char *)"OPERATOR_GetOpType", _wrap_OPERATOR_GetOpType, METH_VARARGS, NULL},
	 { (char *)"OPERATOR_SetOperatorType", _wrap_OPERATOR_SetOperatorType, METH_VARARGS, NULL},
	 { (char *)"OPERATOR_GetOperatorType", _wrap_OPERATOR_GetOperatorType, METH_VARARGS, NULL},
	 { (char *)"OPERATOR_SetOperatorMetric", _wrap_OPERATOR_SetOperatorMetric, METH_VARARGS, NULL},
	 { (char *)"OPERATOR_GetOperatorMetric", _wrap_OPERATOR_GetOperatorMetric, METH_VARARGS, NULL},
	 { (char *)"OPERATOR_SetOperatorString", _wrap_OPERATOR_SetOperatorString, METH_VARARGS, NULL},
	 { (char *)"OPERATOR_GetOperatorString", _wrap_OPERATOR_GetOperatorString, METH_VARARGS, NULL},
	 { (char *)"delete_OPERATOR", _wrap_delete_OPERATOR, METH_VARARGS, NULL},
	 { (char *)"OPERATOR_swigregister", OPERATOR_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SQUERY", _wrap_new_SQUERY, METH_VARARGS, NULL},
	 { (char *)"SQUERY_Write", _wrap_SQUERY_Write, METH_VARARGS, NULL},
	 { (char *)"SQUERY_Read", _wrap_SQUERY_Read, METH_VARARGS, NULL},
	 { (char *)"SQUERY___repr__", _wrap_SQUERY___repr__, METH_VARARGS, NULL},
	 { (char *)"SQUERY_GetTotalTerms", _wrap_SQUERY_GetTotalTerms, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetOperator", _wrap_SQUERY_SetOperator, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetOperatorAndWithin", _wrap_SQUERY_SetOperatorAndWithin, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetOperatorNear", _wrap_SQUERY_SetOperatorNear, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetOperatorPeer", _wrap_SQUERY_SetOperatorPeer, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetAttributes", _wrap_SQUERY_SetAttributes, METH_VARARGS, NULL},
	 { (char *)"SQUERY_isPlainQuery", _wrap_SQUERY_isPlainQuery, METH_VARARGS, NULL},
	 { (char *)"SQUERY_isOpQuery", _wrap_SQUERY_isOpQuery, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetRelevantTerm", _wrap_SQUERY_SetRelevantTerm, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetInfixTerm", _wrap_SQUERY_SetInfixTerm, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetRpnTerm", _wrap_SQUERY_SetRpnTerm, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetQueryTerm", _wrap_SQUERY_SetQueryTerm, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetQueryTermUTF", _wrap_SQUERY_SetQueryTermUTF, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetWordsAnd", _wrap_SQUERY_SetWordsAnd, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetWords", _wrap_SQUERY_SetWords, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetFreeFormWords", _wrap_SQUERY_SetFreeFormWords, METH_VARARGS, NULL},
	 { (char *)"SQUERY_SetFreeFormWordsPhonetic", _wrap_SQUERY_SetFreeFormWordsPhonetic, METH_VARARGS, NULL},
	 { (char *)"SQUERY_LastErrorMessage", _wrap_SQUERY_LastErrorMessage, METH_VARARGS, NULL},
	 { (char *)"SQUERY_GetRpnTerm", _wrap_SQUERY_GetRpnTerm, METH_VARARGS, NULL},
	 { (char *)"SQUERY_Cat", _wrap_SQUERY_Cat, METH_VARARGS, NULL},
	 { (char *)"SQUERY_OpenThesaurus", _wrap_SQUERY_OpenThesaurus, METH_VARARGS, NULL},
	 { (char *)"SQUERY_CloseThesaurus", _wrap_SQUERY_CloseThesaurus, METH_VARARGS, NULL},
	 { (char *)"SQUERY_ExpandQuery", _wrap_SQUERY_ExpandQuery, METH_VARARGS, NULL},
	 { (char *)"delete_SQUERY", _wrap_delete_SQUERY, METH_VARARGS, NULL},
	 { (char *)"SQUERY_swigregister", SQUERY_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_QUERY", _wrap_new_QUERY, METH_VARARGS, NULL},
	 { (char *)"QUERY_SetSQUERY", _wrap_QUERY_SetSQUERY, METH_VARARGS, NULL},
	 { (char *)"QUERY_GetSQUERY", _wrap_QUERY_GetSQUERY, METH_VARARGS, NULL},
	 { (char *)"QUERY_SetNormalizationMethod", _wrap_QUERY_SetNormalizationMethod, METH_VARARGS, NULL},
	 { (char *)"QUERY_GetNormalizationMethod", _wrap_QUERY_GetNormalizationMethod, METH_VARARGS, NULL},
	 { (char *)"QUERY_SetSortBy", _wrap_QUERY_SetSortBy, METH_VARARGS, NULL},
	 { (char *)"QUERY_GetSortBy", _wrap_QUERY_GetSortBy, METH_VARARGS, NULL},
	 { (char *)"QUERY_GetMaximumResults", _wrap_QUERY_GetMaximumResults, METH_VARARGS, NULL},
	 { (char *)"QUERY_SetMaximumResults", _wrap_QUERY_SetMaximumResults, METH_VARARGS, NULL},
	 { (char *)"QUERY_Write", _wrap_QUERY_Write, METH_VARARGS, NULL},
	 { (char *)"QUERY_Read", _wrap_QUERY_Read, METH_VARARGS, NULL},
	 { (char *)"QUERY_asTuple", _wrap_QUERY_asTuple, METH_VARARGS, NULL},
	 { (char *)"delete_QUERY", _wrap_delete_QUERY, METH_VARARGS, NULL},
	 { (char *)"QUERY_swigregister", QUERY_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SRCH_DATE", _wrap_new_SRCH_DATE, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Write", _wrap_SRCH_DATE_Write, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Read", _wrap_SRCH_DATE_Read, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE___repr__", _wrap_SRCH_DATE___repr__, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Plus", _wrap_SRCH_DATE_Plus, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Minus", _wrap_SRCH_DATE_Minus, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PlusNseconds", _wrap_SRCH_DATE_PlusNseconds, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PlusNminutes", _wrap_SRCH_DATE_PlusNminutes, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PlusNhours", _wrap_SRCH_DATE_PlusNhours, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PlusNdays", _wrap_SRCH_DATE_PlusNdays, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PlusNweeks", _wrap_SRCH_DATE_PlusNweeks, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PlusNmonths", _wrap_SRCH_DATE_PlusNmonths, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PlusNyears", _wrap_SRCH_DATE_PlusNyears, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_MinusNseconds", _wrap_SRCH_DATE_MinusNseconds, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_MinusNminutes", _wrap_SRCH_DATE_MinusNminutes, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_MinusNhours", _wrap_SRCH_DATE_MinusNhours, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_MinusNdays", _wrap_SRCH_DATE_MinusNdays, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_MinusNweeks", _wrap_SRCH_DATE_MinusNweeks, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_MinusNmonths", _wrap_SRCH_DATE_MinusNmonths, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_MinusNyears", _wrap_SRCH_DATE_MinusNyears, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Tommorrow", _wrap_SRCH_DATE_Tommorrow, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Yesterday", _wrap_SRCH_DATE_Yesterday, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_NextWeek", _wrap_SRCH_DATE_NextWeek, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_LastWeek", _wrap_SRCH_DATE_LastWeek, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_NextMonth", _wrap_SRCH_DATE_NextMonth, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_LastMonth", _wrap_SRCH_DATE_LastMonth, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_NextYear", _wrap_SRCH_DATE_NextYear, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_LastYear", _wrap_SRCH_DATE_LastYear, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetValue", _wrap_SRCH_DATE_GetValue, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsYearDate", _wrap_SRCH_DATE_IsYearDate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsMonthDate", _wrap_SRCH_DATE_IsMonthDate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsDayDate", _wrap_SRCH_DATE_IsDayDate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsBogusDate", _wrap_SRCH_DATE_IsBogusDate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsValidDate", _wrap_SRCH_DATE_IsValidDate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsLeapYear", _wrap_SRCH_DATE_IsLeapYear, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Ok", _wrap_SRCH_DATE_Ok, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_TrimToMonth", _wrap_SRCH_DATE_TrimToMonth, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_TrimToYear", _wrap_SRCH_DATE_TrimToYear, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetToYearStart", _wrap_SRCH_DATE_SetToYearStart, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetToYearEnd", _wrap_SRCH_DATE_SetToYearEnd, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetToMonthStart", _wrap_SRCH_DATE_SetToMonthStart, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetToMonthEnd", _wrap_SRCH_DATE_SetToMonthEnd, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetToDayStart", _wrap_SRCH_DATE_SetToDayStart, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetToDayEnd", _wrap_SRCH_DATE_SetToDayEnd, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PromoteToMonthStart", _wrap_SRCH_DATE_PromoteToMonthStart, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PromoteToMonthEnd", _wrap_SRCH_DATE_PromoteToMonthEnd, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PromoteToDayStart", _wrap_SRCH_DATE_PromoteToDayStart, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_PromoteToDayEnd", _wrap_SRCH_DATE_PromoteToDayEnd, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetTodaysDate", _wrap_SRCH_DATE_GetTodaysDate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetNow", _wrap_SRCH_DATE_SetNow, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetYear", _wrap_SRCH_DATE_SetYear, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetMonth", _wrap_SRCH_DATE_SetMonth, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetDay", _wrap_SRCH_DATE_SetDay, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Year", _wrap_SRCH_DATE_Year, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Month", _wrap_SRCH_DATE_Month, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Day", _wrap_SRCH_DATE_Day, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_DayOfWeek", _wrap_SRCH_DATE_DayOfWeek, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_DayOfYear", _wrap_SRCH_DATE_DayOfYear, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetFirstDayOfMonth", _wrap_SRCH_DATE_GetFirstDayOfMonth, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetWeekOfMonth", _wrap_SRCH_DATE_GetWeekOfMonth, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_WeekOfYear", _wrap_SRCH_DATE_WeekOfYear, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetDaysInMonth", _wrap_SRCH_DATE_GetDaysInMonth, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetJulianDate", _wrap_SRCH_DATE_GetJulianDate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetTimeSeconds", _wrap_SRCH_DATE_GetTimeSeconds, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetTimeOfFile", _wrap_SRCH_DATE_SetTimeOfFile, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_SetTimeOfFileCreation", _wrap_SRCH_DATE_SetTimeOfFileCreation, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetTimeOfFile", _wrap_SRCH_DATE_GetTimeOfFile, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_GetTimeOfFileCreation", _wrap_SRCH_DATE_GetTimeOfFileCreation, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsBefore", _wrap_SRCH_DATE_IsBefore, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Equals", _wrap_SRCH_DATE_Equals, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsDuring", _wrap_SRCH_DATE_IsDuring, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_IsAfter", _wrap_SRCH_DATE_IsAfter, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_ISOdate", _wrap_SRCH_DATE_ISOdate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_RFCdate", _wrap_SRCH_DATE_RFCdate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_ANSIdate", _wrap_SRCH_DATE_ANSIdate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_LCdate", _wrap_SRCH_DATE_LCdate, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_Strftime", _wrap_SRCH_DATE_Strftime, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE___cmp__", _wrap_SRCH_DATE___cmp__, METH_VARARGS, NULL},
	 { (char *)"delete_SRCH_DATE", _wrap_delete_SRCH_DATE, METH_VARARGS, NULL},
	 { (char *)"SRCH_DATE_swigregister", SRCH_DATE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DATERANGE", _wrap_new_DATERANGE, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_GetStart", _wrap_DATERANGE_GetStart, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_GetEnd", _wrap_DATERANGE_GetEnd, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_SetStart", _wrap_DATERANGE_SetStart, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_SetEnd", _wrap_DATERANGE_SetEnd, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_Ok", _wrap_DATERANGE_Ok, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_Defined", _wrap_DATERANGE_Defined, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_Contains", _wrap_DATERANGE_Contains, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_ISO", _wrap_DATERANGE_ISO, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_RFC", _wrap_DATERANGE_RFC, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_Strftime", _wrap_DATERANGE_Strftime, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_Write", _wrap_DATERANGE_Write, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_Read", _wrap_DATERANGE_Read, METH_VARARGS, NULL},
	 { (char *)"delete_DATERANGE", _wrap_delete_DATERANGE, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_asTuple", _wrap_DATERANGE_asTuple, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_Duration", _wrap_DATERANGE_Duration, METH_VARARGS, NULL},
	 { (char *)"DATERANGE_swigregister", DATERANGE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCANOBJ", _wrap_new_SCANOBJ, METH_VARARGS, NULL},
	 { (char *)"SCANOBJ_Frequency", _wrap_SCANOBJ_Frequency, METH_VARARGS, NULL},
	 { (char *)"SCANOBJ_Term", _wrap_SCANOBJ_Term, METH_VARARGS, NULL},
	 { (char *)"delete_SCANOBJ", _wrap_delete_SCANOBJ, METH_VARARGS, NULL},
	 { (char *)"SCANOBJ_asTuple", _wrap_SCANOBJ_asTuple, METH_VARARGS, NULL},
	 { (char *)"SCANOBJ_swigregister", SCANOBJ_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SCANLIST", _wrap_new_SCANLIST, METH_VARARGS, NULL},
	 { (char *)"SCANLIST_Reverse", _wrap_SCANLIST_Reverse, METH_VARARGS, NULL},
	 { (char *)"SCANLIST_IsEmpty", _wrap_SCANLIST_IsEmpty, METH_VARARGS, NULL},
	 { (char *)"SCANLIST_GetTotalEntries", _wrap_SCANLIST_GetTotalEntries, METH_VARARGS, NULL},
	 { (char *)"SCANLIST_GetEntry", _wrap_SCANLIST_GetEntry, METH_VARARGS, NULL},
	 { (char *)"delete_SCANLIST", _wrap_delete_SCANLIST, METH_VARARGS, NULL},
	 { (char *)"SCANLIST_Get", _wrap_SCANLIST_Get, METH_VARARGS, NULL},
	 { (char *)"SCANLIST___getitem__", _wrap_SCANLIST___getitem__, METH_VARARGS, NULL},
	 { (char *)"SCANLIST_swigregister", SCANLIST_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DOCTYPE_ID", _wrap_new_DOCTYPE_ID, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ID_DocumentType", _wrap_DOCTYPE_ID_DocumentType, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ID_Set", _wrap_DOCTYPE_ID_Set, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ID_Get", _wrap_DOCTYPE_ID_Get, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ID_c_str", _wrap_DOCTYPE_ID_c_str, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ID_IsDefined", _wrap_DOCTYPE_ID_IsDefined, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ID_Equals", _wrap_DOCTYPE_ID_Equals, METH_VARARGS, NULL},
	 { (char *)"delete_DOCTYPE_ID", _wrap_delete_DOCTYPE_ID, METH_VARARGS, NULL},
	 { (char *)"DOCTYPE_ID_swigregister", DOCTYPE_ID_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DOC_ID", _wrap_new_DOC_ID, METH_VARARGS, NULL},
	 { (char *)"DOC_ID_Equals", _wrap_DOC_ID_Equals, METH_VARARGS, NULL},
	 { (char *)"DOC_ID_Compare", _wrap_DOC_ID_Compare, METH_VARARGS, NULL},
	 { (char *)"DOC_ID_GlobalKey", _wrap_DOC_ID_GlobalKey, METH_VARARGS, NULL},
	 { (char *)"delete_DOC_ID", _wrap_delete_DOC_ID, METH_VARARGS, NULL},
	 { (char *)"DOC_ID_swigregister", DOC_ID_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RECORD", _wrap_new_RECORD, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetKey", _wrap_RECORD_SetKey, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetKey", _wrap_RECORD_GetKey, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetPath", _wrap_RECORD_SetPath, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetPath", _wrap_RECORD_GetPath, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetFileName", _wrap_RECORD_SetFileName, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetFileName", _wrap_RECORD_GetFileName, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetFullFileName", _wrap_RECORD_SetFullFileName, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetFullFileName", _wrap_RECORD_GetFullFileName, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetRecordStart", _wrap_RECORD_SetRecordStart, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetRecordStart", _wrap_RECORD_GetRecordStart, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetRecordEnd", _wrap_RECORD_SetRecordEnd, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetRecordEnd", _wrap_RECORD_GetRecordEnd, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetDocumentType", _wrap_RECORD_SetDocumentType, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetDocumentType", _wrap_RECORD_GetDocumentType, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetLocale", _wrap_RECORD_GetLocale, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetLocale", _wrap_RECORD_SetLocale, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetLanguage", _wrap_RECORD_SetLanguage, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetCharset", _wrap_RECORD_SetCharset, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetDate", _wrap_RECORD_GetDate, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetDate", _wrap_RECORD_SetDate, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetDateModified", _wrap_RECORD_SetDateModified, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetDateModified", _wrap_RECORD_GetDateModified, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetDateCreated", _wrap_RECORD_SetDateCreated, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetDateCreated", _wrap_RECORD_GetDateCreated, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetPriority", _wrap_RECORD_GetPriority, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetPriority", _wrap_RECORD_SetPriority, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetCategory", _wrap_RECORD_GetCategory, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetCategory", _wrap_RECORD_SetCategory, METH_VARARGS, NULL},
	 { (char *)"RECORD___len__", _wrap_RECORD___len__, METH_VARARGS, NULL},
	 { (char *)"RECORD_SetDateExpires", _wrap_RECORD_SetDateExpires, METH_VARARGS, NULL},
	 { (char *)"RECORD_GetDateExpires", _wrap_RECORD_GetDateExpires, METH_VARARGS, NULL},
	 { (char *)"RECORD_TTL", _wrap_RECORD_TTL, METH_VARARGS, NULL},
	 { (char *)"delete_RECORD", _wrap_delete_RECORD, METH_VARARGS, NULL},
	 { (char *)"RECORD_swigregister", RECORD_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_FCACHE", _wrap_new_FCACHE, METH_VARARGS, NULL},
	 { (char *)"FCACHE_Ok", _wrap_FCACHE_Ok, METH_VARARGS, NULL},
	 { (char *)"FCACHE_ValidateInField", _wrap_FCACHE_ValidateInField, METH_VARARGS, NULL},
	 { (char *)"FCACHE_GetTotal", _wrap_FCACHE_GetTotal, METH_VARARGS, NULL},
	 { (char *)"FCACHE_SetFieldName", _wrap_FCACHE_SetFieldName, METH_VARARGS, NULL},
	 { (char *)"FCACHE_GetFieldName", _wrap_FCACHE_GetFieldName, METH_VARARGS, NULL},
	 { (char *)"delete_FCACHE", _wrap_delete_FCACHE, METH_VARARGS, NULL},
	 { (char *)"FCACHE_swigregister", FCACHE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IDB", _wrap_new_IDB, METH_VARARGS, NULL},
	 { (char *)"IDB_Open", _wrap_IDB_Open, METH_VARARGS, NULL},
	 { (char *)"IDB_Close", _wrap_IDB_Close, METH_VARARGS, NULL},
	 { (char *)"IDB_SetDebugMode", _wrap_IDB_SetDebugMode, METH_VARARGS, NULL},
	 { (char *)"IDB_FirstKey", _wrap_IDB_FirstKey, METH_VARARGS, NULL},
	 { (char *)"IDB_LastKey", _wrap_IDB_LastKey, METH_VARARGS, NULL},
	 { (char *)"IDB_NextKey", _wrap_IDB_NextKey, METH_VARARGS, NULL},
	 { (char *)"IDB_PrevKey", _wrap_IDB_PrevKey, METH_VARARGS, NULL},
	 { (char *)"IDB_SetVolume", _wrap_IDB_SetVolume, METH_VARARGS, NULL},
	 { (char *)"IDB_GetVolume", _wrap_IDB_GetVolume, METH_VARARGS, NULL},
	 { (char *)"IDB_SetFindConcatWords", _wrap_IDB_SetFindConcatWords, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFindConcatWords", _wrap_IDB_GetFindConcatWords, METH_VARARGS, NULL},
	 { (char *)"IDB_SetSegment", _wrap_IDB_SetSegment, METH_VARARGS, NULL},
	 { (char *)"IDB_GetSegmentName", _wrap_IDB_GetSegmentName, METH_VARARGS, NULL},
	 { (char *)"IDB_Segment", _wrap_IDB_Segment, METH_VARARGS, NULL},
	 { (char *)"IDB_setUseRelativePaths", _wrap_IDB_setUseRelativePaths, METH_VARARGS, NULL},
	 { (char *)"IDB_SetWorkingDirectory", _wrap_IDB_SetWorkingDirectory, METH_VARARGS, NULL},
	 { (char *)"IDB_ClearWorkingDirectoryEntry", _wrap_IDB_ClearWorkingDirectoryEntry, METH_VARARGS, NULL},
	 { (char *)"IDB_SetErrorCode", _wrap_IDB_SetErrorCode, METH_VARARGS, NULL},
	 { (char *)"IDB_GetErrorCode", _wrap_IDB_GetErrorCode, METH_VARARGS, NULL},
	 { (char *)"IDB_ErrorMessage", _wrap_IDB_ErrorMessage, METH_VARARGS, NULL},
	 { (char *)"IDB_UsePersistantCache", _wrap_IDB_UsePersistantCache, METH_VARARGS, NULL},
	 { (char *)"IDB_PersistantCacheName", _wrap_IDB_PersistantCacheName, METH_VARARGS, NULL},
	 { (char *)"IDB_GetMainFpt", _wrap_IDB_GetMainFpt, METH_VARARGS, NULL},
	 { (char *)"IDB_setAutoDeleteExpired", _wrap_IDB_setAutoDeleteExpired, METH_VARARGS, NULL},
	 { (char *)"IDB_FieldExists", _wrap_IDB_FieldExists, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFieldDefinitionList", _wrap_IDB_GetFieldDefinitionList, METH_VARARGS, NULL},
	 { (char *)"IDB_GetDocumentInfo", _wrap_IDB_GetDocumentInfo, METH_VARARGS, NULL},
	 { (char *)"IDB_GetAllDocTypes", _wrap_IDB_GetAllDocTypes, METH_VARARGS, NULL},
	 { (char *)"IDB_GetMainMdt", _wrap_IDB_GetMainMdt, METH_VARARGS, NULL},
	 { (char *)"IDB_DateCreated", _wrap_IDB_DateCreated, METH_VARARGS, NULL},
	 { (char *)"IDB_DateLastModified", _wrap_IDB_DateLastModified, METH_VARARGS, NULL},
	 { (char *)"IDB_SetCommonWordsThreshold", _wrap_IDB_SetCommonWordsThreshold, METH_VARARGS, NULL},
	 { (char *)"IDB_CreateCentroid", _wrap_IDB_CreateCentroid, METH_VARARGS, NULL},
	 { (char *)"IDB_SetLocale", _wrap_IDB_SetLocale, METH_VARARGS, NULL},
	 { (char *)"IDB_IsDbCompatible", _wrap_IDB_IsDbCompatible, METH_VARARGS, NULL},
	 { (char *)"IDB_IsEmpty", _wrap_IDB_IsEmpty, METH_VARARGS, NULL},
	 { (char *)"IDB_Ok", _wrap_IDB_Ok, METH_VARARGS, NULL},
	 { (char *)"IDB_ffGC", _wrap_IDB_ffGC, METH_VARARGS, NULL},
	 { (char *)"IDB_SetMergeStatus", _wrap_IDB_SetMergeStatus, METH_VARARGS, NULL},
	 { (char *)"IDB_SetDbState", _wrap_IDB_SetDbState, METH_VARARGS, NULL},
	 { (char *)"IDB_GetDbState", _wrap_IDB_GetDbState, METH_VARARGS, NULL},
	 { (char *)"IDB_SetIndexBoostFactor", _wrap_IDB_SetIndexBoostFactor, METH_VARARGS, NULL},
	 { (char *)"IDB_GetIndexBoostFactor", _wrap_IDB_GetIndexBoostFactor, METH_VARARGS, NULL},
	 { (char *)"IDB_SetFreshnessBoostFactor", _wrap_IDB_SetFreshnessBoostFactor, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFreshnessBoostFactor", _wrap_IDB_GetFreshnessBoostFactor, METH_VARARGS, NULL},
	 { (char *)"IDB_SetLongevityBoostFattor", _wrap_IDB_SetLongevityBoostFattor, METH_VARARGS, NULL},
	 { (char *)"IDB_GetLongevityBoostFactor", _wrap_IDB_GetLongevityBoostFactor, METH_VARARGS, NULL},
	 { (char *)"IDB_SetFreshnessBaseDateLine", _wrap_IDB_SetFreshnessBaseDateLine, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFreshnessBaseDateLine", _wrap_IDB_GetFreshnessBaseDateLine, METH_VARARGS, NULL},
	 { (char *)"IDB_SetDefaultDbSearchCutoff", _wrap_IDB_SetDefaultDbSearchCutoff, METH_VARARGS, NULL},
	 { (char *)"IDB_SetDbSearchCutoff", _wrap_IDB_SetDbSearchCutoff, METH_VARARGS, NULL},
	 { (char *)"IDB_GetDbSearchCutoff", _wrap_IDB_GetDbSearchCutoff, METH_VARARGS, NULL},
	 { (char *)"IDB_SetDbSearchFuel", _wrap_IDB_SetDbSearchFuel, METH_VARARGS, NULL},
	 { (char *)"IDB_SetDbSearchCacheSize", _wrap_IDB_SetDbSearchCacheSize, METH_VARARGS, NULL},
	 { (char *)"IDB_SetDefaultPriorityFactor", _wrap_IDB_SetDefaultPriorityFactor, METH_VARARGS, NULL},
	 { (char *)"IDB_SetPriorityFactor", _wrap_IDB_SetPriorityFactor, METH_VARARGS, NULL},
	 { (char *)"IDB_GetPriorityFactor", _wrap_IDB_GetPriorityFactor, METH_VARARGS, NULL},
	 { (char *)"IDB_SetDbSisLimit", _wrap_IDB_SetDbSisLimit, METH_VARARGS, NULL},
	 { (char *)"IDB_SetTitle", _wrap_IDB_SetTitle, METH_VARARGS, NULL},
	 { (char *)"IDB_GetTitle", _wrap_IDB_GetTitle, METH_VARARGS, NULL},
	 { (char *)"IDB_SetComments", _wrap_IDB_SetComments, METH_VARARGS, NULL},
	 { (char *)"IDB_GetComments", _wrap_IDB_GetComments, METH_VARARGS, NULL},
	 { (char *)"IDB_SetCopyright", _wrap_IDB_SetCopyright, METH_VARARGS, NULL},
	 { (char *)"IDB_GetCopyright", _wrap_IDB_GetCopyright, METH_VARARGS, NULL},
	 { (char *)"IDB_SetMaintainer", _wrap_IDB_SetMaintainer, METH_VARARGS, NULL},
	 { (char *)"IDB_GetMaintainer", _wrap_IDB_GetMaintainer, METH_VARARGS, NULL},
	 { (char *)"IDB_SetGlobalDoctype", _wrap_IDB_SetGlobalDoctype, METH_VARARGS, NULL},
	 { (char *)"IDB_SetIndexingMemory", _wrap_IDB_SetIndexingMemory, METH_VARARGS, NULL},
	 { (char *)"IDB_GetIndexingMemory", _wrap_IDB_GetIndexingMemory, METH_VARARGS, NULL},
	 { (char *)"IDB_SetStoplist", _wrap_IDB_SetStoplist, METH_VARARGS, NULL},
	 { (char *)"IDB_SetGlobalStoplist", _wrap_IDB_SetGlobalStoplist, METH_VARARGS, NULL},
	 { (char *)"IDB_GetGlobalStoplist", _wrap_IDB_GetGlobalStoplist, METH_VARARGS, NULL},
	 { (char *)"IDB_GetTotalWords", _wrap_IDB_GetTotalWords, METH_VARARGS, NULL},
	 { (char *)"IDB_GetTotalUniqueWords", _wrap_IDB_GetTotalUniqueWords, METH_VARARGS, NULL},
	 { (char *)"IDB_GetTotalRecords", _wrap_IDB_GetTotalRecords, METH_VARARGS, NULL},
	 { (char *)"IDB_GetTotalDocumentsDeleted", _wrap_IDB_GetTotalDocumentsDeleted, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFieldCache", _wrap_IDB_GetFieldCache, METH_VARARGS, NULL},
	 { (char *)"IDB_GetPeerFc", _wrap_IDB_GetPeerFc, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFieldName", _wrap_IDB_GetFieldName, METH_VARARGS, NULL},
	 { (char *)"IDB_GetPeerNode", _wrap_IDB_GetPeerNode, METH_VARARGS, NULL},
	 { (char *)"IDB_GetPeerContent", _wrap_IDB_GetPeerContent, METH_VARARGS, NULL},
	 { (char *)"IDB_GetPeerContentXMLFragement", _wrap_IDB_GetPeerContentXMLFragement, METH_VARARGS, NULL},
	 { (char *)"IDB_GetNodeTree", _wrap_IDB_GetNodeTree, METH_VARARGS, NULL},
	 { (char *)"IDB_KillCache", _wrap_IDB_KillCache, METH_VARARGS, NULL},
	 { (char *)"IDB_FillHeadlineCache", _wrap_IDB_FillHeadlineCache, METH_VARARGS, NULL},
	 { (char *)"IDB_IsSystemFile", _wrap_IDB_IsSystemFile, METH_VARARGS, NULL},
	 { (char *)"IDB_SetServerName", _wrap_IDB_SetServerName, METH_VARARGS, NULL},
	 { (char *)"IDB_GetServerName", _wrap_IDB_GetServerName, METH_VARARGS, NULL},
	 { (char *)"IDB_MergeIndexFiles", _wrap_IDB_MergeIndexFiles, METH_VARARGS, NULL},
	 { (char *)"IDB_CollapseIndexFiles", _wrap_IDB_CollapseIndexFiles, METH_VARARGS, NULL},
	 { (char *)"IDB_DeleteExpired", _wrap_IDB_DeleteExpired, METH_VARARGS, NULL},
	 { (char *)"IDB_KillAll", _wrap_IDB_KillAll, METH_VARARGS, NULL},
	 { (char *)"IDB_GetVersionID", _wrap_IDB_GetVersionID, METH_VARARGS, NULL},
	 { (char *)"IDB_ParseRecords", _wrap_IDB_ParseRecords, METH_VARARGS, NULL},
	 { (char *)"IDB_Index", _wrap_IDB_Index, METH_VARARGS, NULL},
	 { (char *)"IDB_Index1", _wrap_IDB_Index1, METH_VARARGS, NULL},
	 { (char *)"IDB_Index2", _wrap_IDB_Index2, METH_VARARGS, NULL},
	 { (char *)"IDB_AddRecord", _wrap_IDB_AddRecord, METH_VARARGS, NULL},
	 { (char *)"IDB_AppendToIndex", _wrap_IDB_AppendToIndex, METH_VARARGS, NULL},
	 { (char *)"IDB_AppendFileToIndex", _wrap_IDB_AppendFileToIndex, METH_VARARGS, NULL},
	 { (char *)"IDB_IsStopWord", _wrap_IDB_IsStopWord, METH_VARARGS, NULL},
	 { (char *)"IDB_MdtLookupKey", _wrap_IDB_MdtLookupKey, METH_VARARGS, NULL},
	 { (char *)"IDB_GetDocumentDeleted", _wrap_IDB_GetDocumentDeleted, METH_VARARGS, NULL},
	 { (char *)"IDB_DeleteByIndex", _wrap_IDB_DeleteByIndex, METH_VARARGS, NULL},
	 { (char *)"IDB_DeleteByKey", _wrap_IDB_DeleteByKey, METH_VARARGS, NULL},
	 { (char *)"IDB_UndeleteByIndex", _wrap_IDB_UndeleteByIndex, METH_VARARGS, NULL},
	 { (char *)"IDB_UndeleteByKey", _wrap_IDB_UndeleteByKey, METH_VARARGS, NULL},
	 { (char *)"IDB_SetOverride", _wrap_IDB_SetOverride, METH_VARARGS, NULL},
	 { (char *)"IDB_GetOverride", _wrap_IDB_GetOverride, METH_VARARGS, NULL},
	 { (char *)"IDB_CleanupDb", _wrap_IDB_CleanupDb, METH_VARARGS, NULL},
	 { (char *)"IDB_GetLocks", _wrap_IDB_GetLocks, METH_VARARGS, NULL},
	 { (char *)"IDB_Scan", _wrap_IDB_Scan, METH_VARARGS, NULL},
	 { (char *)"IDB_ScanGlob", _wrap_IDB_ScanGlob, METH_VARARGS, NULL},
	 { (char *)"IDB_ScanSearch", _wrap_IDB_ScanSearch, METH_VARARGS, NULL},
	 { (char *)"IDB_BeginRsetPresent", _wrap_IDB_BeginRsetPresent, METH_VARARGS, NULL},
	 { (char *)"IDB_EndRsetPresent", _wrap_IDB_EndRsetPresent, METH_VARARGS, NULL},
	 { (char *)"IDB_BeforeSearching", _wrap_IDB_BeforeSearching, METH_VARARGS, NULL},
	 { (char *)"IDB_AfterSearching", _wrap_IDB_AfterSearching, METH_VARARGS, NULL},
	 { (char *)"IDB_BeforeIndexing", _wrap_IDB_BeforeIndexing, METH_VARARGS, NULL},
	 { (char *)"IDB_AfterIndexing", _wrap_IDB_AfterIndexing, METH_VARARGS, NULL},
	 { (char *)"IDB_Search", _wrap_IDB_Search, METH_VARARGS, NULL},
	 { (char *)"IDB_SearchSmart", _wrap_IDB_SearchSmart, METH_VARARGS, NULL},
	 { (char *)"IDB_VSearch", _wrap_IDB_VSearch, METH_VARARGS, NULL},
	 { (char *)"IDB_VSearchSmart", _wrap_IDB_VSearchSmart, METH_VARARGS, NULL},
	 { (char *)"IDB_Headline", _wrap_IDB_Headline, METH_VARARGS, NULL},
	 { (char *)"IDB_Summary", _wrap_IDB_Summary, METH_VARARGS, NULL},
	 { (char *)"IDB_Context", _wrap_IDB_Context, METH_VARARGS, NULL},
	 { (char *)"IDB_NthContext", _wrap_IDB_NthContext, METH_VARARGS, NULL},
	 { (char *)"IDB_URL", _wrap_IDB_URL, METH_VARARGS, NULL},
	 { (char *)"IDB_HighlightedRecord", _wrap_IDB_HighlightedRecord, METH_VARARGS, NULL},
	 { (char *)"IDB_DocHighlight", _wrap_IDB_DocHighlight, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFieldData", _wrap_IDB_GetFieldData, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFieldContents", _wrap_IDB_GetFieldContents, METH_VARARGS, NULL},
	 { (char *)"IDB_Present", _wrap_IDB_Present, METH_VARARGS, NULL},
	 { (char *)"IDB_DocPresent", _wrap_IDB_DocPresent, METH_VARARGS, NULL},
	 { (char *)"IDB_GetXMLHighlightRecordFormat", _wrap_IDB_GetXMLHighlightRecordFormat, METH_VARARGS, NULL},
	 { (char *)"IDB_GetNodeOffsetCount", _wrap_IDB_GetNodeOffsetCount, METH_VARARGS, NULL},
	 { (char *)"IDB_GetDescendentsFCT", _wrap_IDB_GetDescendentsFCT, METH_VARARGS, NULL},
	 { (char *)"IDB_GetAncestorFc", _wrap_IDB_GetAncestorFc, METH_VARARGS, NULL},
	 { (char *)"IDB_GetAncestorContent", _wrap_IDB_GetAncestorContent, METH_VARARGS, NULL},
	 { (char *)"IDB_GetDescendentsContent", _wrap_IDB_GetDescendentsContent, METH_VARARGS, NULL},
	 { (char *)"IDB_KeyLookup", _wrap_IDB_KeyLookup, METH_VARARGS, NULL},
	 { (char *)"IDB_KeyExists", _wrap_IDB_KeyExists, METH_VARARGS, NULL},
	 { (char *)"IDB_GetFields", _wrap_IDB_GetFields, METH_VARARGS, NULL},
	 { (char *)"delete_IDB", _wrap_delete_IDB, METH_VARARGS, NULL},
	 { (char *)"IDB_swigregister", IDB_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_VIDB", _wrap_new_VIDB, METH_VARARGS, NULL},
	 { (char *)"delete_VIDB", _wrap_delete_VIDB, METH_VARARGS, NULL},
	 { (char *)"VIDB_getself", _wrap_VIDB_getself, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetIDB", _wrap_VIDB_GetIDB, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetIDBCount", _wrap_VIDB_GetIDBCount, METH_VARARGS, NULL},
	 { (char *)"VIDB_IsDbVirtual", _wrap_VIDB_IsDbVirtual, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetMainMdt", _wrap_VIDB_GetMainMdt, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetFieldCache", _wrap_VIDB_GetFieldCache, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetDocTypeOptions", _wrap_VIDB_GetDocTypeOptions, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetDbFileStem", _wrap_VIDB_GetDbFileStem, METH_VARARGS, NULL},
	 { (char *)"VIDB_XMLHitTable", _wrap_VIDB_XMLHitTable, METH_VARARGS, NULL},
	 { (char *)"VIDB_XMLNodeTree", _wrap_VIDB_XMLNodeTree, METH_VARARGS, NULL},
	 { (char *)"VIDB_SetPriorityFactor", _wrap_VIDB_SetPriorityFactor, METH_VARARGS, NULL},
	 { (char *)"VIDB_SetDbSearchCutoff", _wrap_VIDB_SetDbSearchCutoff, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetDbSearchCutoff", _wrap_VIDB_GetDbSearchCutoff, METH_VARARGS, NULL},
	 { (char *)"VIDB_SetDbSearchFuel", _wrap_VIDB_SetDbSearchFuel, METH_VARARGS, NULL},
	 { (char *)"VIDB_SetDbSearchCacheSize", _wrap_VIDB_SetDbSearchCacheSize, METH_VARARGS, NULL},
	 { (char *)"VIDB_BeforeSearching", _wrap_VIDB_BeforeSearching, METH_VARARGS, NULL},
	 { (char *)"VIDB_SetDebugMode", _wrap_VIDB_SetDebugMode, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetErrorCode", _wrap_VIDB_GetErrorCode, METH_VARARGS, NULL},
	 { (char *)"VIDB_ErrorMessage", _wrap_VIDB_ErrorMessage, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetTotalWords", _wrap_VIDB_GetTotalWords, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetTotalUniqueWords", _wrap_VIDB_GetTotalUniqueWords, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetTotalRecords", _wrap_VIDB_GetTotalRecords, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetTotalDocumentsDeleted", _wrap_VIDB_GetTotalDocumentsDeleted, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetTotalDatabases", _wrap_VIDB_GetTotalDatabases, METH_VARARGS, NULL},
	 { (char *)"VIDB_IsDbCompatible", _wrap_VIDB_IsDbCompatible, METH_VARARGS, NULL},
	 { (char *)"VIDB_IsEmpty", _wrap_VIDB_IsEmpty, METH_VARARGS, NULL},
	 { (char *)"VIDB_Ok", _wrap_VIDB_Ok, METH_VARARGS, NULL},
	 { (char *)"VIDB_SetCommonWordsThreshold", _wrap_VIDB_SetCommonWordsThreshold, METH_VARARGS, NULL},
	 { (char *)"VIDB_SetStoplist", _wrap_VIDB_SetStoplist, METH_VARARGS, NULL},
	 { (char *)"VIDB_IsStopWord", _wrap_VIDB_IsStopWord, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetTitle", _wrap_VIDB_GetTitle, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetComments", _wrap_VIDB_GetComments, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetMaintainer", _wrap_VIDB_GetMaintainer, METH_VARARGS, NULL},
	 { (char *)"VIDB_SearchSmart", _wrap_VIDB_SearchSmart, METH_VARARGS, NULL},
	 { (char *)"VIDB_Search", _wrap_VIDB_Search, METH_VARARGS, NULL},
	 { (char *)"VIDB_VSearch", _wrap_VIDB_VSearch, METH_VARARGS, NULL},
	 { (char *)"VIDB_VSearchSmart", _wrap_VIDB_VSearchSmart, METH_VARARGS, NULL},
	 { (char *)"VIDB_Scan", _wrap_VIDB_Scan, METH_VARARGS, NULL},
	 { (char *)"VIDB_ScanGlob", _wrap_VIDB_ScanGlob, METH_VARARGS, NULL},
	 { (char *)"VIDB_ScanSearch", _wrap_VIDB_ScanSearch, METH_VARARGS, NULL},
	 { (char *)"VIDB_BeginRsetPresent", _wrap_VIDB_BeginRsetPresent, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetAncestorContent", _wrap_VIDB_GetAncestorContent, METH_VARARGS, NULL},
	 { (char *)"VIDB_Headline", _wrap_VIDB_Headline, METH_VARARGS, NULL},
	 { (char *)"VIDB_Summary", _wrap_VIDB_Summary, METH_VARARGS, NULL},
	 { (char *)"VIDB_Context", _wrap_VIDB_Context, METH_VARARGS, NULL},
	 { (char *)"VIDB_NthContext", _wrap_VIDB_NthContext, METH_VARARGS, NULL},
	 { (char *)"VIDB_URL", _wrap_VIDB_URL, METH_VARARGS, NULL},
	 { (char *)"VIDB_HighlightedRecord", _wrap_VIDB_HighlightedRecord, METH_VARARGS, NULL},
	 { (char *)"VIDB_DocHighlight", _wrap_VIDB_DocHighlight, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetFieldData", _wrap_VIDB_GetFieldData, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetFieldContents", _wrap_VIDB_GetFieldContents, METH_VARARGS, NULL},
	 { (char *)"VIDB_Present", _wrap_VIDB_Present, METH_VARARGS, NULL},
	 { (char *)"VIDB_DocPresent", _wrap_VIDB_DocPresent, METH_VARARGS, NULL},
	 { (char *)"VIDB_EndRsetPresent", _wrap_VIDB_EndRsetPresent, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetGlobalDocType", _wrap_VIDB_GetGlobalDocType, METH_VARARGS, NULL},
	 { (char *)"VIDB_KeyLookup", _wrap_VIDB_KeyLookup, METH_VARARGS, NULL},
	 { (char *)"VIDB_KeyExists", _wrap_VIDB_KeyExists, METH_VARARGS, NULL},
	 { (char *)"VIDB_SetDateRange", _wrap_VIDB_SetDateRange, METH_VARARGS, NULL},
	 { (char *)"VIDB_ProfileGetString", _wrap_VIDB_ProfileGetString, METH_VARARGS, NULL},
	 { (char *)"VIDB_FirstKey", _wrap_VIDB_FirstKey, METH_VARARGS, NULL},
	 { (char *)"VIDB_LastKey", _wrap_VIDB_LastKey, METH_VARARGS, NULL},
	 { (char *)"VIDB_NextKey", _wrap_VIDB_NextKey, METH_VARARGS, NULL},
	 { (char *)"VIDB_PrevKey", _wrap_VIDB_PrevKey, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetDocumentInfo", _wrap_VIDB_GetDocumentInfo, METH_VARARGS, NULL},
	 { (char *)"VIDB_DateCreated", _wrap_VIDB_DateCreated, METH_VARARGS, NULL},
	 { (char *)"VIDB_DateLastModified", _wrap_VIDB_DateLastModified, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetAllDocTypes", _wrap_VIDB_GetAllDocTypes, METH_VARARGS, NULL},
	 { (char *)"VIDB_ValidateDocType", _wrap_VIDB_ValidateDocType, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetVersionID", _wrap_VIDB_GetVersionID, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetLocks", _wrap_VIDB_GetLocks, METH_VARARGS, NULL},
	 { (char *)"VIDB_GetFields", _wrap_VIDB_GetFields, METH_VARARGS, NULL},
	 { (char *)"VIDB_swigregister", VIDB_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LANGUAGE", _wrap_new_LANGUAGE, METH_VARARGS, NULL},
	 { (char *)"LANGUAGE_Name", _wrap_LANGUAGE_Name, METH_VARARGS, NULL},
	 { (char *)"LANGUAGE_Code", _wrap_LANGUAGE_Code, METH_VARARGS, NULL},
	 { (char *)"delete_LANGUAGE", _wrap_delete_LANGUAGE, METH_VARARGS, NULL},
	 { (char *)"LANGUAGE_swigregister", LANGUAGE_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_CHARSET", _wrap_new_CHARSET, METH_VARARGS, NULL},
	 { (char *)"CHARSET_Ok", _wrap_CHARSET_Ok, METH_VARARGS, NULL},
	 { (char *)"CHARSET_Name", _wrap_CHARSET_Name, METH_VARARGS, NULL},
	 { (char *)"CHARSET_HtmlCat", _wrap_CHARSET_HtmlCat, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ToLower", _wrap_CHARSET_ToLower, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ToUpper", _wrap_CHARSET_ToUpper, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isalpha", _wrap_CHARSET_ib_isalpha, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isupper", _wrap_CHARSET_ib_isupper, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_islower", _wrap_CHARSET_ib_islower, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isdigit", _wrap_CHARSET_ib_isdigit, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isxdigit", _wrap_CHARSET_ib_isxdigit, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isalnum", _wrap_CHARSET_ib_isalnum, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isspace", _wrap_CHARSET_ib_isspace, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_ispunct", _wrap_CHARSET_ib_ispunct, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isprint", _wrap_CHARSET_ib_isprint, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isgraph", _wrap_CHARSET_ib_isgraph, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_iscntrl", _wrap_CHARSET_ib_iscntrl, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_iswhite", _wrap_CHARSET_ib_iswhite, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_isascii", _wrap_CHARSET_ib_isascii, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_islatin1", _wrap_CHARSET_ib_islatin1, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_toupper", _wrap_CHARSET_ib_toupper, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_tolower", _wrap_CHARSET_ib_tolower, METH_VARARGS, NULL},
	 { (char *)"CHARSET_ib_toascii", _wrap_CHARSET_ib_toascii, METH_VARARGS, NULL},
	 { (char *)"CHARSET_isTermChr", _wrap_CHARSET_isTermChr, METH_VARARGS, NULL},
	 { (char *)"CHARSET_isWordSep", _wrap_CHARSET_isWordSep, METH_VARARGS, NULL},
	 { (char *)"CHARSET_isTermWhite", _wrap_CHARSET_isTermWhite, METH_VARARGS, NULL},
	 { (char *)"CHARSET_UCS", _wrap_CHARSET_UCS, METH_VARARGS, NULL},
	 { (char *)"delete_CHARSET", _wrap_delete_CHARSET, METH_VARARGS, NULL},
	 { (char *)"CHARSET_swigregister", CHARSET_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LOCALE", _wrap_new_LOCALE, METH_VARARGS, NULL},
	 { (char *)"delete_LOCALE", _wrap_delete_LOCALE, METH_VARARGS, NULL},
	 { (char *)"LOCALE_SetLanguage", _wrap_LOCALE_SetLanguage, METH_VARARGS, NULL},
	 { (char *)"LOCALE_SetCharset", _wrap_LOCALE_SetCharset, METH_VARARGS, NULL},
	 { (char *)"LOCALE_GetLanguageCode", _wrap_LOCALE_GetLanguageCode, METH_VARARGS, NULL},
	 { (char *)"LOCALE_GetLanguageName", _wrap_LOCALE_GetLanguageName, METH_VARARGS, NULL},
	 { (char *)"LOCALE_GetCharsetCode", _wrap_LOCALE_GetCharsetCode, METH_VARARGS, NULL},
	 { (char *)"LOCALE_GetCharsetName", _wrap_LOCALE_GetCharsetName, METH_VARARGS, NULL},
	 { (char *)"LOCALE_Charset", _wrap_LOCALE_Charset, METH_VARARGS, NULL},
	 { (char *)"LOCALE_Language", _wrap_LOCALE_Language, METH_VARARGS, NULL},
	 { (char *)"LOCALE_Name", _wrap_LOCALE_Name, METH_VARARGS, NULL},
	 { (char *)"LOCALE_Id", _wrap_LOCALE_Id, METH_VARARGS, NULL},
	 { (char *)"LOCALE_swigregister", LOCALE_swigregister, METH_VARARGS, NULL},
	 { (char *)"ResolveConfigPath", _wrap_ResolveConfigPath, METH_VARARGS, NULL},
	 { (char *)"ResolveBinPath", _wrap_ResolveBinPath, METH_VARARGS, NULL},
	 { (char *)"ExpandFileSpec", _wrap_ExpandFileSpec, METH_VARARGS, NULL},
	 { (char *)"set_syslog", _wrap_set_syslog, METH_VARARGS, NULL},
	 { (char *)"log_init", _wrap_log_init, METH_VARARGS, NULL},
	 { (char *)"log_message", _wrap_log_message, METH_VARARGS, NULL},
	 { (char *)"new_INODE", _wrap_new_INODE, METH_VARARGS, NULL},
	 { (char *)"INODE_Clear", _wrap_INODE_Clear, METH_VARARGS, NULL},
	 { (char *)"INODE_Set", _wrap_INODE_Set, METH_VARARGS, NULL},
	 { (char *)"INODE_Key", _wrap_INODE_Key, METH_VARARGS, NULL},
	 { (char *)"INODE_isLinked", _wrap_INODE_isLinked, METH_VARARGS, NULL},
	 { (char *)"INODE_isDangling", _wrap_INODE_isDangling, METH_VARARGS, NULL},
	 { (char *)"INODE_inode", _wrap_INODE_inode, METH_VARARGS, NULL},
	 { (char *)"INODE_device", _wrap_INODE_device, METH_VARARGS, NULL},
	 { (char *)"delete_INODE", _wrap_delete_INODE, METH_VARARGS, NULL},
	 { (char *)"INODE_swigregister", INODE_swigregister, METH_VARARGS, NULL},
	 { (char *)"__IB_GetFreeMemory", _wrap___IB_GetFreeMemory, METH_VARARGS, NULL},
	 { (char *)"__IB_GetTotalMemory", _wrap___IB_GetTotalMemory, METH_VARARGS, NULL},
	 { (char *)"__IB_Hostid", _wrap___IB_Hostid, METH_VARARGS, NULL},
	 { (char *)"__IB_SerialID", _wrap___IB_SerialID, METH_VARARGS, NULL},
	 { (char *)"__IB_FileGlob", _wrap___IB_FileGlob, METH_VARARGS, NULL},
	 { (char *)"__IB_Glob", _wrap___IB_Glob, METH_VARARGS, NULL},
	 { (char *)"__IB_GetUserHome", _wrap___IB_GetUserHome, METH_VARARGS, NULL},
	 { (char *)"__IB_DirectoryExists", _wrap___IB_DirectoryExists, METH_VARARGS, NULL},
	 { (char *)"__IB_FileExists", _wrap___IB_FileExists, METH_VARARGS, NULL},
	 { (char *)"__IB_ExeExists", _wrap___IB_ExeExists, METH_VARARGS, NULL},
	 { (char *)"__IB_FileLink", _wrap___IB_FileLink, METH_VARARGS, NULL},
	 { (char *)"__IB_SendDebugMessage", _wrap___IB_SendDebugMessage, METH_VARARGS, NULL},
	 { (char *)"__IB_SendInfoMessage", _wrap___IB_SendInfoMessage, METH_VARARGS, NULL},
	 { (char *)"__IB_SendNoticeMessage", _wrap___IB_SendNoticeMessage, METH_VARARGS, NULL},
	 { (char *)"__IB_SendWarningMessage", _wrap___IB_SendWarningMessage, METH_VARARGS, NULL},
	 { (char *)"__IB_SendErrorMessage", _wrap___IB_SendErrorMessage, METH_VARARGS, NULL},
	 { (char *)"__IB_SendErrnoMessage", _wrap___IB_SendErrnoMessage, METH_VARARGS, NULL},
	 { (char *)"__IB_SendFatalMessage", _wrap___IB_SendFatalMessage, METH_VARARGS, NULL},
	 { (char *)"__IB_SendPanicMessage", _wrap___IB_SendPanicMessage, METH_VARARGS, NULL},
	 { (char *)"new___IB", _wrap_new___IB, METH_VARARGS, NULL},
	 { (char *)"delete___IB", _wrap_delete___IB, METH_VARARGS, NULL},
	 { (char *)"__IB_swigregister", __IB_swigregister, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_IDBTo_p_IDBOBJ(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDBOBJ *)  ((IDB *) x));
}
static void *_p_VIDBTo_p_IDBOBJ(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((IDBOBJ *)  ((VIDB *) x));
}
static swig_type_info _swigt__p_ATTRLIST = {"_p_ATTRLIST", "ATTRLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ArraySTRING = {"_p_ArraySTRING", "ArraySTRING *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_CHARSET = {"_p_CHARSET", "CHARSET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DATERANGE = {"_p_DATERANGE", "DATERANGE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DOCTYPE = {"_p_DOCTYPE", "DOCTYPE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DOCTYPE_ID = {"_p_DOCTYPE_ID", "DOCTYPE_ID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DOC_ID = {"_p_DOC_ID", "DOC_ID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DTREG = {"_p_DTREG", "DTREG *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FC = {"_p_FC", "FC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FCACHE = {"_p_FCACHE", "FCACHE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FILE = {"_p_FILE", "FILE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FPT = {"_p_FPT", "FPT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GDT_BOOLEAN = {"_p_GDT_BOOLEAN", "GDT_BOOLEAN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IDB = {"_p_IDB", "IDB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IDBOBJ = {"_p_IDBOBJ", "IDBOBJ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IDB_STATS = {"_p_IDB_STATS", "IDB_STATS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_INDEX_ID = {"_p_INDEX_ID", "INDEX_ID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_INFIX2RPN = {"_p_INFIX2RPN", "INFIX2RPN *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_INODE = {"_p_INODE", "INODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_INT = {"_p_INT", "INT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IRSET = {"_p_IRSET", "IRSET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LANGUAGE = {"_p_LANGUAGE", "LANGUAGE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_LOCALE = {"_p_LOCALE", "LOCALE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MDT = {"_p_MDT", "MDT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MDTREC = {"_p_MDTREC", "MDTREC *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_NODETREE = {"_p_NODETREE", "NODETREE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_OPERATOR = {"_p_OPERATOR", "OPERATOR *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_QUERY = {"_p_QUERY", "QUERY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RECORD = {"_p_RECORD", "RECORD *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RESULT = {"_p_RESULT", "RESULT *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RSET = {"_p_RSET", "RSET *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SCANLIST = {"_p_SCANLIST", "SCANLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SCANOBJ = {"_p_SCANOBJ", "SCANOBJ *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SQUERY = {"_p_SQUERY", "SQUERY *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SRCH_DATE = {"_p_SRCH_DATE", "SRCH_DATE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_STRING = {"_p_STRING", "STRING *|constString *|String *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_STRLIST = {"_p_STRLIST", "STRLIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SortBy = {"_p_SortBy", "enum SortBy *|SortBy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_THESAURUS = {"_p_THESAURUS", "THESAURUS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TREENODE = {"_p_TREENODE", "TREENODE *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TREENODELIST = {"_p_TREENODELIST", "TREENODELIST *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VIDB = {"_p_VIDB", "VIDB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VIDB_STATS = {"_p_VIDB_STATS", "VIDB_STATS *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p___IB = {"_p___IB", "__IB *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_q_const__void_p_q_const__void__int = {"_p_f_p_q_const__void_p_q_const__void__int", "int (*)(void const *,void const *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_t_OpType = {"_p_t_OpType", "t_OpType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_t_Operator = {"_p_t_Operator", "enum t_Operator *|t_Operator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "GPTYPE *|unsigned long long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_void = {"_p_void", "void *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_ATTRLIST,
  &_swigt__p_ArraySTRING,
  &_swigt__p_CHARSET,
  &_swigt__p_DATERANGE,
  &_swigt__p_DOCTYPE,
  &_swigt__p_DOCTYPE_ID,
  &_swigt__p_DOC_ID,
  &_swigt__p_DTREG,
  &_swigt__p_FC,
  &_swigt__p_FCACHE,
  &_swigt__p_FILE,
  &_swigt__p_FPT,
  &_swigt__p_GDT_BOOLEAN,
  &_swigt__p_IDB,
  &_swigt__p_IDBOBJ,
  &_swigt__p_IDB_STATS,
  &_swigt__p_INDEX_ID,
  &_swigt__p_INFIX2RPN,
  &_swigt__p_INODE,
  &_swigt__p_INT,
  &_swigt__p_IRSET,
  &_swigt__p_LANGUAGE,
  &_swigt__p_LOCALE,
  &_swigt__p_MDT,
  &_swigt__p_MDTREC,
  &_swigt__p_NODETREE,
  &_swigt__p_OPERATOR,
  &_swigt__p_QUERY,
  &_swigt__p_RECORD,
  &_swigt__p_RESULT,
  &_swigt__p_RSET,
  &_swigt__p_SCANLIST,
  &_swigt__p_SCANOBJ,
  &_swigt__p_SQUERY,
  &_swigt__p_SRCH_DATE,
  &_swigt__p_STRING,
  &_swigt__p_STRLIST,
  &_swigt__p_SortBy,
  &_swigt__p_THESAURUS,
  &_swigt__p_TREENODE,
  &_swigt__p_TREENODELIST,
  &_swigt__p_VIDB,
  &_swigt__p_VIDB_STATS,
  &_swigt__p___IB,
  &_swigt__p_char,
  &_swigt__p_f_p_q_const__void_p_q_const__void__int,
  &_swigt__p_t_OpType,
  &_swigt__p_t_Operator,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_void,
};

static swig_cast_info _swigc__p_ATTRLIST[] = {  {&_swigt__p_ATTRLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ArraySTRING[] = {  {&_swigt__p_ArraySTRING, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_CHARSET[] = {  {&_swigt__p_CHARSET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DATERANGE[] = {  {&_swigt__p_DATERANGE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DOCTYPE[] = {  {&_swigt__p_DOCTYPE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DOCTYPE_ID[] = {  {&_swigt__p_DOCTYPE_ID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DOC_ID[] = {  {&_swigt__p_DOC_ID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DTREG[] = {  {&_swigt__p_DTREG, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FC[] = {  {&_swigt__p_FC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FCACHE[] = {  {&_swigt__p_FCACHE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FILE[] = {  {&_swigt__p_FILE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FPT[] = {  {&_swigt__p_FPT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GDT_BOOLEAN[] = {  {&_swigt__p_GDT_BOOLEAN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDB[] = {  {&_swigt__p_IDB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDBOBJ[] = {  {&_swigt__p_VIDB, _p_VIDBTo_p_IDBOBJ, 0, 0},  {&_swigt__p_IDB, _p_IDBTo_p_IDBOBJ, 0, 0},  {&_swigt__p_IDBOBJ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDB_STATS[] = {  {&_swigt__p_IDB_STATS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INDEX_ID[] = {  {&_swigt__p_INDEX_ID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INFIX2RPN[] = {  {&_swigt__p_INFIX2RPN, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INODE[] = {  {&_swigt__p_INODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_INT[] = {  {&_swigt__p_INT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IRSET[] = {  {&_swigt__p_IRSET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LANGUAGE[] = {  {&_swigt__p_LANGUAGE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_LOCALE[] = {  {&_swigt__p_LOCALE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MDT[] = {  {&_swigt__p_MDT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MDTREC[] = {  {&_swigt__p_MDTREC, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_NODETREE[] = {  {&_swigt__p_NODETREE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_OPERATOR[] = {  {&_swigt__p_OPERATOR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_QUERY[] = {  {&_swigt__p_QUERY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RECORD[] = {  {&_swigt__p_RECORD, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RESULT[] = {  {&_swigt__p_RESULT, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RSET[] = {  {&_swigt__p_RSET, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCANLIST[] = {  {&_swigt__p_SCANLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SCANOBJ[] = {  {&_swigt__p_SCANOBJ, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SQUERY[] = {  {&_swigt__p_SQUERY, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SRCH_DATE[] = {  {&_swigt__p_SRCH_DATE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_STRING[] = {  {&_swigt__p_STRING, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_STRLIST[] = {  {&_swigt__p_STRLIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SortBy[] = {  {&_swigt__p_SortBy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_THESAURUS[] = {  {&_swigt__p_THESAURUS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TREENODE[] = {  {&_swigt__p_TREENODE, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TREENODELIST[] = {  {&_swigt__p_TREENODELIST, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VIDB[] = {  {&_swigt__p_VIDB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VIDB_STATS[] = {  {&_swigt__p_VIDB_STATS, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p___IB[] = {  {&_swigt__p___IB, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_q_const__void_p_q_const__void__int[] = {  {&_swigt__p_f_p_q_const__void_p_q_const__void__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_t_OpType[] = {  {&_swigt__p_t_OpType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_t_Operator[] = {  {&_swigt__p_t_Operator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_void[] = {  {&_swigt__p_void, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_ATTRLIST,
  _swigc__p_ArraySTRING,
  _swigc__p_CHARSET,
  _swigc__p_DATERANGE,
  _swigc__p_DOCTYPE,
  _swigc__p_DOCTYPE_ID,
  _swigc__p_DOC_ID,
  _swigc__p_DTREG,
  _swigc__p_FC,
  _swigc__p_FCACHE,
  _swigc__p_FILE,
  _swigc__p_FPT,
  _swigc__p_GDT_BOOLEAN,
  _swigc__p_IDB,
  _swigc__p_IDBOBJ,
  _swigc__p_IDB_STATS,
  _swigc__p_INDEX_ID,
  _swigc__p_INFIX2RPN,
  _swigc__p_INODE,
  _swigc__p_INT,
  _swigc__p_IRSET,
  _swigc__p_LANGUAGE,
  _swigc__p_LOCALE,
  _swigc__p_MDT,
  _swigc__p_MDTREC,
  _swigc__p_NODETREE,
  _swigc__p_OPERATOR,
  _swigc__p_QUERY,
  _swigc__p_RECORD,
  _swigc__p_RESULT,
  _swigc__p_RSET,
  _swigc__p_SCANLIST,
  _swigc__p_SCANOBJ,
  _swigc__p_SQUERY,
  _swigc__p_SRCH_DATE,
  _swigc__p_STRING,
  _swigc__p_STRLIST,
  _swigc__p_SortBy,
  _swigc__p_THESAURUS,
  _swigc__p_TREENODE,
  _swigc__p_TREENODELIST,
  _swigc__p_VIDB,
  _swigc__p_VIDB_STATS,
  _swigc__p___IB,
  _swigc__p_char,
  _swigc__p_f_p_q_const__void_p_q_const__void__int,
  _swigc__p_t_OpType,
  _swigc__p_t_Operator,
  _swigc__p_unsigned_long_long,
  _swigc__p_void,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_SetString(PyExc_NameError,"Unknown C global variable");
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
        /* PyObject header changed in Python 3 */
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version */
#endif
#ifdef COUNT_ALLOCS
        0,0,0,0                             /* tp_alloc -> tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (c && (c = strstr(c, "swig_ptr: "))) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyObject *metatype_args;
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  
  /* metatype is used to implement static member variables. */
  metatype_args = Py_BuildValue("(s(O){})", "SwigPyObjectType", &PyType_Type);
  assert(metatype_args);
  metatype = (PyTypeObject *) PyType_Type.tp_call((PyObject *) &PyType_Type, metatype_args, NULL);
  assert(metatype);
  Py_DECREF(metatype_args);
  metatype->tp_setattro = (setattrofunc) &SwigPyObjectType_setattro;
  assert(PyType_Ready(metatype) >= 0);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = SwigPyObject_TypeOnce();
  } else if (SwigPyObject_TypeOnce()->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "GDT_FALSE",SWIG_From_int(static_cast< int >(0)));
  SWIG_Python_SetConstant(d, "GDT_TRUE",SWIG_From_int(static_cast< int >(1)));
  SWIG_Python_SetConstant(d, "Unsorted",SWIG_From_int(static_cast< int >(Unsorted)));
  SWIG_Python_SetConstant(d, "ByDate",SWIG_From_int(static_cast< int >(ByDate)));
  SWIG_Python_SetConstant(d, "ByReverseDate",SWIG_From_int(static_cast< int >(ByReverseDate)));
  SWIG_Python_SetConstant(d, "ByScore",SWIG_From_int(static_cast< int >(ByScore)));
  SWIG_Python_SetConstant(d, "ByAdjScore",SWIG_From_int(static_cast< int >(ByAdjScore)));
  SWIG_Python_SetConstant(d, "ByAuxCount",SWIG_From_int(static_cast< int >(ByAuxCount)));
  SWIG_Python_SetConstant(d, "ByHits",SWIG_From_int(static_cast< int >(ByHits)));
  SWIG_Python_SetConstant(d, "ByReverseHits",SWIG_From_int(static_cast< int >(ByReverseHits)));
  SWIG_Python_SetConstant(d, "ByKey",SWIG_From_int(static_cast< int >(ByKey)));
  SWIG_Python_SetConstant(d, "ByIndex",SWIG_From_int(static_cast< int >(ByIndex)));
  SWIG_Python_SetConstant(d, "ByCategory",SWIG_From_int(static_cast< int >(ByCategory)));
  SWIG_Python_SetConstant(d, "ByNewsrank",SWIG_From_int(static_cast< int >(ByNewsrank)));
  SWIG_Python_SetConstant(d, "ByFunction",SWIG_From_int(static_cast< int >(ByFunction)));
  SWIG_Python_SetConstant(d, "ByPrivate",SWIG_From_int(static_cast< int >(ByPrivate)));
  SWIG_Python_SetConstant(d, "ByPrivateLocal1",SWIG_From_int(static_cast< int >(ByPrivateLocal1)));
  SWIG_Python_SetConstant(d, "ByPrivateLocal2",SWIG_From_int(static_cast< int >(ByPrivateLocal2)));
  SWIG_Python_SetConstant(d, "ByPrivateLocal3",SWIG_From_int(static_cast< int >(ByPrivateLocal3)));
  SWIG_Python_SetConstant(d, "ByExtIndex",SWIG_From_int(static_cast< int >(ByExtIndex)));
  SWIG_Python_SetConstant(d, "ByExtIndex1",SWIG_From_int(static_cast< int >(ByExtIndex1)));
  SWIG_Python_SetConstant(d, "ByExtIndex2",SWIG_From_int(static_cast< int >(ByExtIndex2)));
  SWIG_Python_SetConstant(d, "ByExtIndex3",SWIG_From_int(static_cast< int >(ByExtIndex3)));
  SWIG_Python_SetConstant(d, "ByExtIndex4",SWIG_From_int(static_cast< int >(ByExtIndex4)));
  SWIG_Python_SetConstant(d, "ByExtIndex5",SWIG_From_int(static_cast< int >(ByExtIndex5)));
  SWIG_Python_SetConstant(d, "ByExtIndex6",SWIG_From_int(static_cast< int >(ByExtIndex6)));
  SWIG_Python_SetConstant(d, "ByExtIndex7",SWIG_From_int(static_cast< int >(ByExtIndex7)));
  SWIG_Python_SetConstant(d, "ByExtIndex8",SWIG_From_int(static_cast< int >(ByExtIndex8)));
  SWIG_Python_SetConstant(d, "ByExtIndex9",SWIG_From_int(static_cast< int >(ByExtIndex9)));
  SWIG_Python_SetConstant(d, "ByExtIndex10",SWIG_From_int(static_cast< int >(ByExtIndex10)));
  SWIG_Python_SetConstant(d, "ByExtIndex11",SWIG_From_int(static_cast< int >(ByExtIndex11)));
  SWIG_Python_SetConstant(d, "ByExtIndex12",SWIG_From_int(static_cast< int >(ByExtIndex12)));
  SWIG_Python_SetConstant(d, "OperatorERR",SWIG_From_int(static_cast< int >(OperatorERR)));
  SWIG_Python_SetConstant(d, "OperatorNoop",SWIG_From_int(static_cast< int >(OperatorNoop)));
  SWIG_Python_SetConstant(d, "OperatorNOT",SWIG_From_int(static_cast< int >(OperatorNOT)));
  SWIG_Python_SetConstant(d, "OperatorWithin",SWIG_From_int(static_cast< int >(OperatorWithin)));
  SWIG_Python_SetConstant(d, "OperatorXWithin",SWIG_From_int(static_cast< int >(OperatorXWithin)));
  SWIG_Python_SetConstant(d, "OperatorInside",SWIG_From_int(static_cast< int >(OperatorInside)));
  SWIG_Python_SetConstant(d, "OperatorInclusive",SWIG_From_int(static_cast< int >(OperatorInclusive)));
  SWIG_Python_SetConstant(d, "OperatorSibling",SWIG_From_int(static_cast< int >(OperatorSibling)));
  SWIG_Python_SetConstant(d, "OperatorNotWithin",SWIG_From_int(static_cast< int >(OperatorNotWithin)));
  SWIG_Python_SetConstant(d, "OperatorReduce",SWIG_From_int(static_cast< int >(OperatorReduce)));
  SWIG_Python_SetConstant(d, "OperatorHitCount",SWIG_From_int(static_cast< int >(OperatorHitCount)));
  SWIG_Python_SetConstant(d, "OperatorTrim",SWIG_From_int(static_cast< int >(OperatorTrim)));
  SWIG_Python_SetConstant(d, "OperatorWithinFile",SWIG_From_int(static_cast< int >(OperatorWithinFile)));
  SWIG_Python_SetConstant(d, "OperatorWithinFileExtension",SWIG_From_int(static_cast< int >(OperatorWithinFileExtension)));
  SWIG_Python_SetConstant(d, "OperatorWithinDoctype",SWIG_From_int(static_cast< int >(OperatorWithinDoctype)));
  SWIG_Python_SetConstant(d, "OperatorWithKey",SWIG_From_int(static_cast< int >(OperatorWithKey)));
  SWIG_Python_SetConstant(d, "OperatorSortBy",SWIG_From_int(static_cast< int >(OperatorSortBy)));
  SWIG_Python_SetConstant(d, "OperatorBoostScore",SWIG_From_int(static_cast< int >(OperatorBoostScore)));
  SWIG_Python_SetConstant(d, "OperatorOr",SWIG_From_int(static_cast< int >(OperatorOr)));
  SWIG_Python_SetConstant(d, "OperatorAnd",SWIG_From_int(static_cast< int >(OperatorAnd)));
  SWIG_Python_SetConstant(d, "OperatorAndNot",SWIG_From_int(static_cast< int >(OperatorAndNot)));
  SWIG_Python_SetConstant(d, "OperatorXor",SWIG_From_int(static_cast< int >(OperatorXor)));
  SWIG_Python_SetConstant(d, "OperatorXnor",SWIG_From_int(static_cast< int >(OperatorXnor)));
  SWIG_Python_SetConstant(d, "OperatorNotAnd",SWIG_From_int(static_cast< int >(OperatorNotAnd)));
  SWIG_Python_SetConstant(d, "OperatorNor",SWIG_From_int(static_cast< int >(OperatorNor)));
  SWIG_Python_SetConstant(d, "OperatorNand",SWIG_From_int(static_cast< int >(OperatorNand)));
  SWIG_Python_SetConstant(d, "OperatorLT",SWIG_From_int(static_cast< int >(OperatorLT)));
  SWIG_Python_SetConstant(d, "OperatorLTE",SWIG_From_int(static_cast< int >(OperatorLTE)));
  SWIG_Python_SetConstant(d, "OperatorGT",SWIG_From_int(static_cast< int >(OperatorGT)));
  SWIG_Python_SetConstant(d, "OperatorGTE",SWIG_From_int(static_cast< int >(OperatorGTE)));
  SWIG_Python_SetConstant(d, "OperatorJoin",SWIG_From_int(static_cast< int >(OperatorJoin)));
  SWIG_Python_SetConstant(d, "OperatorJoinL",SWIG_From_int(static_cast< int >(OperatorJoinL)));
  SWIG_Python_SetConstant(d, "OperatorJoinR",SWIG_From_int(static_cast< int >(OperatorJoinR)));
  SWIG_Python_SetConstant(d, "OperatorProximity",SWIG_From_int(static_cast< int >(OperatorProximity)));
  SWIG_Python_SetConstant(d, "OperatorBefore",SWIG_From_int(static_cast< int >(OperatorBefore)));
  SWIG_Python_SetConstant(d, "OperatorAfter",SWIG_From_int(static_cast< int >(OperatorAfter)));
  SWIG_Python_SetConstant(d, "OperatorAdj",SWIG_From_int(static_cast< int >(OperatorAdj)));
  SWIG_Python_SetConstant(d, "OperatorFollows",SWIG_From_int(static_cast< int >(OperatorFollows)));
  SWIG_Python_SetConstant(d, "OperatorPrecedes",SWIG_From_int(static_cast< int >(OperatorPrecedes)));
  SWIG_Python_SetConstant(d, "OperatorNear",SWIG_From_int(static_cast< int >(OperatorNear)));
  SWIG_Python_SetConstant(d, "OperatorFar",SWIG_From_int(static_cast< int >(OperatorFar)));
  SWIG_Python_SetConstant(d, "OperatorNeighbor",SWIG_From_int(static_cast< int >(OperatorNeighbor)));
  SWIG_Python_SetConstant(d, "OperatorAndWithin",SWIG_From_int(static_cast< int >(OperatorAndWithin)));
  SWIG_Python_SetConstant(d, "OperatorOrWithin",SWIG_From_int(static_cast< int >(OperatorOrWithin)));
  SWIG_Python_SetConstant(d, "OperatorBeforeWithin",SWIG_From_int(static_cast< int >(OperatorBeforeWithin)));
  SWIG_Python_SetConstant(d, "OperatorAfterWithin",SWIG_From_int(static_cast< int >(OperatorAfterWithin)));
  SWIG_Python_SetConstant(d, "OperatorPeer",SWIG_From_int(static_cast< int >(OperatorPeer)));
  SWIG_Python_SetConstant(d, "OperatorBeforePeer",SWIG_From_int(static_cast< int >(OperatorBeforePeer)));
  SWIG_Python_SetConstant(d, "OperatorAfterPeer",SWIG_From_int(static_cast< int >(OperatorAfterPeer)));
  SWIG_Python_SetConstant(d, "OperatorXPeer",SWIG_From_int(static_cast< int >(OperatorXPeer)));
  SWIG_Python_SetConstant(d, "OperatorKey",SWIG_From_int(static_cast< int >(OperatorKey)));
  SWIG_Python_SetConstant(d, "OperatorFile",SWIG_From_int(static_cast< int >(OperatorFile)));
  SWIG_Python_SetConstant(d, "Unnormalized",SWIG_From_int(static_cast< int >(Unnormalized)));
  SWIG_Python_SetConstant(d, "NoNormalization",SWIG_From_int(static_cast< int >(NoNormalization)));
  SWIG_Python_SetConstant(d, "CosineNormalization",SWIG_From_int(static_cast< int >(CosineNormalization)));
  SWIG_Python_SetConstant(d, "MaxNormalization",SWIG_From_int(static_cast< int >(MaxNormalization)));
  SWIG_Python_SetConstant(d, "LogNormalization",SWIG_From_int(static_cast< int >(LogNormalization)));
  SWIG_Python_SetConstant(d, "BytesNormalization",SWIG_From_int(static_cast< int >(BytesNormalization)));
  SWIG_Python_SetConstant(d, "preCosineMetricNormalization",SWIG_From_int(static_cast< int >(preCosineMetricNormalization)));
  SWIG_Python_SetConstant(d, "CosineMetricNormalization",SWIG_From_int(static_cast< int >(CosineMetricNormalization)));
  SWIG_Python_SetConstant(d, "UndefinedNormalization",SWIG_From_int(static_cast< int >(UndefinedNormalization)));
  SWIG_Python_SetConstant(d, "ELEMENT_Full",SWIG_FromCharPtr("F"));
  SWIG_Python_SetConstant(d, "ELEMENT_Brief",SWIG_FromCharPtr("B"));
  SWIG_Python_SetConstant(d, "ELEMENT_Short",SWIG_FromCharPtr("S"));
  SWIG_Python_SetConstant(d, "ELEMENT_G",SWIG_FromCharPtr("G"));
  SWIG_Python_SetConstant(d, "ELEMENT_Raw",SWIG_FromCharPtr("R"));
  SWIG_Python_SetConstant(d, "ELEMENT_Location",SWIG_FromCharPtr("L"));
  SWIG_Python_SetConstant(d, "ELEMENT_Metadata",SWIG_FromCharPtr("M"));
  SWIG_Python_SetConstant(d, "RECORDSYNTAX_Sutrs",SWIG_FromCharPtr("1.2.840.10003.5.101"));
  SWIG_Python_SetConstant(d, "RECORDSYNTAX_Usmarc",SWIG_FromCharPtr("1.2.840.10003.5.10"));
  SWIG_Python_SetConstant(d, "RECORDSYNTAX_Html",SWIG_FromCharPtr("1.2.840.10003.5.108"));
  SWIG_Python_SetConstant(d, "RECORDSYNTAX_Sgml",SWIG_FromCharPtr("1.2.840.10003.5.1000.81.1"));
  SWIG_Python_SetConstant(d, "RECORDSYNTAX_Xml",SWIG_FromCharPtr("1.2.840.10003.5.1000.81.2"));
  SWIG_Python_SetConstant(d, "RECORDSYNTAX_Raw",SWIG_FromCharPtr("1.2.840.10003.5.1000"));
  SWIG_Python_SetConstant(d, "RECORDSYNTAX_DVBHtml",SWIG_FromCharPtr("1.2.840.10003.5.1000.34.2"));
  SWIG_Python_SetConstant(d, "copyright",SWIG_FromCharPtr("Copyright 1999-2000 Edward C. Zimmermann and Basis Systeme netzwerk, Munich Germany."));
  SWIG_Python_SetConstant(d, "version",SWIG_FromCharPtr("%I%"));
  SWIG_Python_SetConstant(d, "QueryAutodetect",SWIG_From_int(static_cast< int >(QueryAutodetect)));
  SWIG_Python_SetConstant(d, "QueryRPN",SWIG_From_int(static_cast< int >(QueryRPN)));
  SWIG_Python_SetConstant(d, "QueryInfix",SWIG_From_int(static_cast< int >(QueryInfix)));
  SWIG_Python_SetConstant(d, "QueryRelevantId",SWIG_From_int(static_cast< int >(QueryRelevantId)));
  PyDict_SetItemString(md,(char*)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char*)"DbStateInvalid",Swig_var_DbStateInvalid_get, Swig_var_DbStateInvalid_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DbStateReady",Swig_var_DbStateReady_get, Swig_var_DbStateReady_set);
  SWIG_addvarlink(SWIG_globals(),(char*)"DbStateBusy",Swig_var_DbStateBusy_get, Swig_var_DbStateBusy_set);
  SWIG_Python_SetConstant(d, "iNothing",SWIG_From_int(static_cast< int >(iNothing)));
  SWIG_Python_SetConstant(d, "iOptimize",SWIG_From_int(static_cast< int >(iOptimize)));
  SWIG_Python_SetConstant(d, "iMerge",SWIG_From_int(static_cast< int >(iMerge)));
  SWIG_Python_SetConstant(d, "iCollapse",SWIG_From_int(static_cast< int >(iCollapse)));
  SWIG_Python_SetConstant(d, "iIncremental",SWIG_From_int(static_cast< int >(iIncremental)));
  SWIG_Python_SetConstant(d, "LOG_PANIC",SWIG_From_int(static_cast< int >((1 << 0))));
  SWIG_Python_SetConstant(d, "LOG_FATAL",SWIG_From_int(static_cast< int >((1 << 1))));
  SWIG_Python_SetConstant(d, "LOG_ERROR",SWIG_From_int(static_cast< int >((1 << 2))));
  SWIG_Python_SetConstant(d, "LOG_ERRNO",SWIG_From_int(static_cast< int >((1 << 3))));
  SWIG_Python_SetConstant(d, "LOG_WARN",SWIG_From_int(static_cast< int >((1 << 4))));
  SWIG_Python_SetConstant(d, "LOG_NOTICE",SWIG_From_int(static_cast< int >((1 << 5))));
  SWIG_Python_SetConstant(d, "LOG_INFO",SWIG_From_int(static_cast< int >((1 << 6))));
  SWIG_Python_SetConstant(d, "LOG_DEBUG",SWIG_From_int(static_cast< int >((1 << 7))));
  SWIG_Python_SetConstant(d, "LOG_ALL",SWIG_From_int(static_cast< int >(0xffff)));
  SWIG_Python_SetConstant(d, "DEVICE_STDERR",SWIG_FromCharPtr("<stderr>"));
  SWIG_Python_SetConstant(d, "DEVICE_STDOUT",SWIG_FromCharPtr("<stdout>"));
  SWIG_Python_SetConstant(d, "DEVICE_SYSLOG",SWIG_FromCharPtr("<syslog>"));
  SWIG_Python_SetConstant(d, "DEVICE_LOCAL0",SWIG_FromCharPtr("<syslog0>"));
  SWIG_Python_SetConstant(d, "DEVICE_LOCAL1",SWIG_FromCharPtr("<syslog1>"));
  SWIG_Python_SetConstant(d, "DEVICE_LOCAL2",SWIG_FromCharPtr("<syslog2>"));
  SWIG_Python_SetConstant(d, "DEVICE_LOCAL3",SWIG_FromCharPtr("<syslog3>"));
  SWIG_Python_SetConstant(d, "DEVICE_LOCAL4",SWIG_FromCharPtr("<syslog4>"));
  SWIG_Python_SetConstant(d, "DEVICE_LOCAL5",SWIG_FromCharPtr("<syslog5>"));
  SWIG_Python_SetConstant(d, "DEVICE_LOCAL6",SWIG_FromCharPtr("<syslog6>"));
  SWIG_Python_SetConstant(d, "DEVICE_LOCAL7",SWIG_FromCharPtr("<syslog7>"));
  
  __Register_IB_Application(SWIG_name, stdout, DebugFlag);
  if (DebugFlag)  message_log  (LOG_DEBUG, "%s completed!", "init");
  
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

